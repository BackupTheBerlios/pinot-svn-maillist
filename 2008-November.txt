From fabricecolin at mail.berlios.de  Sat Nov  1 15:52:52 2008
From: fabricecolin at mail.berlios.de (fabricecolin at mail.berlios.de)
Date: Sat, 1 Nov 2008 15:52:52 +0100
Subject: [Pinot-svn] r1395 - in trunk: . SQL
Message-ID: <200811011452.mA1Eqqb7025255@sheep.berlios.de>

Author: fabricecolin
Date: 2008-11-01 15:52:37 +0100 (Sat, 01 Nov 2008)
New Revision: 1395

Added:
   trunk/SQL/MetaDataBackup.cpp
   trunk/SQL/MetaDataBackup.h
Modified:
   trunk/SQL/Makefile.am
   trunk/configure.in
Log:
Check for the header attr/xattr.h.
Build MetaDataBackup, a class that enables saving to and loading metadata from
the database and/or filesystem extended attributes. The purpose is to allow
the daemon to restore user-set metadata after reindexing.


Modified: trunk/SQL/Makefile.am
===================================================================
--- trunk/SQL/Makefile.am	2008-10-27 07:13:45 UTC (rev 1394)
+++ trunk/SQL/Makefile.am	2008-11-01 14:52:37 UTC (rev 1395)
@@ -3,6 +3,7 @@
 noinst_HEADERS = \
 	ActionQueue.h \
 	CrawlHistory.h \
+	MetaDataBackup.h \
 	QueryHistory.h \
 	SQLDB.h \
 	SQLiteBase.h \
@@ -13,6 +14,7 @@
 libSQL_la_SOURCES = \
 	ActionQueue.cpp \
 	CrawlHistory.cpp \
+	MetaDataBackup.cpp \
 	QueryHistory.cpp \
 	SQLDB.cpp \
 	SQLiteBase.cpp \

Added: trunk/SQL/MetaDataBackup.cpp
===================================================================
--- trunk/SQL/MetaDataBackup.cpp	2008-10-27 07:13:45 UTC (rev 1394)
+++ trunk/SQL/MetaDataBackup.cpp	2008-11-01 14:52:37 UTC (rev 1395)
@@ -0,0 +1,474 @@
+/*
+ *  Copyright 2005-2008 Fabrice Colin
+ *
+ *  This program is free software; you can redistribute it and/or modify
+ *  it under the terms of the GNU General Public License as published by
+ *  the Free Software Foundation; either version 2 of the License, or
+ *  (at your option) any later version.
+ *
+ *  This program is distributed in the hope that it will be useful,
+ *  but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ *  GNU General Public License for more details.
+ *
+ *  You should have received a copy of the GNU General Public License
+ *  along with this program; if not, write to the Free Software
+ *  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
+ */
+
+#include "config.h"
+#include <stdio.h>
+#include <stdlib.h>
+#include <unistd.h>
+#include <errno.h>
+#include <sys/types.h>
+#include <sys/stat.h>
+#ifdef HAVE_ATTR_XATTR
+#include <attr/xattr.h>
+#endif
+#include <set>
+#include <iostream>
+
+#include "Url.h"
+#include "StringManip.h"
+#include "TimeConverter.h"
+#include "MetaDataBackup.h"
+
+using std::string;
+using std::set;
+using std::cout;
+using std::endl;
+
+MetaDataBackup::MetaDataBackup(const string &database) :
+	SQLiteBase(database)
+{
+}
+
+MetaDataBackup::~MetaDataBackup()
+{
+}
+
+bool MetaDataBackup::setAttribute(const string &url,
+	const string &name, const string &value, bool noXAttr)
+{
+#ifdef HAVE_ATTR_XATTR
+	Url urlObj(url);
+
+	// If the file is local and isn't a nested document, use an extended attribute
+	if ((noXAttr == false) &&
+		(urlObj.isLocal() == true) &&
+		(urlObj.getParameters().empty() == true))
+	{
+		string fileName(url.substr(urlObj.getProtocol().length() + 3));
+		string attrName("pinot." + name);
+
+		if (setxattr(fileName.c_str(), attrName.c_str(),
+			value.c_str(), (size_t)value.length(), 0) == 0)
+		{
+			return true;
+		}
+		else if (errno != ENOTSUP)
+		{
+			// Extended attributes are supported, but some error occured 
+			return false;
+		}
+	}
+#endif
+	bool update = false, success = false;
+
+	// Is there already such an item for this URL ?
+	SQLResults *results = executeStatement("SELECT Url FROM MetaDataBackup \
+		WHERE Url='%q' AND Name='%q';",
+		Url::escapeUrl(url).c_str(), name.c_str());
+	if (results != NULL)
+	{
+		SQLRow *row = results->nextRow();
+		if (row != NULL)
+		{
+			// Yes, there is
+			update = true;
+
+			delete row;
+		}
+
+		delete results;
+	}
+
+	if (update == false)
+	{
+		results = executeStatement("INSERT INTO MetaDataBackup \
+			VALUES('%q', '%q', '%q');",
+			Url::escapeUrl(url).c_str(), name.c_str(), value.c_str());
+	}
+	else
+	{
+		results = executeStatement("UPDATE MetaDataBackup \
+			SET Value='%q' WHERE Url='%q' AND Name='%q';",
+			value.c_str(), Url::escapeUrl(url).c_str(), name.c_str());
+	}
+	if (results != NULL)
+	{
+		success = true;
+
+		delete results;
+	}
+
+	return success;
+
+}
+
+bool MetaDataBackup::getAttribute(const string &url,
+	const string &name, string &value, bool noXAttr)
+{
+	bool success = false;
+#ifdef HAVE_ATTR_XATTR
+	Url urlObj(url);
+
+	// If the file is local and isn't a nested document, use an extended attribute
+	if ((noXAttr == false) &&
+		(urlObj.isLocal() == true) &&
+		(urlObj.getParameters().empty() == true))
+	{
+		string fileName(url.substr(urlObj.getProtocol().length() + 3));
+		string attrName("pinot." + name);
+
+		ssize_t attrSize = getxattr(fileName.c_str(), attrName.c_str(), NULL, 0);
+		if (attrSize > 0)
+		{
+			char *pAttr = new char[attrSize];
+
+			if (getxattr(fileName.c_str(), attrName.c_str(), pAttr, attrSize) > 0)
+			{
+				value = string(pAttr, attrSize);
+				success = true;
+			}
+			else if (errno != ENOTSUP)
+			{
+				// Extended attributes are supported, but this one doesn't exist
+				delete[] pAttr;
+				return false;
+			}
+
+			delete[] pAttr;
+		}
+	}
+#endif
+
+	SQLResults *results = executeStatement("SELECT Value FROM MetaDataBackup \
+		WHERE Url='%q' AND Name='%q';",
+		Url::escapeUrl(url).c_str(), name.c_str());
+	if (results != NULL)
+	{
+		SQLRow *row = results->nextRow();
+		if (row != NULL)
+		{
+			value = row->getColumn(0);
+			success = true;
+
+			delete row;
+		}
+
+		delete results;
+	}
+
+	return success;
+}
+
+bool MetaDataBackup::getAttributes(const string &url,
+	const string &name, set<string> &values)
+{
+	bool success = false;
+#if 0
+	Url urlObj(url);
+
+	// If the file is local and isn't a nested document, use an extended attribute
+	if ((urlObj.isLocal() == true) &&
+		(urlObj.getParameters().empty() == true))
+	{
+		string likeName("pinot." + name);
+
+		ssize_t listSize = flistxattr(fd, NULL, 0);
+		if (listSize > 0)
+		{
+			char *pList = new char[listSize];
+
+			if ((pList != NULL) &&
+				(flistxattr(fd, pList, listSize) > 0))
+			{
+				string attrList(pList, listSize);
+				string::size_type startPos = 0, endPos = attrList.find('\0');
+
+				while (endPos != string::npos)
+				{
+					string attrName(attrList.substr(startPos, endPos - startPos));
+
+					if ((attrName.length() > likeName.length()) &&
+						(attrName.substr(0, likeName.length()) == likeName))
+					{
+						string value;
+
+						if (getAttribute(url, attrName.substr(6), value, true) == true)
+						{
+							values.insert(value);
+						}
+					}
+
+					// Next
+					startPos = endPos + 1;
+					if (startPos < listSize)
+					{
+						endPos = attrList.find('\0', startPos);
+					}
+					else
+					{
+						endPos = string::npos;
+					}
+				}
+			}
+
+			delete[] pList;
+		}
+	}
+#endif
+
+	SQLResults *results = executeStatement("SELECT Value FROM MetaDataBackup \
+		WHERE Url='%q' AND Name LIKE '%q%';",
+		Url::escapeUrl(url).c_str(), name.c_str());
+	if (results != NULL)
+	{
+		while (results->hasMoreRows() == true)
+                {
+			SQLRow *row = results->nextRow();
+			if (row == NULL)
+			{
+				continue;
+			}
+
+			values.insert(row->getColumn(0));
+			success = true;
+
+			delete row;
+		}
+
+		delete results;
+	}
+
+	return success;
+}
+
+bool MetaDataBackup::removeAttribute(const string &url,
+	const string &name, bool noXAttr, bool likeName)
+{
+	bool success = false;
+
+#ifdef HAVE_ATTR_XATTR
+	Url urlObj(url);
+
+	// If the file is local and isn't a nested document, use an extended attribute
+	if ((noXAttr == false) &&
+		(url.empty() == false) &&
+		(urlObj.isLocal() == true) &&
+		(urlObj.getParameters().empty() == true))
+	{
+		string fileName(url.substr(urlObj.getProtocol().length() + 3));
+		string attrName("pinot." + name);
+
+		if (removeattr(fileName.c_str(), attrName.c_str()) > 0)
+		{
+			return true;
+		}
+		else if (errno != ENOTSUP)
+		{
+			// Extended attributes are supported, but this one doesn't exist
+			return false;
+		}
+	}
+#endif
+
+	// Delete from MetaDataBackup
+	SQLResults *results = NULL;
+
+	if (url.empty() == false)
+	{
+		if (likeName == false)
+		{
+			results = executeStatement("DELETE FROM MetaDataBackup \
+				WHERE Url='%q' AND NAME='%q';",
+				Url::escapeUrl(url).c_str(), name.c_str());
+		}
+		else
+		{
+			results = executeStatement("DELETE FROM MetaDataBackup \
+				WHERE Url='%q' AND NAME LIKE '%q%';",
+				Url::escapeUrl(url).c_str(), name.c_str());
+		}
+	}
+	else
+	{
+		results = executeStatement("DELETE FROM MetaDataBackup \
+			WHERE NAME='%q';",
+			name.c_str());
+	}
+	if (results != NULL)
+	{
+		success = true;
+		delete results;
+	}
+
+	return success;
+}
+
+/// Creates the MetaDataBackup table in the database.
+bool MetaDataBackup::create(const string &database)
+{
+	bool success = true;
+
+	// The specified path must be a file
+	if (SQLiteBase::check(database) == false)
+	{
+		return false;
+	}
+
+	SQLiteBase db(database);
+
+	// Does MetaDataBackup exist ?
+	if (db.executeSimpleStatement("SELECT * FROM MetaDataBackup LIMIT 1;") == false)
+	{
+#ifdef DEBUG
+		cout << "MetaDataBackup::create: MetaDataBackup doesn't exist" << endl;
+#endif
+		// Create the table
+		if (db.executeSimpleStatement("CREATE TABLE MetaDataBackup (Url VARCHAR(255), \
+			Name VARCHAR(255), Value TEXT, PRIMARY KEY(Url, Value));") == false)
+		{
+			success = false;
+		}
+	}
+
+	return success;
+}
+
+/// Adds an item.
+bool MetaDataBackup::addItem(const DocumentInfo &docInfo, DocumentInfo::SerialExtent extent)
+{
+	string url(docInfo.getLocation());
+	bool success = false;
+
+	if ((extent == DocumentInfo::SERIAL_FIELDS) ||
+		(extent == DocumentInfo::SERIAL_ALL))
+	{
+		if (setAttribute(url, "fields",
+			docInfo.serialize(DocumentInfo::SERIAL_FIELDS)) == false)
+		{
+			return false;
+		}
+
+		success = true;
+	}
+	if ((extent == DocumentInfo::SERIAL_LABELS) ||
+		(extent == DocumentInfo::SERIAL_ALL))
+	{
+		success = true;
+
+		const set<string> &labels = docInfo.getLabels();
+		for (set<string>::const_iterator labelIter = labels.begin();
+			labelIter != labels.end(); ++labelIter)
+		{
+			// Skip internal labels
+			if (labelIter->substr(0, 2) == "X-")
+			{
+				continue;
+			}
+
+			if (setAttribute(url, string("label.") + *labelIter, *labelIter, true) == false)
+			{
+				success = false;
+			}
+		}
+	}
+
+	return success;
+}
+
+/// Gets an item.
+bool MetaDataBackup::getItem(DocumentInfo &docInfo, DocumentInfo::SerialExtent extent)
+{
+	string url(docInfo.getLocation()), value;
+	bool success = false;
+
+	if ((extent == DocumentInfo::SERIAL_FIELDS) ||
+		(extent == DocumentInfo::SERIAL_ALL))
+	{
+		if (getAttribute(url, "fields", value) == false)
+		{
+			return false;
+		}
+
+		docInfo.deserialize(value, DocumentInfo::SERIAL_FIELDS);
+		success = true;
+	}
+	if ((extent == DocumentInfo::SERIAL_LABELS) ||
+		(extent == DocumentInfo::SERIAL_ALL))
+	{
+		set<string> labels;
+
+		success = true;
+
+		if (getAttributes(url, "label", labels) == false)
+		{
+			success = false;
+		}
+		else
+		{
+			docInfo.setLabels(labels);
+		}
+	}
+
+	return success;
+}
+
+/// Deletes an item.
+bool MetaDataBackup::deleteItem(const DocumentInfo &docInfo, DocumentInfo::SerialExtent extent,
+	const string &value)
+{
+	string url(docInfo.getLocation());
+	bool success = false;
+
+	if ((extent == DocumentInfo::SERIAL_FIELDS) ||
+		(extent == DocumentInfo::SERIAL_ALL))
+	{
+		if (removeAttribute(url, "fields") == false)
+		{
+			return false;
+		}
+
+		success = true;
+	}
+	if ((extent == DocumentInfo::SERIAL_LABELS) ||
+		(extent == DocumentInfo::SERIAL_ALL))
+	{
+		if (value.empty() == false)
+		{
+			success = removeAttribute(url, string("label.") + value, true);
+		}
+		else
+		{
+			success = removeAttribute(url, "label.", true, true);
+		}
+	}
+
+	return success;
+}
+
+/// Deletes a label.
+bool MetaDataBackup::deleteLabel(const string &value)
+{
+	if ((value.empty() == true) ||
+		(removeAttribute("", string("label.") + value, true) == false))
+	{
+		return false;
+	}
+
+	return true;
+}
+

Added: trunk/SQL/MetaDataBackup.h
===================================================================
--- trunk/SQL/MetaDataBackup.h	2008-10-27 07:13:45 UTC (rev 1394)
+++ trunk/SQL/MetaDataBackup.h	2008-11-01 14:52:37 UTC (rev 1395)
@@ -0,0 +1,74 @@
+/*
+ *  Copyright 2005-2008 Fabrice Colin
+ *
+ *  This program is free software; you can redistribute it and/or modify
+ *  it under the terms of the GNU General Public License as published by
+ *  the Free Software Foundation; either version 2 of the License, or
+ *  (at your option) any later version.
+ *
+ *  This program is distributed in the hope that it will be useful,
+ *  but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ *  GNU General Public License for more details.
+ *
+ *  You should have received a copy of the GNU General Public License
+ *  along with this program; if not, write to the Free Software
+ *  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
+ */
+
+#ifndef _META_DATA_BACKUP_H
+#define _META_DATA_BACKUP_H
+
+#include <time.h>
+#include <string>
+#include <set>
+
+#include "DocumentInfo.h"
+#include "SQLiteBase.h"
+
+/// Handles the MetaDataBackup table.
+class MetaDataBackup : public SQLiteBase
+{
+	public:
+		MetaDataBackup(const std::string &database);
+		virtual ~MetaDataBackup();
+
+		/// Creates the MetaDataBackup table in the database.
+		static bool create(const std::string &database);
+
+		/// Adds an item.
+		bool addItem(const DocumentInfo &docInfo, DocumentInfo::SerialExtent extent);
+
+		/// Gets an item.
+		bool getItem(DocumentInfo &docInfo, DocumentInfo::SerialExtent extent);
+
+		/// Deletes an item.
+		bool deleteItem(const DocumentInfo &docInfo, DocumentInfo::SerialExtent extent,
+			const std::string &value = "");
+
+		/// Deletes a label.
+		bool deleteLabel(const std::string &value);
+
+        protected:
+		bool setAttribute(const std::string &url,
+			const std::string &name, const std::string &value,
+			bool noXAttr = false);
+
+		bool getAttribute(const std::string &url,
+			const std::string &name, std::string &value,
+			bool noXAttr = false);
+
+		bool getAttributes(const std::string &url,
+			const std::string &name, std::set<std::string> &values);
+
+		bool removeAttribute(const std::string &url,
+			const std::string &name,
+			bool noXAttr = false, bool likeName = false);
+
+        private:
+		MetaDataBackup(const MetaDataBackup &other);
+		MetaDataBackup &operator=(const MetaDataBackup &other);
+
+};
+
+#endif // _META_DATA_BACKUP_H

Modified: trunk/configure.in
===================================================================
--- trunk/configure.in	2008-10-27 07:13:45 UTC (rev 1394)
+++ trunk/configure.in	2008-11-01 14:52:37 UTC (rev 1395)
@@ -225,7 +225,14 @@
    exit 1
 fi
 
+dnl xattrs
+AM_CONDITIONAL(HAVE_ATTR_XATTR, false)
+AC_CHECK_HEADERS([attr/xattr.h],
+   [AM_CONDITIONAL(HAVE_ATTR_XATTR, true)
+   ])
+
 dnl inotify
+AM_CONDITIONAL(HAVE_LINUX_INOTIFY, false)
 AC_CHECK_HEADERS([sys/inotify.h],
    [AM_CONDITIONAL(HAVE_LINUX_INOTIFY, true)
    ])



From fabricecolin at mail.berlios.de  Sun Nov  2 07:12:22 2008
From: fabricecolin at mail.berlios.de (fabricecolin at mail.berlios.de)
Date: Sun, 2 Nov 2008 07:12:22 +0100
Subject: [Pinot-svn] r1396 - trunk/Utils
Message-ID: <200811020612.mA26CMpl029747@sheep.berlios.de>

Author: fabricecolin
Date: 2008-11-02 07:11:49 +0100 (Sun, 02 Nov 2008)
New Revision: 1396

Modified:
   trunk/Utils/Document.cpp
Log:
In setDataFromFile(), look for extended attributes. At the moment, only the
attribute user.mime_type is supported.


Modified: trunk/Utils/Document.cpp
===================================================================
--- trunk/Utils/Document.cpp	2008-11-01 14:52:37 UTC (rev 1395)
+++ trunk/Utils/Document.cpp	2008-11-02 06:11:49 UTC (rev 1396)
@@ -1,5 +1,5 @@
 /*
- *  Copyright 2005,2006 Fabrice Colin
+ *  Copyright 2005-2008 Fabrice Colin
  *
  *  This program is free software; you can redistribute it and/or modify
  *  it under the terms of the GNU General Public License as published by
@@ -16,12 +16,16 @@
  *  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
  */
 
+#include "config.h"
 #include <stdlib.h>
 #include <string.h>
 #include <ctype.h>
 #include <sys/types.h>
 #include <sys/stat.h>
 #include <sys/mman.h>
+#ifdef HAVE_ATTR_XATTR
+#include <attr/xattr.h>
+#endif
 #include <unistd.h>
 #include <fcntl.h>
 #include <errno.h>
@@ -35,6 +39,26 @@
 using std::endl;
 using std::string;
 
+#ifdef HAVE_ATTR_XATTR
+static char *getXAttr(int fd, const string &attrName)
+{
+	ssize_t attrSize = fgetxattr(fd, attrName.c_str(), NULL, 0);
+
+	if (attrSize > 0)
+	{
+		char *pAttr = new char[attrSize];
+
+		if ((pAttr != NULL) &&
+			(fgetxattr(fd, attrName.c_str(), pAttr, attrSize) > 0))
+		{
+			return pAttr;
+		}
+	}
+
+	return NULL;
+}
+#endif
+
 Document::Document() :
 	DocumentInfo(),
 	m_pData(NULL),
@@ -197,6 +221,66 @@
 		cerr << "Document::setDataFromFile: mapping failed" << endl;
 	}
 
+#ifdef HAVE_ATTR_XATTR
+	// Any extended attributes ?
+	ssize_t listSize = flistxattr(fd, NULL, 0);
+	if (listSize > 0)
+	{
+		char *pList = new char[listSize];
+
+		if (flistxattr(fd, pList, listSize) > 0)
+		{
+			set<string> labels;
+			string attrList(pList, listSize);
+			string::size_type startPos = 0, endPos = attrList.find('\0');
+
+			while (endPos != string::npos)
+			{
+				string attrName(attrList.substr(startPos, endPos - startPos));
+				char *pAttr = NULL;
+
+				// FIXME: support common attributes defined at
+				// http://www.freedesktop.org/wiki/CommonExtendedAttributes
+				if (attrName == "user.mime_type")
+				{
+					pAttr = getXAttr(fd, attrName);
+					if (pAttr != NULL)
+					{
+						// Set the MIME type
+						setType(pAttr);
+					}
+				}
+
+				if (pAttr != NULL)
+				{
+#ifdef DEBUG
+					cout << "Document::setDataFromFile: xattr " << attrName << "=" << pAttr << endl;
+#endif
+					delete[] pAttr;
+				}
+
+				// Next
+				startPos = endPos + 1;
+				if (startPos < listSize)
+				{
+					endPos = attrList.find('\0', startPos);
+				}
+				else
+				{
+					endPos = string::npos;
+				}
+			}
+
+			if (labels.empty() == false)
+			{
+				setLabels(labels);
+			}
+		}
+
+		delete[] pList;
+	}
+#endif
+
 	// Close the file
 	if (close(fd) == -1)
 	{



From fabricecolin at mail.berlios.de  Sun Nov  2 07:16:49 2008
From: fabricecolin at mail.berlios.de (fabricecolin at mail.berlios.de)
Date: Sun, 2 Nov 2008 07:16:49 +0100
Subject: [Pinot-svn] r1397 - trunk/Collect
Message-ID: <200811020616.mA26GnCs001093@sheep.berlios.de>

Author: fabricecolin
Date: 2008-11-02 07:16:41 +0100 (Sun, 02 Nov 2008)
New Revision: 1397

Modified:
   trunk/Collect/FileCollector.cpp
   trunk/Collect/FileCollector.h
Log:
Test the document's MIME type after loading.


Modified: trunk/Collect/FileCollector.cpp
===================================================================
--- trunk/Collect/FileCollector.cpp	2008-11-02 06:11:49 UTC (rev 1396)
+++ trunk/Collect/FileCollector.cpp	2008-11-02 06:16:41 UTC (rev 1397)
@@ -1,5 +1,5 @@
 /*
- *  Copyright 2005,2006 Fabrice Colin
+ *  Copyright 2005-2008 Fabrice Colin
  *
  *  This program is free software; you can redistribute it and/or modify
  *  it under the terms of the GNU General Public License as published by
@@ -56,16 +56,16 @@
 
 	Document *pDocument = new Document(docInfo);
 
+	if (pDocument->setDataFromFile(fileLocation) == false)
+	{
+		delete pDocument;
+		return NULL;
+	}
 	if (pDocument->getType().empty() == true)
 	{
 		// Determine the file type
 		pDocument->setType(MIMEScanner::scanFile(fileLocation));
 	}
-	if (pDocument->setDataFromFile(fileLocation) == false)
-	{
-		delete pDocument;
-		return NULL;
-	}
 
 	return pDocument;
 }

Modified: trunk/Collect/FileCollector.h
===================================================================
--- trunk/Collect/FileCollector.h	2008-11-02 06:11:49 UTC (rev 1396)
+++ trunk/Collect/FileCollector.h	2008-11-02 06:16:41 UTC (rev 1397)
@@ -1,5 +1,5 @@
 /*
- *  Copyright 2005,2006 Fabrice Colin
+ *  Copyright 2005-2008 Fabrice Colin
  *
  *  This program is free software; you can redistribute it and/or modify
  *  it under the terms of the GNU General Public License as published by



From fabricecolin at mail.berlios.de  Sun Nov  2 09:35:45 2008
From: fabricecolin at mail.berlios.de (fabricecolin at mail.berlios.de)
Date: Sun, 2 Nov 2008 09:35:45 +0100
Subject: [Pinot-svn] r1398 - trunk/SQL
Message-ID: <200811020835.mA28ZjID009493@sheep.berlios.de>

Author: fabricecolin
Date: 2008-11-02 09:35:29 +0100 (Sun, 02 Nov 2008)
New Revision: 1398

Modified:
   trunk/SQL/CrawlHistory.cpp
   trunk/SQL/CrawlHistory.h
Log:
Method getSourceItems() now takes a min/max range.


Modified: trunk/SQL/CrawlHistory.cpp
===================================================================
--- trunk/SQL/CrawlHistory.cpp	2008-11-02 06:16:41 UTC (rev 1397)
+++ trunk/SQL/CrawlHistory.cpp	2008-11-02 08:35:29 UTC (rev 1398)
@@ -412,7 +412,8 @@
 
 /// Returns items that belong to a source.
 unsigned int CrawlHistory::getSourceItems(unsigned int sourceId, CrawlStatus status,
-	set<string> &urls, time_t minDate)
+	set<string> &urls, unsigned int min, unsigned int max,
+	time_t minDate)
 {
 	SQLResults *results = NULL;
 	unsigned int count = 0;
@@ -420,15 +421,15 @@
 	if (minDate > 0)
 	{
 		results = executeStatement("SELECT Url FROM CrawlHistory \
-			WHERE SourceId='%u' AND Status='%q' AND Date>'%d';",
-			sourceId, statusToText(status).c_str(), minDate);
+			WHERE SourceId='%u' AND Status='%q' AND Date>'%d' LIMIT %u OFFSET %u;",
+			sourceId, statusToText(status).c_str(), minDate, max - min, min);
 	}
 	else
 	{
 		// Ignore the date
 		results = executeStatement("SELECT Url FROM CrawlHistory \
-			WHERE SourceId='%u' AND Status='%q';",
-			sourceId, statusToText(status).c_str());
+			WHERE SourceId='%u' AND Status='%q' LIMIT %u OFFSET %u;",
+			sourceId, statusToText(status).c_str(), max - min, min);
 	}
 
 	if (results != NULL)

Modified: trunk/SQL/CrawlHistory.h
===================================================================
--- trunk/SQL/CrawlHistory.h	2008-11-02 06:16:41 UTC (rev 1397)
+++ trunk/SQL/CrawlHistory.h	2008-11-02 08:35:29 UTC (rev 1398)
@@ -75,7 +75,9 @@
 
 		/// Returns items that belong to a source.
 		unsigned int getSourceItems(unsigned int sourceId, CrawlStatus status,
-			std::set<std::string> &urls, time_t minDate = 0);
+			std::set<std::string> &urls,
+			unsigned int min, unsigned int max,
+			time_t minDate = 0);
 
 		/// Returns the number of URLs.
 		unsigned int getItemsCount(CrawlStatus status);



From fabricecolin at mail.berlios.de  Sun Nov  2 09:42:47 2008
From: fabricecolin at mail.berlios.de (fabricecolin at mail.berlios.de)
Date: Sun, 2 Nov 2008 09:42:47 +0100
Subject: [Pinot-svn] r1399 - in trunk: SQL Utils
Message-ID: <200811020842.mA28gltI009970@sheep.berlios.de>

Author: fabricecolin
Date: 2008-11-02 09:42:24 +0100 (Sun, 02 Nov 2008)
New Revision: 1399

Modified:
   trunk/SQL/MetaDataBackup.cpp
   trunk/SQL/MetaDataBackup.h
   trunk/Utils/Document.cpp
Log:
Fixed xattr.h check. Added MetaDataBackup::getItems().


Modified: trunk/SQL/MetaDataBackup.cpp
===================================================================
--- trunk/SQL/MetaDataBackup.cpp	2008-11-02 08:35:29 UTC (rev 1398)
+++ trunk/SQL/MetaDataBackup.cpp	2008-11-02 08:42:24 UTC (rev 1399)
@@ -19,15 +19,17 @@
 #include "config.h"
 #include <stdio.h>
 #include <stdlib.h>
+#include <string.h>
 #include <unistd.h>
 #include <errno.h>
 #include <sys/types.h>
 #include <sys/stat.h>
-#ifdef HAVE_ATTR_XATTR
+#ifdef HAVE_ATTR_XATTR_H
 #include <attr/xattr.h>
 #endif
 #include <set>
 #include <iostream>
+#include <sstream>
 
 #include "Url.h"
 #include "StringManip.h"
@@ -51,7 +53,7 @@
 bool MetaDataBackup::setAttribute(const string &url,
 	const string &name, const string &value, bool noXAttr)
 {
-#ifdef HAVE_ATTR_XATTR
+#ifdef HAVE_ATTR_XATTR_H
 	Url urlObj(url);
 
 	// If the file is local and isn't a nested document, use an extended attribute
@@ -62,16 +64,14 @@
 		string fileName(url.substr(urlObj.getProtocol().length() + 3));
 		string attrName("pinot." + name);
 
+		// Set an attribute, and add an entry in the table
 		if (setxattr(fileName.c_str(), attrName.c_str(),
-			value.c_str(), (size_t)value.length(), 0) == 0)
+			value.c_str(), (size_t)value.length(), 0) != 0)
 		{
-			return true;
+#ifdef DEBUG
+			cout << "MetaDataBackup::setAttribute: setxattr failed with " << strerror(errno) << endl;
+#endif
 		}
-		else if (errno != ENOTSUP)
-		{
-			// Extended attributes are supported, but some error occured 
-			return false;
-		}
 	}
 #endif
 	bool update = false, success = false;
@@ -121,7 +121,7 @@
 	const string &name, string &value, bool noXAttr)
 {
 	bool success = false;
-#ifdef HAVE_ATTR_XATTR
+#ifdef HAVE_ATTR_XATTR_H
 	Url urlObj(url);
 
 	// If the file is local and isn't a nested document, use an extended attribute
@@ -261,7 +261,7 @@
 {
 	bool success = false;
 
-#ifdef HAVE_ATTR_XATTR
+#ifdef HAVE_ATTR_XATTR_H
 	Url urlObj(url);
 
 	// If the file is local and isn't a nested document, use an extended attribute
@@ -273,7 +273,7 @@
 		string fileName(url.substr(urlObj.getProtocol().length() + 3));
 		string attrName("pinot." + name);
 
-		if (removeattr(fileName.c_str(), attrName.c_str()) > 0)
+		if (removexattr(fileName.c_str(), attrName.c_str()) > 0)
 		{
 			return true;
 		}
@@ -427,6 +427,48 @@
 	return success;
 }
 
+/// Gets items.
+bool MetaDataBackup::getItems(const string &protocol, set<string> &urls,
+	unsigned long min, unsigned long max)
+{
+	SQLResults *results = NULL;
+	bool success = false;
+
+	// Even when attributes are used, an entry is always added to the table
+	if (protocol.empty() == true)
+	{
+		results = executeStatement("SELECT Url FROM MetaDataBackup \
+			LIMIT %u OFFSET %u;",
+			max - min, min);
+	}
+	else
+	{
+		results = executeStatement("SELECT Url FROM MetaDataBackup \
+			WHERE Url LIKE '%q%' LIMIT %u OFFSET %u;",
+			protocol.c_str(), max - min, min);
+	}
+	if (results != NULL)
+	{
+		while (results->hasMoreRows() == true)
+                {
+			SQLRow *row = results->nextRow();
+			if (row == NULL)
+			{
+				continue;
+			}
+
+			urls.insert(row->getColumn(0));
+			success = true;
+
+			delete row;
+		}
+
+		delete results;
+	}
+
+	return success;
+}
+
 /// Deletes an item.
 bool MetaDataBackup::deleteItem(const DocumentInfo &docInfo, DocumentInfo::SerialExtent extent,
 	const string &value)

Modified: trunk/SQL/MetaDataBackup.h
===================================================================
--- trunk/SQL/MetaDataBackup.h	2008-11-02 08:35:29 UTC (rev 1398)
+++ trunk/SQL/MetaDataBackup.h	2008-11-02 08:42:24 UTC (rev 1399)
@@ -42,6 +42,11 @@
 		/// Gets an item.
 		bool getItem(DocumentInfo &docInfo, DocumentInfo::SerialExtent extent);
 
+		/// Gets items.
+		bool getItems(const std::string &protocol,
+			std::set<std::string> &urls,
+			unsigned long min, unsigned long max);
+
 		/// Deletes an item.
 		bool deleteItem(const DocumentInfo &docInfo, DocumentInfo::SerialExtent extent,
 			const std::string &value = "");

Modified: trunk/Utils/Document.cpp
===================================================================
--- trunk/Utils/Document.cpp	2008-11-02 08:35:29 UTC (rev 1398)
+++ trunk/Utils/Document.cpp	2008-11-02 08:42:24 UTC (rev 1399)
@@ -23,13 +23,14 @@
 #include <sys/types.h>
 #include <sys/stat.h>
 #include <sys/mman.h>
-#ifdef HAVE_ATTR_XATTR
+#ifdef HAVE_ATTR_XATTR_H
 #include <attr/xattr.h>
 #endif
 #include <unistd.h>
 #include <fcntl.h>
 #include <errno.h>
 #include <iostream>
+#include <set>
 
 #include "Document.h"
 #include "TimeConverter.h"
@@ -38,8 +39,9 @@
 using std::cerr;
 using std::endl;
 using std::string;
+using std::set;
 
-#ifdef HAVE_ATTR_XATTR
+#ifdef HAVE_ATTR_XATTR_H
 static char *getXAttr(int fd, const string &attrName)
 {
 	ssize_t attrSize = fgetxattr(fd, attrName.c_str(), NULL, 0);
@@ -221,7 +223,7 @@
 		cerr << "Document::setDataFromFile: mapping failed" << endl;
 	}
 
-#ifdef HAVE_ATTR_XATTR
+#ifdef HAVE_ATTR_XATTR_H
 	// Any extended attributes ?
 	ssize_t listSize = flistxattr(fd, NULL, 0);
 	if (listSize > 0)



From fabricecolin at mail.berlios.de  Sun Nov  2 10:08:15 2008
From: fabricecolin at mail.berlios.de (fabricecolin at mail.berlios.de)
Date: Sun, 2 Nov 2008 10:08:15 +0100
Subject: [Pinot-svn] r1400 - trunk/UI/GTK2/src
Message-ID: <200811020908.mA298FNj011438@sheep.berlios.de>

Author: fabricecolin
Date: 2008-11-02 10:07:59 +0100 (Sun, 02 Nov 2008)
New Revision: 1400

Modified:
   trunk/UI/GTK2/src/DaemonState.cpp
   trunk/UI/GTK2/src/DaemonState.h
   trunk/UI/GTK2/src/ServerThreads.cpp
   trunk/UI/GTK2/src/ServerThreads.h
   trunk/UI/GTK2/src/pinot-dbus-daemon.cc
   trunk/UI/GTK2/src/statisticsDialog.cc
Log:
Whenever metadata is updated through the DBus interface, the daemon updates the
MetaDataBackup table. When reindexing occurs, the crawler re-applies all the
metadata found there.
Synced with recent changes to CrawlHistory.


Modified: trunk/UI/GTK2/src/DaemonState.cpp
===================================================================
--- trunk/UI/GTK2/src/DaemonState.cpp	2008-11-02 08:42:24 UTC (rev 1399)
+++ trunk/UI/GTK2/src/DaemonState.cpp	2008-11-02 09:07:59 UTC (rev 1400)
@@ -128,6 +128,7 @@
 DaemonState::DaemonState() :
 	ThreadsManager(PinotSettings::getInstance().m_daemonIndexLocation, 10),
 	m_fullScan(false),
+	m_isReindex(false),
 	m_reload(false),
 	m_pDiskMonitor(MonitorFactory::getMonitor()),
 	m_pDiskHandler(NULL),
@@ -259,13 +260,13 @@
 	{
 		// Monitoring is not necessary, but we still have to pass the handler
 		// so that we can act on documents that have been deleted
-		pScannerThread = new DirectoryScannerThread(locationToCrawl, isSource, m_fullScan,
-			NULL, m_pDiskHandler);
+		pScannerThread = new DirectoryScannerThread(locationToCrawl, isSource,
+			m_fullScan, m_isReindex, NULL, m_pDiskHandler);
 	}
 	else
 	{
-		pScannerThread = new DirectoryScannerThread(locationToCrawl, isSource, m_fullScan,
-			m_pDiskMonitor, m_pDiskHandler);
+		pScannerThread = new DirectoryScannerThread(locationToCrawl, isSource,
+			m_fullScan, m_isReindex, m_pDiskMonitor, m_pDiskHandler);
 	}
 	pScannerThread->getFileFoundSignal().connect(sigc::mem_fun(*this, &DaemonState::on_message_filefound));
 
@@ -280,7 +281,7 @@
 	return false;
 }
 
-void DaemonState::start(bool forceFullScan)
+void DaemonState::start(bool forceFullScan, bool isReindex)
 {
 	// Disable implicit flushing after a change
 	WorkerThread::immediateFlush(false);
@@ -305,6 +306,7 @@
 		cout << "DaemonState::start: picked " << randomNum << endl;
 #endif
 	}
+	m_isReindex = isReindex;
 
 	// Fire up the disk monitor thread
 	if (m_pDiskHandler == NULL)
@@ -530,7 +532,7 @@
 #endif
 
 		// ...and restart everything 
-		start(true);
+		start(true, false);
 	}
 #ifdef DEBUG
 	cout << "DaemonState::on_thread_end: reload status " << m_reload << endl;

Modified: trunk/UI/GTK2/src/DaemonState.h
===================================================================
--- trunk/UI/GTK2/src/DaemonState.h	2008-11-02 08:42:24 UTC (rev 1399)
+++ trunk/UI/GTK2/src/DaemonState.h	2008-11-02 09:07:59 UTC (rev 1400)
@@ -38,7 +38,7 @@
 
 		typedef enum { LOW_DISK_SPACE = 0, ON_BATTERY, CRAWLING, STOPPED, DISCONNECTED } StatusFlag;
 
-		void start(bool forceFullScan);
+		void start(bool forceFullScan, bool isReindex);
 
 		void reload(void);
 
@@ -60,6 +60,7 @@
 
 	protected:
 		bool m_fullScan;
+		bool m_isReindex;
 		bool m_reload;
 		fd_set m_flagsSet;
 		MonitorInterface *m_pDiskMonitor;

Modified: trunk/UI/GTK2/src/ServerThreads.cpp
===================================================================
--- trunk/UI/GTK2/src/ServerThreads.cpp	2008-11-02 08:42:24 UTC (rev 1399)
+++ trunk/UI/GTK2/src/ServerThreads.cpp	2008-11-02 09:07:59 UTC (rev 1400)
@@ -49,6 +49,33 @@
 using namespace Glib;
 using namespace std;
 
+static void updateLabels(unsigned int docId, MetaDataBackup &metaData,
+	IndexInterface *pIndex, set<string> &labels, gboolean resetLabels)
+{
+	DocumentInfo docInfo;
+
+	if (pIndex == NULL)
+	{
+		return;
+	}
+
+	// If it's a reset, remove labels from the metadata backup
+	if ((resetLabels == TRUE) &&
+		(pIndex->getDocumentInfo(docId, docInfo) == true))
+	{
+		metaData.deleteItem(docInfo, DocumentInfo::SERIAL_LABELS);
+	}
+
+	// Get the current labels 
+	if (resetLabels == TRUE)
+	{
+		labels.clear();
+		pIndex->getDocumentLabels(docId, labels);
+	}
+	docInfo.setLabels(labels);
+	metaData.addItem(docInfo, DocumentInfo::SERIAL_LABELS);
+}
+
 static DBusMessage *newDBusReply(DBusMessage *pMessage)
 {
         if (pMessage == NULL) 
@@ -107,11 +134,13 @@
 }
 
 DirectoryScannerThread::DirectoryScannerThread(const string &dirName, bool isSource,
-	bool fullScan, MonitorInterface *pMonitor, MonitorHandler *pHandler,
+	bool fullScan, bool isReindex,
+	MonitorInterface *pMonitor, MonitorHandler *pHandler,
 	unsigned int maxLevel, bool followSymLinks) :
 	IndexingThread(),
 	m_dirName(dirName),
 	m_fullScan(fullScan),
+	m_isReindex(isReindex),
 	m_pMonitor(pMonitor),
 	m_pHandler(pHandler),
 	m_sourceId(0),
@@ -493,8 +522,10 @@
 void DirectoryScannerThread::doWork(void)
 {
 	CrawlHistory crawlHistory(PinotSettings::getInstance().getHistoryDatabaseName());
-	set<string> deletedFiles;
+	MetaDataBackup metaData(PinotSettings::getInstance().getHistoryDatabaseName());
 	Timer scanTimer;
+	set<string> urls;
+	unsigned int currentOffset = 0;
 
 	if (m_dirName.empty() == true)
 	{
@@ -519,6 +550,7 @@
 		m_errorParam = m_dirName;
 	}
 	flushUpdates(crawlHistory);
+	cout << "Scanned " << m_dirName << " in " << scanTimer.stop() << " ms" << endl;
 
 	if (m_done == true)
 	{
@@ -530,27 +562,77 @@
 
 	if (m_fullScan == true)
 	{
+		scanTimer.start();
+
 		// All files left with status CRAWLING were not found in this crawl
 		// Chances are they were removed after the last full scan
-		if ((m_pHandler != NULL) &&
-			(crawlHistory.getSourceItems(m_sourceId, CrawlHistory::CRAWLING, deletedFiles) > 0))
+		while ((m_pHandler != NULL) &&
+			(crawlHistory.getSourceItems(m_sourceId, CrawlHistory::CRAWLING, urls,
+				currentOffset, currentOffset + 100) > 0))
 		{
-#ifdef DEBUG
-			cout << "DirectoryScannerThread::doWork: " << deletedFiles.size() << " files were deleted" << endl;
-#endif
-			for(set<string>::const_iterator fileIter = deletedFiles.begin();
-				fileIter != deletedFiles.end(); ++fileIter)
+			for (set<string>::const_iterator urlIter = urls.begin();
+				urlIter != urls.end(); ++urlIter)
 			{
 				// Inform the MonitorHandler
-				if (m_pHandler->fileDeleted(fileIter->substr(7)) == true)
+				if (m_pHandler->fileDeleted(urlIter->substr(7)) == true)
 				{
 					// Delete this item
-					crawlHistory.deleteItem(*fileIter);
+					crawlHistory.deleteItem(*urlIter);
+					metaData.deleteItem(DocumentInfo("", *urlIter, "", ""), DocumentInfo::SERIAL_ALL);
 				}
 			}
+
+			// Next
+			if (urls.size() < 100)
+			{
+				break;
+			}
+			currentOffset += 100;
 		}
+		cout << "Cleaned up " << currentOffset + urls.size()
+			<< " history entries in " << scanTimer.stop() << " ms" << endl;
 	}
-	cout << "Scanned " << m_dirName << " in " << scanTimer.stop() << " ms" << endl;
+
+	if (m_isReindex == true)
+	{
+		urls.clear();
+		currentOffset = 0;
+		scanTimer.start();
+
+		IndexInterface *pIndex = PinotSettings::getInstance().getIndex(PinotSettings::getInstance().m_daemonIndexLocation);
+		// Restore user-set metadata, if any
+		while ((pIndex != NULL) &&
+			(pIndex->isGood() == true) &&
+			(metaData.getItems("file://", urls,
+				currentOffset, currentOffset + 100) == true))
+		{
+			for (set<string>::const_iterator urlIter = urls.begin();
+				urlIter != urls.end(); ++urlIter)
+			{
+				unsigned int docId = pIndex->hasDocument(*urlIter);
+
+				if (docId > 0)
+				{
+					DocumentInfo docInfo("", *urlIter, "", "");
+
+					if (metaData.getItem(docInfo, DocumentInfo::SERIAL_ALL) == true)
+					{
+						pIndex->updateDocumentInfo(docId, docInfo);
+						pIndex->setDocumentLabels(docId, docInfo.getLabels(), true);
+					}
+				}
+			}
+
+			// Next
+			if (urls.size() < 100)
+			{
+				break;
+			}
+			currentOffset += 100;
+		}
+		cout << "Restored user-set metadata for " << currentOffset + urls.size()
+			<< " documents in " << scanTimer.stop() << " ms" << endl;
+	}
 }
 
 DBusServletThread::DBusServletThread(DaemonState *pServer, DBusConnection *pConnection, DBusMessage *pRequest) :
@@ -664,6 +746,7 @@
 {
 	PinotSettings &settings = PinotSettings::getInstance();
 	IndexInterface *pIndex = settings.getIndex(settings.m_daemonIndexLocation);
+	MetaDataBackup metaData(settings.getHistoryDatabaseName());
 	DBusError error;
 	bool processedMessage = true, updateLabelsCache = false, flushIndex = false;
 
@@ -876,6 +959,31 @@
 			}
 		}
 	}
+	else if (dbus_message_is_method_call(m_pRequest, "de.berlios.Pinot", "RenameLabel") == TRUE)
+	{
+		char *pOldLabel = NULL;
+		char *pNewLabel = NULL;
+
+		if (dbus_message_get_args(m_pRequest, &error,
+			DBUS_TYPE_STRING, &pOldLabel,
+			DBUS_TYPE_STRING, &pNewLabel,
+			DBUS_TYPE_INVALID) == TRUE)
+		{
+			// Nothing to do, this was obsoleted
+#ifdef DEBUG
+			cout << "DBusServletThread::doWork: received RenameLabel " << pOldLabel << ", " << pNewLabel << endl;
+#endif
+			
+			// Prepare the reply
+			m_pReply = newDBusReply(m_pRequest);
+			if (m_pReply != NULL)
+			{
+				dbus_message_append_args(m_pReply,
+					DBUS_TYPE_STRING, &pNewLabel,
+					DBUS_TYPE_INVALID);
+			}
+		}
+	}
 	else if (dbus_message_is_method_call(m_pRequest, "de.berlios.Pinot", "DeleteLabel") == TRUE)
 	{
 		char *pLabel = NULL;
@@ -898,6 +1006,9 @@
 					labelsCache.erase(labelIter);
 					updateLabelsCache = true;
 				}
+
+				// Update the metadata backup
+				metaData.deleteLabel(pLabel);
 			}
 
 			// Prepare the reply
@@ -991,9 +1102,13 @@
 			cout << "DBusServletThread::doWork: received SetDocumentLabels on ID " << docId
 				<< ", " << labelsCount << " labels" << ", " << resetLabels << endl;
 #endif
+
 			// Set labels
 			flushIndex = pIndex->setDocumentLabels(docId, labels, ((resetLabels == TRUE) ? true : false));
 
+			// Update the metadata backup
+			updateLabels(docId, metaData, pIndex, labels, resetLabels);
+
 			// Free container types
 			g_strfreev(ppLabels);
 
@@ -1030,6 +1145,7 @@
 				{
 					break;
 				}
+
 				docIds.insert((unsigned int)atoi(ppDocIds[idIndex]));
 			}
 			for (dbus_uint32_t labelIndex = 0; labelIndex < labelsCount; ++labelIndex)
@@ -1060,6 +1176,13 @@
 				flushIndex = true;
 			}
 
+			// Update the metadata backup
+			for (set<unsigned int>::const_iterator docIter = docIds.begin();
+				docIter != docIds.end(); ++docIter)
+			{
+				updateLabels(*docIter, metaData, pIndex, labels, resetLabels);
+			}
+
 			// Free container types
 			g_strfreev(ppDocIds);
 			g_strfreev(ppLabels);
@@ -1135,6 +1258,9 @@
 			// Update the document info
 			flushIndex = pIndex->updateDocumentInfo(docId, docInfo);
 
+			// Update the metadata backup
+			metaData.addItem(docInfo, DocumentInfo::SERIAL_FIELDS);
+
 			// Prepare the reply
 			m_pReply = newDBusReply(m_pRequest);
 			if (m_pReply != NULL)

Modified: trunk/UI/GTK2/src/ServerThreads.h
===================================================================
--- trunk/UI/GTK2/src/ServerThreads.h	2008-11-02 08:42:24 UTC (rev 1399)
+++ trunk/UI/GTK2/src/ServerThreads.h	2008-11-02 09:07:59 UTC (rev 1400)
@@ -45,7 +45,8 @@
 {
 	public:
 		DirectoryScannerThread(const std::string &dirName, bool isSource,
-			bool fullScan, MonitorInterface *pMonitor, MonitorHandler *pHandler,
+			bool fullScan, bool isReindex,
+			MonitorInterface *pMonitor, MonitorHandler *pHandler,
 			unsigned int maxLevel = 0, bool followSymLinks = true);
 		virtual ~DirectoryScannerThread();
 
@@ -60,6 +61,7 @@
 	protected:
 		std::string m_dirName;
 		bool m_fullScan;
+		bool m_isReindex;
 		MonitorInterface *m_pMonitor;
 		MonitorHandler *m_pHandler;
 		unsigned int m_sourceId;

Modified: trunk/UI/GTK2/src/pinot-dbus-daemon.cc
===================================================================
--- trunk/UI/GTK2/src/pinot-dbus-daemon.cc	2008-11-02 08:42:24 UTC (rev 1399)
+++ trunk/UI/GTK2/src/pinot-dbus-daemon.cc	2008-11-02 09:07:59 UTC (rev 1400)
@@ -44,6 +44,7 @@
 #include "ModuleFactory.h"
 #include "ActionQueue.h"
 #include "CrawlHistory.h"
+#include "MetaDataBackup.h"
 #include "QueryHistory.h"
 #include "ViewHistory.h"
 #include "DownloaderInterface.h"
@@ -486,6 +487,7 @@
 	if ((historyDatabase.empty() == true) ||
 		(ActionQueue::create(historyDatabase) == false) ||
 		(CrawlHistory::create(historyDatabase) == false) ||
+		(MetaDataBackup::create(historyDatabase) == false) ||
 		(QueryHistory::create(historyDatabase) == false) ||
 		(ViewHistory::create(historyDatabase) == false))
 	{
@@ -687,7 +689,7 @@
 				cout << "System is on battery" << endl;
 			}
 
-			server.start(fullScan);
+			server.start(fullScan, reindex);
 
 			// Run the main loop
 			g_refMainLoop->run();

Modified: trunk/UI/GTK2/src/statisticsDialog.cc
===================================================================
--- trunk/UI/GTK2/src/statisticsDialog.cc	2008-11-02 08:42:24 UTC (rev 1399)
+++ trunk/UI/GTK2/src/statisticsDialog.cc	2008-11-02 09:07:59 UTC (rev 1400)
@@ -354,6 +354,7 @@
 		unsigned int sourceNum(sourceIter->first);
 		set<string> errors;
 		time_t latestErrorDate = 0;
+		unsigned int currentOffset = 0;
 
 		std::map<unsigned int, time_t>::const_iterator dateIter = m_latestErrorDates.find(sourceNum);
 		if (dateIter != m_latestErrorDates.end())
@@ -363,8 +364,9 @@
 
 		// Did any error occur on this source ?
 		unsigned int errorCount = crawlHistory.getSourceItems(sourceNum,
-			CrawlHistory::ERROR, errors, latestErrorDate);
-		if ((errorCount > 0) &&
+			CrawlHistory::ERROR, errors, currentOffset, currentOffset + 100,
+			latestErrorDate);
+		while ((errorCount > 0) &&
 			(errors.empty() == false))
 		{
 			// Add an errors row
@@ -417,6 +419,16 @@
 			// Expand errors
 			TreeModel::Path errPath = m_refStore->get_path(m_errorsTopIter);
 			statisticsTreeview->expand_to_path(errPath);
+
+			// Next
+			if (errors.size() < 100)
+			{
+				break;
+			}
+			currentOffset += 100;
+			errorCount = crawlHistory.getSourceItems(sourceNum,
+				CrawlHistory::ERROR, errors, currentOffset, currentOffset + 100,
+				latestErrorDate);
 		}
 
 		// The next check will ignore errors older than this



From fabricecolin at mail.berlios.de  Sun Nov  2 10:11:10 2008
From: fabricecolin at mail.berlios.de (fabricecolin at mail.berlios.de)
Date: Sun, 2 Nov 2008 10:11:10 +0100
Subject: [Pinot-svn] r1401 - trunk/Tokenize
Message-ID: <200811020911.mA29BAax011723@sheep.berlios.de>

Author: fabricecolin
Date: 2008-11-02 10:11:04 +0100 (Sun, 02 Nov 2008)
New Revision: 1401

Removed:
   trunk/Tokenize/Tokenizer.h
Log:
This was obsoleted a long time ago.


Deleted: trunk/Tokenize/Tokenizer.h
===================================================================
--- trunk/Tokenize/Tokenizer.h	2008-11-02 09:07:59 UTC (rev 1400)
+++ trunk/Tokenize/Tokenizer.h	2008-11-02 09:11:04 UTC (rev 1401)
@@ -1,59 +0,0 @@
-/*
- *  Copyright 2005-2008 Fabrice Colin
- *
- *  This program is free software; you can redistribute it and/or modify
- *  it under the terms of the GNU General Public License as published by
- *  the Free Software Foundation; either version 2 of the License, or
- *  (at your option) any later version.
- *
- *  This program is distributed in the hope that it will be useful,
- *  but WITHOUT ANY WARRANTY; without even the implied warranty of
- *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- *  GNU General Public License for more details.
- *
- *  You should have received a copy of the GNU General Public License
- *  along with this program; if not, write to the Free Software
- *  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
- */
-
-#ifndef _TOKENIZER_H
-#define _TOKENIZER_H
-
-#include <string>
-
-#include "Document.h"
-#include "Visibility.h"
-
-/** Basic text-only tokenizer.
-  * Its role it to split documents into individual tokens or terms.
-  */
-class PINOT_EXPORT Tokenizer
-{
-	public:
-		Tokenizer(const Document *pDocument,
-			bool splitOnSpaces = false);
-		virtual ~Tokenizer();
-
-		/// Returns a pointer to the document being tokenized.
-		virtual const Document *getDocument(void);
-
-		/// Returns the next token; false if all tokens consumed.
-		virtual bool nextToken(std::string &token);
-
-		/// Rewinds the tokenizer.
-		virtual void rewind(void);
-
-	protected:
-		const Document *m_pDocument;
-		bool m_splitOnSpaces;
-		unsigned int m_currentPos;
-
-		void setDocument(const Document *pDocument);
-
-	private:
-		Tokenizer(const Tokenizer &other);
-		Tokenizer& operator=(const Tokenizer& other);
-
-};
-
-#endif // _TOKENIZER_H



From fabricecolin at mail.berlios.de  Sat Nov  8 05:00:38 2008
From: fabricecolin at mail.berlios.de (fabricecolin at mail.berlios.de)
Date: Sat, 8 Nov 2008 05:00:38 +0100
Subject: [Pinot-svn] r1402 - in trunk: . IndexSearch IndexSearch/Xapian
Message-ID: <200811080400.mA840c9s003026@sheep.berlios.de>

Author: fabricecolin
Date: 2008-11-08 05:00:11 +0100 (Sat, 08 Nov 2008)
New Revision: 1402

Modified:
   trunk/AUTHORS
   trunk/IndexSearch/DBusIndex.cpp
   trunk/IndexSearch/Xapian/XapianEngine.cpp
   trunk/IndexSearch/pinot-search.cpp
Log:
Patches by C. Scott Ananian. Fix XapianEngine to get the results count estimate
even when there are no matches left. Serialize results score over D-Bus. Add a
"sort by date first" mode to pinot-search.


Modified: trunk/AUTHORS
===================================================================
--- trunk/AUTHORS	2008-11-02 09:11:04 UTC (rev 1401)
+++ trunk/AUTHORS	2008-11-08 04:00:11 UTC (rev 1402)
@@ -25,6 +25,7 @@
 	Michael Biebl <biebl at debian dot org>
 	Constantin Teodorescu <brailateo at gmail dot com>
 	Adrian Bunk <bunk at stusta dot de>
+	C. Scott Ananian <cscott at laptop dot org>
 
 The source in Utils/unac is from unac 1.7.0 (Copyright Loic Dachary
 <loic at senga dot org>).

Modified: trunk/IndexSearch/DBusIndex.cpp
===================================================================
--- trunk/IndexSearch/DBusIndex.cpp	2008-11-02 09:11:04 UTC (rev 1401)
+++ trunk/IndexSearch/DBusIndex.cpp	2008-11-08 04:00:11 UTC (rev 1402)
@@ -16,8 +16,8 @@
  *  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
  */
 
+#include <stdlib.h>
 #include <iostream>
-#include <cstdlib>
 
 #include "Languages.h"
 #include "DBusIndex.h"
@@ -30,7 +30,7 @@
 using std::map;
 using std::min;
 
-static const char *g_fieldNames[] = { "caption", "url", "type", "language", "modtime", "size", "extract", NULL };
+static const char *g_fieldNames[] = { "caption", "url", "type", "language", "modtime", "size", "extract", "score", NULL };
 
 static DBusGConnection *getBusConnection(void)
 {
@@ -192,6 +192,10 @@
 		{
 			docInfo.setExtract(pValue);
 		}
+		else if (fieldName == g_fieldNames[7])
+		{
+			docInfo.setScore((float)atof(pValue));
+		}
 	}
 	while (dbus_message_iter_next(&array_iter));
 
@@ -230,7 +234,7 @@
 	for (unsigned int fieldNum = 0; g_fieldNames[fieldNum] != NULL; ++fieldNum)
 	{
 		string value;
-		char sizeStr[64];
+		char numStr[64];
 
 		switch (fieldNum)
 		{
@@ -250,12 +254,16 @@
 				value = docInfo.getTimestamp();
 				break;
 			case 5:
-				snprintf(sizeStr, 64, "%u", docInfo.getSize());
-				value = sizeStr;
+				snprintf(numStr, 64, "%u", docInfo.getSize());
+				value = numStr;
 				break;
 			case 6:
 				value = docInfo.getExtract();
 				break;
+			case 7:
+				snprintf(numStr, 64, "%f", docInfo.getScore());
+				value = numStr;
+				break;
 			default:
 				break;
 		}

Modified: trunk/IndexSearch/Xapian/XapianEngine.cpp
===================================================================
--- trunk/IndexSearch/Xapian/XapianEngine.cpp	2008-11-02 09:11:04 UTC (rev 1401)
+++ trunk/IndexSearch/Xapian/XapianEngine.cpp	2008-11-08 04:00:11 UTC (rev 1402)
@@ -802,9 +802,9 @@
 
 		// Get the top results of the query
 		Xapian::MSet matches = enquire.get_mset(startDoc, maxResultsCount, (2 * maxResultsCount) + 1);
+		m_resultsCountEstimate = matches.get_matches_estimated();
 		if (matches.empty() == false)
 		{
-			m_resultsCountEstimate = matches.get_matches_estimated();
 #ifdef DEBUG
 			cout << "XapianEngine::queryDatabase: found " << matches.size() << "/" << maxResultsCount
 				<< " results found from position " << startDoc << endl;

Modified: trunk/IndexSearch/pinot-search.cpp
===================================================================
--- trunk/IndexSearch/pinot-search.cpp	2008-11-02 09:11:04 UTC (rev 1401)
+++ trunk/IndexSearch/pinot-search.cpp	2008-11-08 04:00:11 UTC (rev 1402)
@@ -35,6 +35,7 @@
 using namespace std;
 
 static struct option g_longOptions[] = {
+	{"datefirst", 0, 0, 'd'},
 	{"help", 0, 0, 'h'},
 	{"max", 1, 0, 'm'},
 	{"proxyaddress", 1, 0, 'a'},
@@ -89,6 +90,7 @@
 	cout << "pinot-search - Query search engines from the command-line\n\n"
 		<< "Usage: pinot-search [OPTIONS] SEARCHENGINETYPE SEARCHENGINENAME|SEARCHENGINEOPTION QUERYINPUT\n\n"
 		<< "Options:\n"
+		<< "  -d, --datefirst           sort by date then by relevance\n"
 		<< "  -h, --help                display this help and exit\n"
 		<< "  -m, --max                 maximum number of results (default 10)\n"
 		<< "  -a, --proxyaddress        proxy address\n"
@@ -124,9 +126,10 @@
 	unsigned int maxResultsCount = 10; 
 	int longOptionIndex = 0;
 	bool printResults = true;
+	bool sortByDate = false;
 
 	// Look at the options
-	int optionChar = getopt_long(argc, argv, "c:hm:a:e:p:qs:t:uvx:", g_longOptions, &longOptionIndex);
+	int optionChar = getopt_long(argc, argv, "c:dhm:a:e:p:qs:t:uvx:", g_longOptions, &longOptionIndex);
 	while (optionChar != -1)
 	{
 		switch (optionChar)
@@ -137,6 +140,9 @@
 					proxyAddress = optarg;
 				}
 				break;
+			case 'd':
+				sortByDate = true;
+				break;
 			case 'e':
 				if (optarg != NULL)
 				{
@@ -201,7 +207,7 @@
 		}
 
 		// Next option
-		optionChar = getopt_long(argc, argv, "c:hm:a:e:p:qs:t:uvx:", g_longOptions, &longOptionIndex);
+		optionChar = getopt_long(argc, argv, "c:dhm:a:e:p:qs:t:uvx:", g_longOptions, &longOptionIndex);
 	}
 
 	if (argc == 1)
@@ -304,6 +310,10 @@
 	}
 	queryProps.setStemmingLanguage(stemLanguage);
 	queryProps.setMaximumResultsCount(maxResultsCount);
+	if (sortByDate == true)
+	{
+		queryProps.setSortOrder(QueryProperties::DATE);
+	}
 
 	pEngine->setDefaultOperator(SearchEngineInterface::DEFAULT_OP_AND);
 	if (pEngine->runQuery(queryProps) == true)



From fabricecolin at mail.berlios.de  Sun Nov  9 13:36:56 2008
From: fabricecolin at mail.berlios.de (fabricecolin at mail.berlios.de)
Date: Sun, 9 Nov 2008 13:36:56 +0100
Subject: [Pinot-svn] r1403 - trunk/scripts/python
Message-ID: <200811091236.mA9CauOU019856@sheep.berlios.de>

Author: fabricecolin
Date: 2008-11-09 13:36:47 +0100 (Sun, 09 Nov 2008)
New Revision: 1403

Modified:
   trunk/scripts/python/pinot-module.py
Log:
Support for deskbar v2.24 snippets.


Modified: trunk/scripts/python/pinot-module.py
===================================================================
--- trunk/scripts/python/pinot-module.py	2008-11-08 04:00:11 UTC (rev 1402)
+++ trunk/scripts/python/pinot-module.py	2008-11-09 12:36:47 UTC (rev 1403)
@@ -1,5 +1,5 @@
 #
-# Copyright 2005-2007 Fabrice Colin
+# Copyright 2005-2008 Fabrice Colin
 #
 # This program is free software; you can redistribute it and/or modify
 # it under the terms of the GNU General Public License as published by
@@ -62,11 +62,10 @@
 				tmp = re.sub(r"<.*?>", "", snippet)
 				tmp = re.sub(r"</.*?>", "", tmp)
 				print 'Extract ', tmp
-				self.result["snippet"] = "\n%s" % cgi.escape(tmp)
+				self.set_snippet("\n%s" % cgi.escape(tmp))
         
 		if url_scheme == "file":
 			print 'File hit'
-			#self.add_action(OpenFileAction(self.result["caption"] + self.result["snippet"], self.result["url"]))
 			self.add_action(OpenFileAction(self.result["caption"], self.result["url"]))
 		else:
 			print 'Other hit'



From fabricecolin at mail.berlios.de  Sun Nov  9 13:53:03 2008
From: fabricecolin at mail.berlios.de (fabricecolin at mail.berlios.de)
Date: Sun, 9 Nov 2008 13:53:03 +0100
Subject: [Pinot-svn] r1404 - trunk/UI/GTK2/src
Message-ID: <200811091253.mA9Cr3xY021048@sheep.berlios.de>

Author: fabricecolin
Date: 2008-11-09 13:52:37 +0100 (Sun, 09 Nov 2008)
New Revision: 1404

Modified:
   trunk/UI/GTK2/src/DaemonState.cpp
   trunk/UI/GTK2/src/DaemonState.h
   trunk/UI/GTK2/src/ServerThreads.cpp
   trunk/UI/GTK2/src/ServerThreads.h
   trunk/UI/GTK2/src/pinot-dbus-daemon.cc
   trunk/UI/GTK2/src/pinot-dbus-daemon.xml
Log:
DBusServletInfo encapsulates information required to reply to D-Bus requests,
and allows running another thread, for instance an EngineQueryThread to reply
to queries.
The D-Bus interface now includes a Query method similar to C. Scott Ananian's
JournalQuery. This will eventually replace SimpleQuery.


Modified: trunk/UI/GTK2/src/DaemonState.cpp
===================================================================
--- trunk/UI/GTK2/src/DaemonState.cpp	2008-11-09 12:36:47 UTC (rev 1403)
+++ trunk/UI/GTK2/src/DaemonState.cpp	2008-11-09 12:52:37 UTC (rev 1404)
@@ -60,6 +60,7 @@
 #include "Url.h"
 #include "MonitorFactory.h"
 #include "CrawlHistory.h"
+#include "DBusIndex.h"
 #include "DaemonState.h"
 #include "OnDiskHandler.h"
 #include "PinotSettings.h"
@@ -125,6 +126,183 @@
 	}
 };
 
+DBusServletInfo::DBusServletInfo(DBusConnection *pConnection, DBusMessage *pRequest) :
+	m_pConnection(pConnection),
+	m_pRequest(pRequest),
+	m_pReply(NULL),
+	m_pArray(NULL),
+	m_queryName(""),
+	m_simpleQuery(true),
+	m_pThread(NULL),
+	m_replied(false)
+{
+}
+
+DBusServletInfo::~DBusServletInfo()
+{
+	if (m_pReply != NULL)
+	{
+		dbus_message_unref(m_pReply);
+	}
+	if (m_pRequest != NULL)
+	{
+		dbus_message_unref(m_pRequest);
+	}
+	if (m_pConnection != NULL)
+	{
+		dbus_connection_unref(m_pConnection);
+	}
+	if (m_pArray != NULL)
+	{
+		// Free the array
+		g_ptr_array_free(m_pArray, TRUE);
+	}
+}
+
+bool DBusServletInfo::newReply(void)
+{
+        if (m_pRequest == NULL) 
+        {
+                return false;
+        }
+
+        m_pReply = dbus_message_new_method_return(m_pRequest);
+        if (m_pReply != NULL)
+        {
+                return true;
+        }
+
+        return false;
+}
+
+bool DBusServletInfo::newErrorReply(const string &name, const string &message)
+{
+        if (m_pRequest == NULL) 
+        {
+                return false;
+        }
+
+	if (m_pReply != NULL)
+	{
+		dbus_message_unref(m_pReply);
+		m_pReply = NULL;
+	}
+
+	m_pReply = dbus_message_new_error(m_pRequest,
+		name.c_str(), message.c_str());
+        if (m_pReply != NULL)
+        {
+                return true;
+        }
+
+        return false;
+}
+
+bool DBusServletInfo::newReplyWithArray(void)
+{
+	if (newReply() == true)
+	{
+		dbus_message_append_args(m_pReply,
+			DBUS_TYPE_ARRAY, DBUS_TYPE_STRING, &m_pArray->pdata, m_pArray->len,
+			DBUS_TYPE_INVALID);
+
+		return true;
+	}
+
+	return false;
+}
+
+bool DBusServletInfo::newQueryReply(const vector<DocumentInfo> &resultsList,
+	unsigned int resultsEstimate)
+{
+	DBusMessageIter iter, subIter;
+
+	if (m_simpleQuery == false)
+	{
+		// Create the reply
+		if (newReply() == false)
+		{
+			return false;
+		}
+
+		// ...and attach a container
+		dbus_message_iter_init_append(m_pReply, &iter);
+		dbus_message_iter_append_basic(&iter, DBUS_TYPE_UINT32,
+			&resultsEstimate);
+		dbus_message_iter_open_container(&iter, DBUS_TYPE_ARRAY,
+			 DBUS_TYPE_ARRAY_AS_STRING \
+			 DBUS_STRUCT_BEGIN_CHAR_AS_STRING \
+			 DBUS_TYPE_STRING_AS_STRING \
+			 DBUS_TYPE_STRING_AS_STRING \
+			 DBUS_STRUCT_END_CHAR_AS_STRING, &subIter);
+	}
+	else
+	{
+		// Create an array
+		// FIXME: use a container for this too
+		m_pArray = g_ptr_array_new();
+	}
+
+	for (vector<DocumentInfo>::const_iterator resultIter = resultsList.begin();
+		resultIter != resultsList.end(); ++resultIter)
+	{
+		unsigned int indexId = 0;
+		unsigned int docId = resultIter->getIsIndexed(indexId);
+
+#ifdef DEBUG
+		cout << "DBusServletInfo::newQueryReply: adding result " << docId << endl;
+#endif
+		if (m_simpleQuery == false)
+		{
+			// The document ID isn't needed here
+			if (DBusIndex::documentInfoToDBus(&subIter, 0, *resultIter) == false)
+			{
+				newErrorReply("de.berlios.Pinot.Query", "Unknown error");
+				return false;
+			}
+		}
+		else if (docId > 0)
+		{
+			char docIdStr[64];
+
+			// We only need the document ID
+			snprintf(docIdStr, 64, "%u", docId);
+			g_ptr_array_add(m_pArray, const_cast<char*>(docIdStr));
+		}
+	}
+
+	if (m_simpleQuery == false)
+	{
+		// Close the container
+		dbus_message_iter_close_container(&iter, &subIter);
+		return true;
+	}
+
+	// Attach the array to the reply
+	return newReplyWithArray();
+}
+
+bool DBusServletInfo::reply(void)
+{
+	// Send a reply ?
+	if ((m_pConnection != NULL) &&
+		(m_pReply != NULL) &&
+		(m_replied == false))
+	{
+		m_replied = true;
+
+		dbus_connection_send(m_pConnection, m_pReply, NULL);
+		dbus_connection_flush(m_pConnection);
+#ifdef DEBUG
+		cout << "DBusServletInfo::reply: sent reply" << endl;
+#endif
+
+		return true;
+	}
+
+	return false;
+}
+
 DaemonState::DaemonState() :
 	ThreadsManager(PinotSettings::getInstance().m_daemonIndexLocation, 10),
 	m_fullScan(false),
@@ -334,6 +512,7 @@
 		// Update all items status so that we can get rid of files from deleted sources
 		crawlHistory.updateItemsStatus(CrawlHistory::CRAWLED, CrawlHistory::CRAWLING, 0, true);
 	}
+
 	// Initiate crawling
 	start_crawling();
 }
@@ -493,6 +672,27 @@
 			return;
 		}
 
+		// Send the reply ?
+		DBusServletInfo *pInfo = pDBusThread->getServletInfo();
+		if (pInfo != NULL)
+		{
+			if (pInfo->m_pThread != NULL)
+			{
+				m_queryServlets.insert(pInfo);
+
+#ifdef DEBUG
+				cout << "DaemonState::on_thread_end: running query " << pInfo->m_queryName << endl;
+#endif
+				start_thread(pInfo->m_pThread);
+			}
+			else
+			{
+				pInfo->reply();
+
+				delete pInfo;
+			}
+		}
+
 		if (pDBusThread->mustQuit() == true)
 		{
 			// Disconnect the timeout signal
@@ -504,7 +704,43 @@
 			m_signalQuit(0);
 		}
 	}
+	else if (type == "QueryingThread")
+	{
+		QueryingThread *pQueryThread = dynamic_cast<QueryingThread *>(pThread);
+		if (pQueryThread == NULL)
+		{
+			delete pThread;
+			return;
+		}
 
+		bool wasCorrected = false;
+		QueryProperties queryProps(pQueryThread->getQuery(wasCorrected));
+		const vector<DocumentInfo> &resultsList = pQueryThread->getDocuments();
+
+		// Find the servlet info
+		for (set<DBusServletInfo *>::const_iterator servIter = m_queryServlets.begin();
+			servIter != m_queryServlets.end(); ++servIter)
+		{
+			DBusServletInfo *pInfo = const_cast<DBusServletInfo *>(*servIter);
+
+			if ((pInfo != NULL) &&
+				(pInfo->m_queryName == queryProps.getName()))
+			{
+#ifdef DEBUG
+				cout << "DaemonState::on_thread_end: ran query " << pInfo->m_queryName << endl;
+#endif
+				// Prepare and send the reply
+				pInfo->newQueryReply(resultsList, pQueryThread->getDocumentsCount());
+				pInfo->reply();
+
+				m_queryServlets.erase(servIter);
+				delete pInfo;
+
+				break;
+			}
+		}
+	}
+
 	// Delete the thread
 	delete pThread;
 

Modified: trunk/UI/GTK2/src/DaemonState.h
===================================================================
--- trunk/UI/GTK2/src/DaemonState.h	2008-11-09 12:36:47 UTC (rev 1403)
+++ trunk/UI/GTK2/src/DaemonState.h	2008-11-09 12:52:37 UTC (rev 1404)
@@ -23,6 +23,15 @@
 #include <string>
 #include <queue>
 #include <set>
+extern "C"
+{
+#if DBUS_VERSION < 1000000
+#define DBUS_API_SUBJECT_TO_CHANGE
+#endif
+#include <dbus/dbus.h>
+#include <dbus/dbus-glib.h>
+#include <dbus/dbus-glib-lowlevel.h>
+}
 #include <sigc++/sigc++.h>
 
 #include "MonitorInterface.h"
@@ -30,6 +39,36 @@
 #include "PinotSettings.h"
 #include "WorkerThreads.h"
 
+class DBusServletInfo
+{
+	public:
+		DBusServletInfo(DBusConnection *pConnection, DBusMessage *pRequest);
+		~DBusServletInfo();
+
+		bool newReply(void);
+
+		bool newErrorReply(const std::string &name, const std::string &message);
+
+		bool newReplyWithArray(void);
+
+		bool newQueryReply(const vector<DocumentInfo> &resultsList,
+			unsigned int resultsEstimate);
+
+		bool reply(void);
+
+		DBusConnection *m_pConnection;
+		DBusMessage *m_pRequest;
+		DBusMessage *m_pReply;
+		GPtrArray *m_pArray;
+		std::string m_queryName;
+		bool m_simpleQuery;
+		WorkerThread *m_pThread;
+
+	protected:
+		bool m_replied;
+
+};
+
 class DaemonState : public ThreadsManager
 {
 	public:
@@ -69,6 +108,7 @@
 		sigc::signal1<void, int> m_signalQuit;
 		unsigned int m_crawlers;
 		std::queue<PinotSettings::IndexableLocation> m_crawlQueue;
+		std::set<DBusServletInfo *> m_queryServlets;
 
 		bool on_activity_timeout(void);
 

Modified: trunk/UI/GTK2/src/ServerThreads.cpp
===================================================================
--- trunk/UI/GTK2/src/ServerThreads.cpp	2008-11-09 12:36:47 UTC (rev 1403)
+++ trunk/UI/GTK2/src/ServerThreads.cpp	2008-11-09 12:52:37 UTC (rev 1404)
@@ -76,22 +76,6 @@
 	metaData.addItem(docInfo, DocumentInfo::SERIAL_LABELS);
 }
 
-static DBusMessage *newDBusReply(DBusMessage *pMessage)
-{
-        if (pMessage == NULL) 
-        {
-                return NULL;
-        }
-
-        DBusMessage *pReply = dbus_message_new_method_return(pMessage);
-        if (pReply != NULL)
-        {
-                return pReply;
-        }
-
-        return NULL;
-}
-
 static ustring g_xmlDescription;
 
 static bool loadXMLDescription(void)
@@ -635,32 +619,16 @@
 	}
 }
 
-DBusServletThread::DBusServletThread(DaemonState *pServer, DBusConnection *pConnection, DBusMessage *pRequest) :
+DBusServletThread::DBusServletThread(DaemonState *pServer, DBusServletInfo *pInfo) :
 	WorkerThread(),
 	m_pServer(pServer),
-	m_pConnection(pConnection),
-	m_pRequest(pRequest),
-	m_pReply(NULL),
-	m_pArray(NULL),
+	m_pServletInfo(pInfo),
 	m_mustQuit(false)
 {
 }
 
 DBusServletThread::~DBusServletThread()
 {
-	if (m_pArray != NULL)
-	{
-		// Free the array
-		g_ptr_array_free(m_pArray, TRUE);
-	}
-	if (m_pRequest != NULL)
-	{
-		dbus_message_ref(m_pRequest);
-	}
-	if (m_pConnection != NULL)
-	{
-		dbus_connection_ref(m_pConnection);
-	}
 }
 
 string DBusServletThread::getType(void) const
@@ -668,80 +636,16 @@
 	return "DBusServletThread";
 }
 
-DBusConnection *DBusServletThread::getConnection(void) const
+DBusServletInfo *DBusServletThread::getServletInfo(void) const
 {
-	return m_pConnection;
+	return m_pServletInfo;
 }
 
-DBusMessage *DBusServletThread::getReply(void) const
-{
-	return m_pReply;
-}
-
 bool DBusServletThread::mustQuit(void) const
 {
 	return m_mustQuit;
 }
 
-bool DBusServletThread::runQuery(QueryProperties &queryProps, vector<string> &docIds)
-{
-	PinotSettings &settings = PinotSettings::getInstance();
-
-	docIds.clear();
-
-	SearchEngineInterface *pEngine = ModuleFactory::getSearchEngine(settings.m_defaultBackend,
-		settings.m_daemonIndexLocation);
-	if (pEngine == NULL)
-	{
-		return false;
-	}
-
-	// Run the query
-	pEngine->setDefaultOperator(SearchEngineInterface::DEFAULT_OP_AND);
-	if (pEngine->runQuery(queryProps) == false)
-	{
-		delete pEngine;
-
-		return false;
-	}
-
-	const vector<DocumentInfo> &resultsList = pEngine->getResults();
-	if (resultsList.empty() == true)
-	{
-#ifdef DEBUG
-		cout << "DBusServletThread::runQuery: trying again" << endl;
-#endif
-		// Try again, this time with OR as default operator
-		pEngine->setDefaultOperator(SearchEngineInterface::DEFAULT_OP_OR);
-		if (pEngine->runQuery(queryProps) == false)
-		{
-			delete pEngine;
-
-			return false;
-		}
-	}
-
-	for (vector<DocumentInfo>::const_iterator resultIter = resultsList.begin();
-		resultIter != resultsList.end(); ++resultIter)
-	{
-		unsigned int indexId = 0;
-		unsigned int docId = resultIter->getIsIndexed(indexId);
-
-		// We only need the document ID
-		if (docId > 0)
-		{
-			char docIdStr[64];
-
-			snprintf(docIdStr, 64, "%u", docId);
-			docIds.push_back(docIdStr);
-		}
-	}
-
-	delete pEngine;
-
-	return true;
-}
-
 void DBusServletThread::doWork(void)
 {
 	PinotSettings &settings = PinotSettings::getInstance();
@@ -751,8 +655,7 @@
 	bool processedMessage = true, updateLabelsCache = false, flushIndex = false;
 
 	if ((m_pServer == NULL) ||
-		(m_pConnection == NULL) ||
-		(m_pRequest == NULL) ||
+		(m_pServletInfo == NULL) ||
 		(pIndex == NULL))
 	{
 		return;
@@ -768,7 +671,7 @@
 	}
 
 #ifdef DEBUG
-	const char *pSender = dbus_message_get_sender(m_pRequest);
+	const char *pSender = dbus_message_get_sender(m_pServletInfo->m_pRequest);
 	if (pSender != NULL)
 	{
 		cout << "DBusServletThread::doWork: called by " << pSender << endl;
@@ -779,7 +682,7 @@
 	}
 #endif
 
-	if (dbus_message_is_method_call(m_pRequest, "de.berlios.Pinot", "GetStatistics") == TRUE)
+	if (dbus_message_is_method_call(m_pServletInfo->m_pRequest, "de.berlios.Pinot", "GetStatistics") == TRUE)
 	{
 		CrawlHistory crawlHistory(settings.getHistoryDatabaseName());
 		unsigned int crawledFilesCount = crawlHistory.getItemsCount(CrawlHistory::CRAWLED);
@@ -790,8 +693,7 @@
 		cout << "DBusServletThread::doWork: received GetStatistics" << endl;
 #endif
 		// Prepare the reply
-		m_pReply = newDBusReply(m_pRequest);
-		if (m_pReply != NULL)
+		if (m_pServletInfo->newReply() == true)
 		{
 			if (m_pServer->is_flag_set(DaemonState::LOW_DISK_SPACE) == true)
 			{
@@ -810,7 +712,7 @@
 				<< " " << docsCount << " " << lowDiskSpace << onBattery << crawling << endl;
 #endif
 
-			dbus_message_append_args(m_pReply,
+			dbus_message_append_args(m_pServletInfo->m_pReply,
 				DBUS_TYPE_UINT32, &crawledFilesCount,
 				DBUS_TYPE_UINT32, &docsCount,
 				DBUS_TYPE_BOOLEAN, &lowDiskSpace,
@@ -819,9 +721,9 @@
 				DBUS_TYPE_INVALID);
 		}
 	}
-	else if (dbus_message_is_method_call(m_pRequest, "de.berlios.Pinot", "Reload") == TRUE)
+	else if (dbus_message_is_method_call(m_pServletInfo->m_pRequest, "de.berlios.Pinot", "Reload") == TRUE)
 	{
-		if (dbus_message_get_args(m_pRequest, &error,
+		if (dbus_message_get_args(m_pServletInfo->m_pRequest, &error,
 			DBUS_TYPE_INVALID) == TRUE)
 		{
 			gboolean reloading = TRUE;
@@ -832,18 +734,17 @@
 			m_pServer->reload();
 
 			// Prepare the reply
-			m_pReply = newDBusReply(m_pRequest);
-			if (m_pReply != NULL)
+			if (m_pServletInfo->newReply() == true)
 			{
-				dbus_message_append_args(m_pReply,
+				dbus_message_append_args(m_pServletInfo->m_pReply,
 					DBUS_TYPE_BOOLEAN, &reloading,
 					DBUS_TYPE_INVALID);
 			}
 		}
 	}
-	else if (dbus_message_is_method_call(m_pRequest, "de.berlios.Pinot", "Stop") == TRUE)
+	else if (dbus_message_is_method_call(m_pServletInfo->m_pRequest, "de.berlios.Pinot", "Stop") == TRUE)
 	{
-		if (dbus_message_get_args(m_pRequest, &error,
+		if (dbus_message_get_args(m_pServletInfo->m_pRequest, &error,
 			DBUS_TYPE_INVALID) == TRUE)
 		{
 			int exitStatus = EXIT_SUCCESS;
@@ -854,10 +755,9 @@
 			m_pServer->set_flag(DaemonState::STOPPED);
 
 			// Prepare the reply
-			m_pReply = newDBusReply(m_pRequest);
-			if (m_pReply != NULL)
+			if (m_pServletInfo->newReply() == true)
 			{
-				dbus_message_append_args(m_pReply,
+				dbus_message_append_args(m_pServletInfo->m_pReply,
 					DBUS_TYPE_INT32, &exitStatus,
 					DBUS_TYPE_INVALID);
 			}
@@ -865,12 +765,12 @@
 			m_mustQuit = true;
 		}
 	}
-	else if (dbus_message_is_method_call(m_pRequest, "de.berlios.Pinot", "HasDocument") == TRUE)
+	else if (dbus_message_is_method_call(m_pServletInfo->m_pRequest, "de.berlios.Pinot", "HasDocument") == TRUE)
 	{
 		char *pUrl = NULL;
 		unsigned int docId = 0;
 
-		if (dbus_message_get_args(m_pRequest, &error,
+		if (dbus_message_get_args(m_pServletInfo->m_pRequest, &error,
 			DBUS_TYPE_STRING, &pUrl,
 			DBUS_TYPE_INVALID) == TRUE)
 		{
@@ -886,48 +786,38 @@
 			}
 
 			// Prepare the reply
-			m_pReply = newDBusReply(m_pRequest);
-			if (m_pReply != NULL)
+			if (m_pServletInfo->newReply() == true)
 			{
-				dbus_message_append_args(m_pReply,
+				dbus_message_append_args(m_pServletInfo->m_pReply,
 					DBUS_TYPE_UINT32, &docId,
 					DBUS_TYPE_INVALID);
 			}
 		}
 	}
-	else if (dbus_message_is_method_call(m_pRequest, "de.berlios.Pinot", "GetLabels") == TRUE)
+	else if (dbus_message_is_method_call(m_pServletInfo->m_pRequest, "de.berlios.Pinot", "GetLabels") == TRUE)
 	{
 #ifdef DEBUG
 		cout << "DBusServletThread::doWork: received GetLabels" << endl;
 #endif
 		// This method doesn't take any argument
-		m_pArray = g_ptr_array_new();
+		m_pServletInfo->m_pArray = g_ptr_array_new();
 
 		for (set<string>::const_iterator labelIter = labelsCache.begin();
 			labelIter != labelsCache.end(); ++labelIter)
 		{
 			string labelName(*labelIter);
 
-			g_ptr_array_add(m_pArray, const_cast<char*>(labelName.c_str()));
-#ifdef DEBUG
-			cout << "DBusServletThread::doWork: adding label " << m_pArray->len << " " << labelName << endl;
-#endif
+			g_ptr_array_add(m_pServletInfo->m_pArray, const_cast<char*>(labelName.c_str()));
 		}
 
 		// Prepare the reply
-		m_pReply = newDBusReply(m_pRequest);
-		if (m_pReply != NULL)
-		{
-			dbus_message_append_args(m_pReply,
-				DBUS_TYPE_ARRAY, DBUS_TYPE_STRING, &m_pArray->pdata, m_pArray->len,
-				DBUS_TYPE_INVALID);
-		}
+		m_pServletInfo->newReplyWithArray();
 	}
-	else if (dbus_message_is_method_call(m_pRequest, "de.berlios.Pinot", "AddLabel") == TRUE)
+	else if (dbus_message_is_method_call(m_pServletInfo->m_pRequest, "de.berlios.Pinot", "AddLabel") == TRUE)
 	{
 		char *pLabel = NULL;
 
-		if (dbus_message_get_args(m_pRequest, &error,
+		if (dbus_message_get_args(m_pServletInfo->m_pRequest, &error,
 			DBUS_TYPE_STRING, &pLabel,
 			DBUS_TYPE_INVALID) == TRUE)
 		{
@@ -950,21 +840,20 @@
 			}
 
 			// Prepare the reply
-			m_pReply = newDBusReply(m_pRequest);
-			if (m_pReply != NULL)
+			if (m_pServletInfo->newReply() == true)
 			{
-				dbus_message_append_args(m_pReply,
+				dbus_message_append_args(m_pServletInfo->m_pReply,
 					DBUS_TYPE_STRING, &pLabel,
 					DBUS_TYPE_INVALID);
 			}
 		}
 	}
-	else if (dbus_message_is_method_call(m_pRequest, "de.berlios.Pinot", "RenameLabel") == TRUE)
+	else if (dbus_message_is_method_call(m_pServletInfo->m_pRequest, "de.berlios.Pinot", "RenameLabel") == TRUE)
 	{
 		char *pOldLabel = NULL;
 		char *pNewLabel = NULL;
 
-		if (dbus_message_get_args(m_pRequest, &error,
+		if (dbus_message_get_args(m_pServletInfo->m_pRequest, &error,
 			DBUS_TYPE_STRING, &pOldLabel,
 			DBUS_TYPE_STRING, &pNewLabel,
 			DBUS_TYPE_INVALID) == TRUE)
@@ -975,20 +864,19 @@
 #endif
 			
 			// Prepare the reply
-			m_pReply = newDBusReply(m_pRequest);
-			if (m_pReply != NULL)
+			if (m_pServletInfo->newReply() == true)
 			{
-				dbus_message_append_args(m_pReply,
+				dbus_message_append_args(m_pServletInfo->m_pReply,
 					DBUS_TYPE_STRING, &pNewLabel,
 					DBUS_TYPE_INVALID);
 			}
 		}
 	}
-	else if (dbus_message_is_method_call(m_pRequest, "de.berlios.Pinot", "DeleteLabel") == TRUE)
+	else if (dbus_message_is_method_call(m_pServletInfo->m_pRequest, "de.berlios.Pinot", "DeleteLabel") == TRUE)
 	{
 		char *pLabel = NULL;
 
-		if (dbus_message_get_args(m_pRequest, &error,
+		if (dbus_message_get_args(m_pServletInfo->m_pRequest, &error,
 			DBUS_TYPE_STRING, &pLabel,
 			DBUS_TYPE_INVALID) == TRUE)
 		{
@@ -1012,20 +900,19 @@
 			}
 
 			// Prepare the reply
-			m_pReply = newDBusReply(m_pRequest);
-			if (m_pReply != NULL)
+			if (m_pServletInfo->newReply() == true)
 			{
-				dbus_message_append_args(m_pReply,
+				dbus_message_append_args(m_pServletInfo->m_pReply,
 					DBUS_TYPE_STRING, &pLabel,
 					DBUS_TYPE_INVALID);
 			}
 		}
 	}
-	else if (dbus_message_is_method_call(m_pRequest, "de.berlios.Pinot", "GetDocumentLabels") == TRUE)
+	else if (dbus_message_is_method_call(m_pServletInfo->m_pRequest, "de.berlios.Pinot", "GetDocumentLabels") == TRUE)
 	{
 		unsigned int docId = 0;
 
-		if (dbus_message_get_args(m_pRequest, &error,
+		if (dbus_message_get_args(m_pServletInfo->m_pRequest, &error,
 			DBUS_TYPE_UINT32, &docId,
 			DBUS_TYPE_INVALID) == TRUE)
 		{
@@ -1036,44 +923,34 @@
 #endif
 			if (pIndex->getDocumentLabels(docId, labels) == true)
 			{
-				m_pArray = g_ptr_array_new();
+				m_pServletInfo->m_pArray = g_ptr_array_new();
 
 				for (set<string>::const_iterator labelIter = labels.begin();
 					labelIter != labels.end(); ++labelIter)
 				{
 					string labelName(*labelIter);
 
-					g_ptr_array_add(m_pArray, const_cast<char*>(labelName.c_str()));
-#ifdef DEBUG
-					cout << "DBusServletThread::doWork: adding label " << m_pArray->len << " " << labelName << endl;
-#endif
+					g_ptr_array_add(m_pServletInfo->m_pArray, const_cast<char*>(labelName.c_str()));
 				}
 
 				// Prepare the reply
-				m_pReply = newDBusReply(m_pRequest);
-				if (m_pReply != NULL)
-				{
-					dbus_message_append_args(m_pReply,
-						DBUS_TYPE_ARRAY, DBUS_TYPE_STRING, &m_pArray->pdata, m_pArray->len,
-						DBUS_TYPE_INVALID);
-				}
+				m_pServletInfo->newReplyWithArray();
 			}
 			else
 			{
-				m_pReply = dbus_message_new_error(m_pRequest,
-					"de.berlios.Pinot.GetDocumentLabels",
+				m_pServletInfo->newErrorReply("de.berlios.Pinot.GetDocumentLabels",
 					" failed");
 			}
 		}
 	}
-	else if (dbus_message_is_method_call(m_pRequest, "de.berlios.Pinot", "SetDocumentLabels") == TRUE)
+	else if (dbus_message_is_method_call(m_pServletInfo->m_pRequest, "de.berlios.Pinot", "SetDocumentLabels") == TRUE)
 	{
 		char **ppLabels = NULL;
 		dbus_uint32_t labelsCount = 0;
 		unsigned int docId = 0;
 		gboolean resetLabels = TRUE;
 
-		if (dbus_message_get_args(m_pRequest, &error,
+		if (dbus_message_get_args(m_pServletInfo->m_pRequest, &error,
 			DBUS_TYPE_UINT32, &docId,
 			DBUS_TYPE_ARRAY, DBUS_TYPE_STRING, &ppLabels, &labelsCount,
 			DBUS_TYPE_BOOLEAN, &resetLabels,
@@ -1113,16 +990,15 @@
 			g_strfreev(ppLabels);
 
 			// Prepare the reply
-			m_pReply = newDBusReply(m_pRequest);
-			if (m_pReply != NULL)
+			if (m_pServletInfo->newReply() == true)
 			{
-				dbus_message_append_args(m_pReply,
+				dbus_message_append_args(m_pServletInfo->m_pReply,
 					DBUS_TYPE_UINT32, &docId,
 					DBUS_TYPE_INVALID);
 			}
 		}
 	}
-	else if (dbus_message_is_method_call(m_pRequest, "de.berlios.Pinot", "SetDocumentsLabels") == TRUE)
+	else if (dbus_message_is_method_call(m_pServletInfo->m_pRequest, "de.berlios.Pinot", "SetDocumentsLabels") == TRUE)
 	{
 		char **ppDocIds = NULL;
 		char **ppLabels = NULL;
@@ -1130,7 +1006,7 @@
 		dbus_uint32_t labelsCount = 0;
 		gboolean resetLabels = TRUE;
 
-		if (dbus_message_get_args(m_pRequest, &error,
+		if (dbus_message_get_args(m_pServletInfo->m_pRequest, &error,
 			DBUS_TYPE_ARRAY, DBUS_TYPE_STRING, &ppDocIds, &idsCount,
 			DBUS_TYPE_ARRAY, DBUS_TYPE_STRING, &ppLabels, &labelsCount,
 			DBUS_TYPE_BOOLEAN, &resetLabels,
@@ -1188,20 +1064,19 @@
 			g_strfreev(ppLabels);
 
 			// Prepare the reply
-			m_pReply = newDBusReply(m_pRequest);
-			if (m_pReply != NULL)
+			if (m_pServletInfo->newReply() == true)
 			{
-				dbus_message_append_args(m_pReply,
+				dbus_message_append_args(m_pServletInfo->m_pReply,
 					DBUS_TYPE_BOOLEAN, &resetLabels,
 					DBUS_TYPE_INVALID);
 			}
 		}
 	}
-	else if (dbus_message_is_method_call(m_pRequest, "de.berlios.Pinot", "GetDocumentInfo") == TRUE)
+	else if (dbus_message_is_method_call(m_pServletInfo->m_pRequest, "de.berlios.Pinot", "GetDocumentInfo") == TRUE)
 	{
 		unsigned int docId = 0;
 
-		if (dbus_message_get_args(m_pRequest, &error,
+		if (dbus_message_get_args(m_pServletInfo->m_pRequest, &error,
 			DBUS_TYPE_UINT32, &docId,
 			DBUS_TYPE_INVALID) == TRUE)
 		{
@@ -1213,40 +1088,36 @@
 			if (pIndex->getDocumentInfo(docId, docInfo) == true)
 			{
 				// Prepare the reply
-				m_pReply = newDBusReply(m_pRequest);
-				if (m_pReply != NULL)
+				if (m_pServletInfo->newReply() == true)
 				{
 					DBusMessageIter iter;
 
-					dbus_message_iter_init_append(m_pReply, &iter);
+					dbus_message_iter_init_append(m_pServletInfo->m_pReply, &iter);
 					if (DBusIndex::documentInfoToDBus(&iter, 0, docInfo) == false)
 					{
-						dbus_message_unref(m_pReply);
-						m_pReply = dbus_message_new_error(m_pRequest,
-							"de.berlios.Pinot.GetDocumentInfo",
+						dbus_message_unref(m_pServletInfo->m_pReply);
+						m_pServletInfo->newErrorReply("de.berlios.Pinot.GetDocumentInfo",
 							"Unknown error");
 					}
 				}
 			}
 			else
 			{
-				m_pReply = dbus_message_new_error(m_pRequest,
-					"de.berlios.Pinot.GetDocumentInfo",
+				m_pServletInfo->newErrorReply("de.berlios.Pinot.GetDocumentInfo",
 					"Unknown document");
 			}
 		}
 	}
-	else if (dbus_message_is_method_call(m_pRequest, "de.berlios.Pinot", "SetDocumentInfo") == TRUE)
+	else if (dbus_message_is_method_call(m_pServletInfo->m_pRequest, "de.berlios.Pinot", "SetDocumentInfo") == TRUE)
 	{
 		DBusMessageIter iter;
 		DocumentInfo docInfo;
 		unsigned int docId = 0;
 
-		dbus_message_iter_init(m_pRequest, &iter);
+		dbus_message_iter_init(m_pServletInfo->m_pRequest, &iter);
 		if (DBusIndex::documentInfoFromDBus(&iter, docId, docInfo) == false)
 		{
-			m_pReply = dbus_message_new_error(m_pRequest,
-				"de.berlios.Pinot.SetDocumentInfo",
+			m_pServletInfo->newErrorReply("de.berlios.Pinot.SetDocumentInfo",
 				"Unknown error");
 		}
 		else
@@ -1262,77 +1133,103 @@
 			metaData.addItem(docInfo, DocumentInfo::SERIAL_FIELDS);
 
 			// Prepare the reply
-			m_pReply = newDBusReply(m_pRequest);
-			if (m_pReply != NULL)
+			if (m_pServletInfo->newReply() == true)
 			{
-				dbus_message_append_args(m_pReply,
+				dbus_message_append_args(m_pServletInfo->m_pReply,
 					DBUS_TYPE_UINT32, &docId,
 					DBUS_TYPE_INVALID);
 			}
 		}
 	}
-	else if (dbus_message_is_method_call(m_pRequest, "de.berlios.Pinot", "SimpleQuery") == TRUE)
+	else if (dbus_message_is_method_call(m_pServletInfo->m_pRequest, "de.berlios.Pinot", "Query") == TRUE)
 	{
 		char *pSearchText = NULL;
-		dbus_uint32_t maxHits = 0;
+		char *pEngineType = NULL;
+		char *pEngineOption = NULL;
+		dbus_uint32_t startDoc = 0, maxHits = 0;
 
-		if (dbus_message_get_args(m_pRequest, &error,
+		if (dbus_message_get_args(m_pServletInfo->m_pRequest, &error,
+			DBUS_TYPE_STRING, &pEngineType,
+			DBUS_TYPE_STRING, &pEngineOption,
 			DBUS_TYPE_STRING, &pSearchText,
+			DBUS_TYPE_UINT32, &startDoc,
 			DBUS_TYPE_UINT32, &maxHits,
 			DBUS_TYPE_INVALID) == TRUE)
 		{
 			bool replyWithError = true;
 
 #ifdef DEBUG
-			cout << "DBusServletThread::doWork: received SimpleQuery " << pSearchText << ", " << maxHits << endl;
+			cout << "DBusServletThread::doWork: received Query " << pSearchText << ", " << startDoc << "/" << maxHits << endl;
 #endif
 			if (pSearchText != NULL)
 			{
-				QueryProperties queryProps("DBUS", pSearchText);
-				vector<string> docIds;
+				stringstream queryNameStr;
 
-				// Run the query
+				// Give the query a unique name
+				queryNameStr << "DBUS" << m_id;
+				m_pServletInfo->m_queryName = queryNameStr.str();
+				m_pServletInfo->m_simpleQuery = false;
+
+				QueryProperties queryProps(m_pServletInfo->m_queryName, pSearchText);
 				queryProps.setMaximumResultsCount(maxHits);
-				if (runQuery(queryProps, docIds) == true)
-				{
-					m_pArray = g_ptr_array_new();
 
-					for (vector<string>::const_iterator docIter = docIds.begin();
-						docIter != docIds.end(); ++docIter)
-					{
+				m_pServletInfo->m_pThread = new EngineQueryThread(pEngineType,
+					pEngineType, pEngineOption,
+					queryProps, startDoc);
+			}
+
+			if (replyWithError == true)
+			{
+				m_pServletInfo->newErrorReply("de.berlios.Pinot.SimpleQuery",
+					"Query failed");
+			}
+		}
+	}
+	// FIXME: this method will soon be obsoleted
+	else if (dbus_message_is_method_call(m_pServletInfo->m_pRequest, "de.berlios.Pinot", "SimpleQuery") == TRUE)
+	{
+		char *pSearchText = NULL;
+		dbus_uint32_t maxHits = 0;
+
+		if (dbus_message_get_args(m_pServletInfo->m_pRequest, &error,
+			DBUS_TYPE_STRING, &pSearchText,
+			DBUS_TYPE_UINT32, &maxHits,
+			DBUS_TYPE_INVALID) == TRUE)
+		{
+			bool replyWithError = true;
+
 #ifdef DEBUG
-						cout << "DBusServletThread::doWork: adding result "
-							<< m_pArray->len << " " << *docIter << endl;
+			cout << "DBusServletThread::doWork: received SimpleQuery " << pSearchText << ", " << maxHits << endl;
 #endif
-						g_ptr_array_add(m_pArray, const_cast<char*>(docIter->c_str()));
-					}
+			if (pSearchText != NULL)
+			{
+				stringstream queryNameStr;
 
-					// Prepare the reply
-					m_pReply = newDBusReply(m_pRequest);
-					if (m_pReply != NULL)
-					{
-						dbus_message_append_args(m_pReply,
-							DBUS_TYPE_ARRAY, DBUS_TYPE_STRING, &m_pArray->pdata, m_pArray->len,
-							DBUS_TYPE_INVALID);
+				// Give the query a unique name
+				queryNameStr << "DBUS" << m_id;
+				m_pServletInfo->m_queryName = queryNameStr.str();
+				m_pServletInfo->m_simpleQuery = true;
 
-						replyWithError = false;
-					}
-				}
+				QueryProperties queryProps(m_pServletInfo->m_queryName, pSearchText);
+				queryProps.setMaximumResultsCount(maxHits);
+
+				m_pServletInfo->m_pThread = new EngineQueryThread(settings.m_defaultBackend,
+					settings.m_defaultBackend, settings.m_daemonIndexLocation,
+					queryProps, 0);
 			}
 
 			if (replyWithError == true)
 			{
-				m_pReply = dbus_message_new_error(m_pRequest,
-					"de.berlios.Pinot.SimpleQuery",
+				m_pServletInfo->newErrorReply("de.berlios.Pinot.SimpleQuery",
 					"Query failed");
 			}
 		}
 	}
-	else if (dbus_message_is_method_call(m_pRequest, "de.berlios.Pinot", "UpdateDocument") == TRUE)
+	else if (dbus_message_is_method_call(m_pServletInfo->m_pRequest, "de.berlios.Pinot", "UpdateDocument") == TRUE)
 	{
 		unsigned int docId = 0;
 
-		if (dbus_message_get_args(m_pRequest, &error,
+		if (dbus_message_get_args(m_pServletInfo->m_pRequest, &error,
 			DBUS_TYPE_UINT32, &docId,
 			DBUS_TYPE_INVALID) == TRUE)
 		{
@@ -1348,16 +1245,15 @@
 			}
 
 			// Prepare the reply
-			m_pReply = newDBusReply(m_pRequest);
-			if (m_pReply != NULL)
+			if (m_pServletInfo->newReply() == true)
 			{
-				dbus_message_append_args(m_pReply,
+				dbus_message_append_args(m_pServletInfo->m_pReply,
 					DBUS_TYPE_UINT32, &docId,
 					DBUS_TYPE_INVALID);
 			}
 		}
 	}
-	else if (dbus_message_is_method_call(m_pRequest, "org.freedesktop.DBus.Introspectable", "Introspect") == TRUE)
+	else if (dbus_message_is_method_call(m_pServletInfo->m_pRequest, "org.freedesktop.DBus.Introspectable", "Introspect") == TRUE)
 	{
 #ifdef DEBUG
 		cout << "DBusServletThread::doWork: received Introspect" << endl;
@@ -1365,12 +1261,11 @@
 		if (loadXMLDescription() == true)
 		{
 			// Prepare the reply
-			m_pReply = newDBusReply(m_pRequest);
-			if (m_pReply != NULL)
+			if (m_pServletInfo->newReply() == true)
 			{
 				const char *pXmlData = g_xmlDescription.c_str();
 
-				dbus_message_append_args(m_pReply,
+				dbus_message_append_args(m_pServletInfo->m_pReply,
 					DBUS_TYPE_STRING, &pXmlData,
 					DBUS_TYPE_INVALID);
 			}
@@ -1379,8 +1274,8 @@
 	else
 	{
 #ifdef DEBUG
-		cout << "DBusServletThread::doWork: foreign message for/from " << dbus_message_get_interface(m_pRequest)
-			<< " " << dbus_message_get_member(m_pRequest) << endl;
+		cout << "DBusServletThread::doWork: foreign message for/from " << dbus_message_get_interface(m_pServletInfo->m_pRequest)
+			<< " " << dbus_message_get_member(m_pServletInfo->m_pRequest) << endl;
 #endif
 		processedMessage = false;
 	}
@@ -1392,7 +1287,7 @@
 		cout << "DBusServletThread::doWork: error occured: " << error.message << endl;
 #endif
 		// Use the error message as reply
-		m_pReply = dbus_message_new_error(m_pRequest, error.name, error.message);
+		m_pServletInfo->newErrorReply(error.name, error.message);
 	}
 
 	dbus_error_free(&error);
@@ -1409,18 +1304,6 @@
 #endif
 	}
 
-	// Send a reply ?
-	if ((m_pConnection != NULL) &&
-		(m_pReply != NULL))
-	{
-		dbus_connection_send(m_pConnection, m_pReply, NULL);
-		dbus_connection_flush(m_pConnection);
-#ifdef DEBUG
-		cout << "DBusServletThread::doWork: sent reply" << endl;
-#endif
-		dbus_message_unref(m_pReply);
-	}
-
 	// Flush the index ?
 	if (flushIndex == true)
 	{

Modified: trunk/UI/GTK2/src/ServerThreads.h
===================================================================
--- trunk/UI/GTK2/src/ServerThreads.h	2008-11-09 12:36:47 UTC (rev 1403)
+++ trunk/UI/GTK2/src/ServerThreads.h	2008-11-09 12:52:37 UTC (rev 1404)
@@ -21,15 +21,6 @@
 
 #include <string>
 #include <vector>
-extern "C"
-{
-#if DBUS_VERSION < 1000000
-#define DBUS_API_SUBJECT_TO_CHANGE
-#endif
-#include <dbus/dbus.h>
-#include <dbus/dbus-glib.h>
-#include <dbus/dbus-glib-lowlevel.h>
-}
 #include <sigc++/sigc++.h>
 #include <glibmm/ustring.h>
 
@@ -87,27 +78,20 @@
 class DBusServletThread : public WorkerThread
 {
 	public:
-		DBusServletThread(DaemonState *pServer, DBusConnection *pConnection, DBusMessage *pRequest);
+		DBusServletThread(DaemonState *pServer, DBusServletInfo *pInfo);
 		virtual ~DBusServletThread();
 
 		virtual std::string getType(void) const;
 
-		DBusConnection *getConnection(void) const;
+		DBusServletInfo *getServletInfo(void) const;
 
-		DBusMessage *getReply(void) const;
-
 		bool mustQuit(void) const;
 
 	protected:
 		DaemonState *m_pServer;
-		DBusConnection *m_pConnection;
-		DBusMessage *m_pRequest;
-		DBusMessage *m_pReply;
-		GPtrArray *m_pArray;
+		DBusServletInfo *m_pServletInfo;
 		bool m_mustQuit;
 
-		bool runQuery(QueryProperties &queryProps, std::vector<std::string> &docIds);
-
 		virtual void doWork(void);
 
 	private:

Modified: trunk/UI/GTK2/src/pinot-dbus-daemon.cc
===================================================================
--- trunk/UI/GTK2/src/pinot-dbus-daemon.cc	2008-11-09 12:36:47 UTC (rev 1403)
+++ trunk/UI/GTK2/src/pinot-dbus-daemon.cc	2008-11-09 12:52:37 UTC (rev 1404)
@@ -220,7 +220,9 @@
 
 		if (pServer != NULL)
 		{
-			pServer->start_thread(new DBusServletThread(pServer, pConnection, pMessage));
+			DBusServletInfo *pInfo = new DBusServletInfo(pConnection, pMessage);
+
+			pServer->start_thread(new DBusServletThread(pServer, pInfo));
 		}
 	}
 

Modified: trunk/UI/GTK2/src/pinot-dbus-daemon.xml
===================================================================
--- trunk/UI/GTK2/src/pinot-dbus-daemon.xml	2008-11-09 12:36:47 UTC (rev 1403)
+++ trunk/UI/GTK2/src/pinot-dbus-daemon.xml	2008-11-09 12:52:37 UTC (rev 1404)
@@ -6,7 +6,7 @@
     </method>
   </interface>
   <!--
-	This interface WILL change before 1.0 is released !
+	WARNING: This interface WILL change before 1.0 is released !
 	-->
   <interface name="de.berlios.Pinot">
     <!--
@@ -136,10 +136,31 @@
     </method>
     <!--
 	Queries the index.
+	 engineType : engine type. See pinot-search(1) for a list of supported types
+	 engineName : engine name. See pinot-search(1) for examples
 	 searchText : search text, as would be entered in Pinot's live query field
+	 startDoc: the first result to return, starting from 0
 	 maxHits: the maximum number of hits desired
+	 estimatedHits: an estimate of the total number of hits
+	 hitsList: hit properties
+	-->
+    <method name="Query">
+      <annotation name="de.berlios.Pinot.SimpleQuery" value="pinotDBus"/>
+      <arg type="s" name="engineType" direction="in" />
+      <arg type="s" name="engineName" direction="in" />
+      <arg type="s" name="searchText" direction="in" />
+      <arg type="u" name="startDoc" direction="in" />
+      <arg type="u" name="maxHits" direction="in" />
+      <arg type="u" name="estimatedHits" direction="out" />
+      <arg type="aa(ss)" name="hitsList" direction="out" />
+    </method>
+    <!--
+	Queries the index.
+	 searchText : search text, as would be entered in Pinot's live query field
+	 maxHits: the maximum number of hits desired
 	 docIds: array of document IDs
 	 docIdsCount: the number of document IDs in the array
+        WARNING: this method is obsolete
 	-->
     <method name="SimpleQuery">
       <annotation name="de.berlios.Pinot.SimpleQuery" value="pinotDBus"/>



From fabricecolin at mail.berlios.de  Sun Nov  9 16:47:14 2008
From: fabricecolin at mail.berlios.de (fabricecolin at mail.berlios.de)
Date: Sun, 9 Nov 2008 16:47:14 +0100
Subject: [Pinot-svn] r1405 - trunk/UI/GTK2/src
Message-ID: <200811091547.mA9FlEFi003661@sheep.berlios.de>

Author: fabricecolin
Date: 2008-11-09 16:47:01 +0100 (Sun, 09 Nov 2008)
New Revision: 1405

Modified:
   trunk/UI/GTK2/src/DaemonState.cpp
   trunk/UI/GTK2/src/DaemonState.h
   trunk/UI/GTK2/src/ServerThreads.cpp
Log:
Provide reasonable defaults for Query's engine type and option.
Some cosmetic changes.


Modified: trunk/UI/GTK2/src/DaemonState.cpp
===================================================================
--- trunk/UI/GTK2/src/DaemonState.cpp	2008-11-09 12:52:37 UTC (rev 1404)
+++ trunk/UI/GTK2/src/DaemonState.cpp	2008-11-09 15:47:01 UTC (rev 1405)
@@ -678,7 +678,7 @@
 		{
 			if (pInfo->m_pThread != NULL)
 			{
-				m_queryServlets.insert(pInfo);
+				m_servletsInfo.insert(pInfo);
 
 #ifdef DEBUG
 				cout << "DaemonState::on_thread_end: running query " << pInfo->m_queryName << endl;
@@ -718,8 +718,8 @@
 		const vector<DocumentInfo> &resultsList = pQueryThread->getDocuments();
 
 		// Find the servlet info
-		for (set<DBusServletInfo *>::const_iterator servIter = m_queryServlets.begin();
-			servIter != m_queryServlets.end(); ++servIter)
+		for (set<DBusServletInfo *>::const_iterator servIter = m_servletsInfo.begin();
+			servIter != m_servletsInfo.end(); ++servIter)
 		{
 			DBusServletInfo *pInfo = const_cast<DBusServletInfo *>(*servIter);
 
@@ -733,7 +733,7 @@
 				pInfo->newQueryReply(resultsList, pQueryThread->getDocumentsCount());
 				pInfo->reply();
 
-				m_queryServlets.erase(servIter);
+				m_servletsInfo.erase(servIter);
 				delete pInfo;
 
 				break;

Modified: trunk/UI/GTK2/src/DaemonState.h
===================================================================
--- trunk/UI/GTK2/src/DaemonState.h	2008-11-09 12:52:37 UTC (rev 1404)
+++ trunk/UI/GTK2/src/DaemonState.h	2008-11-09 15:47:01 UTC (rev 1405)
@@ -108,7 +108,7 @@
 		sigc::signal1<void, int> m_signalQuit;
 		unsigned int m_crawlers;
 		std::queue<PinotSettings::IndexableLocation> m_crawlQueue;
-		std::set<DBusServletInfo *> m_queryServlets;
+		std::set<DBusServletInfo *> m_servletsInfo;
 
 		bool on_activity_timeout(void);
 

Modified: trunk/UI/GTK2/src/ServerThreads.cpp
===================================================================
--- trunk/UI/GTK2/src/ServerThreads.cpp	2008-11-09 12:52:37 UTC (rev 1404)
+++ trunk/UI/GTK2/src/ServerThreads.cpp	2008-11-09 15:47:01 UTC (rev 1405)
@@ -1173,8 +1173,34 @@
 				QueryProperties queryProps(m_pServletInfo->m_queryName, pSearchText);
 				queryProps.setMaximumResultsCount(maxHits);
 
+				string engineType, engineOption;
+
+				// Provide reasonable defaults 
+				if ((pEngineType == NULL) ||
+					(strlen(pEngineType) == 0))
+				{
+					engineType = settings.m_defaultBackend;
+				}
+				else
+				{
+					engineType = pEngineType;
+				}
+				if ((pEngineOption == NULL) ||
+					(strlen(pEngineOption) == 0))
+				{
+					if (engineType == settings.m_defaultBackend)
+					{
+						// This wouldn't make sense with any other engine type
+						engineOption = settings.m_daemonIndexLocation;
+					}
+				}
+				else
+				{
+					engineOption = pEngineOption;
+				}
+
 				m_pServletInfo->m_pThread = new EngineQueryThread(pEngineType,
-					pEngineType, pEngineOption,
+					engineType, engineOption,
 					queryProps, startDoc);
 			}
 



From fabricecolin at mail.berlios.de  Tue Nov 11 15:20:04 2008
From: fabricecolin at mail.berlios.de (fabricecolin at mail.berlios.de)
Date: Tue, 11 Nov 2008 15:20:04 +0100
Subject: [Pinot-svn] r1406 - trunk/UI/GTK2/src
Message-ID: <200811111420.mABEK4Gh023518@sheep.berlios.de>

Author: fabricecolin
Date: 2008-11-11 15:19:58 +0100 (Tue, 11 Nov 2008)
New Revision: 1406

Modified:
   trunk/UI/GTK2/src/prefsDialog.cc
   trunk/UI/GTK2/src/prefsDialog.hh
Log:
Only make new labels editable, since existing labels can't be renamed.


Modified: trunk/UI/GTK2/src/prefsDialog.cc
===================================================================
--- trunk/UI/GTK2/src/prefsDialog.cc	2008-11-09 15:47:01 UTC (rev 1405)
+++ trunk/UI/GTK2/src/prefsDialog.cc	2008-11-11 14:19:58 UTC (rev 1406)
@@ -25,7 +25,7 @@
 #include <gtkmm/label.h>
 #include <gtkmm/entry.h>
 #include <gtkmm/menu.h>
-#include <gtkmm/messagedialog.h>
+#include <gtkmm/cellrenderertext.h>
 
 #include "config.h"
 #include "NLS.h"
@@ -102,7 +102,15 @@
 	// Associate the columns model to the labels tree
 	m_refLabelsTree = ListStore::create(m_labelsColumns);
 	labelsTreeview->set_model(m_refLabelsTree);
-	labelsTreeview->append_column(_("Name"), m_labelsColumns.m_name);
+	TreeViewColumn *pColumn = new TreeViewColumn(_("Name"));
+	CellRendererText *pTextRenderer = new CellRendererText();
+	pTextRenderer->signal_edited().connect(sigc::mem_fun(*this, &prefsDialog::updateLabelRow));
+	pColumn->pack_start(*manage(pTextRenderer));
+	pColumn->set_cell_data_func(*pTextRenderer, sigc::mem_fun(*this, &prefsDialog::renderLabelNameColumn));
+	pColumn->add_attribute(pTextRenderer->property_text(), m_labelsColumns.m_name);
+	pColumn->set_resizable(true);
+	pColumn->set_sort_column(m_labelsColumns.m_name);
+	labelsTreeview->append_column(*manage(pColumn));
 	// Allow only single selection
 	labelsTreeview->get_selection()->set_mode(SELECTION_SINGLE);
 	populate_labelsTreeview();
@@ -716,3 +724,50 @@
 	populate_patternsTreeview(defaultPatterns, isBlackList);
 }
 
+void prefsDialog::updateLabelRow(const ustring &path_string, const ustring &text)
+{
+	Gtk::TreePath path(path_string);
+
+	// Get the row
+	TreeModel::iterator iter = m_refLabelsTree->get_iter(path);
+	if (iter)
+	{
+		TreeRow row = *iter;
+
+#ifdef DEBUG
+		cout << "prefsDialog::updateLabelRow: set label to " << text << endl;
+#endif
+		// Set the value of the name column
+		row.set_value(m_labelsColumns.m_name, (ustring)text);
+	}
+}
+
+void prefsDialog::renderLabelNameColumn(CellRenderer *pRenderer, const TreeModel::iterator &iter)
+{
+	TreeModel::Row row = *iter;
+
+	if (pRenderer == NULL)
+	{
+		return;
+	}
+
+	CellRendererText *pTextRenderer = dynamic_cast<CellRendererText*>(pRenderer);
+	if (pTextRenderer != NULL)
+	{
+		bool isNewLabel = false;
+
+		// Is this a new label ?
+		if (row[m_labelsColumns.m_enabled] == false)
+		{
+			isNewLabel = true;
+		}
+
+		// Set the editable property
+#ifdef GLIBMM_PROPERTIES_ENABLED
+		pTextRenderer->property_editable() = isNewLabel;
+#else
+		pTextRenderer->set_property("editable", isNewLabel);
+#endif
+	}
+}
+

Modified: trunk/UI/GTK2/src/prefsDialog.hh
===================================================================
--- trunk/UI/GTK2/src/prefsDialog.hh	2008-11-09 15:47:01 UTC (rev 1405)
+++ trunk/UI/GTK2/src/prefsDialog.hh	2008-11-11 14:19:58 UTC (rev 1406)
@@ -72,6 +72,9 @@
 	virtual void on_removePatternButton_clicked();
 	virtual void on_resetPatternsButton_clicked();
 
+	void updateLabelRow(const Glib::ustring &path_string, const Glib::ustring &text);
+	void renderLabelNameColumn(Gtk::CellRenderer *pRenderer, const Gtk::TreeModel::iterator &iter);
+
 	void attach_value_widgets(const std::string &name, const std::string &value, guint rowNumber);
 	void populate_proxyTypeCombobox();
 	void populate_labelsTreeview();



From fabricecolin at mail.berlios.de  Tue Nov 11 15:33:11 2008
From: fabricecolin at mail.berlios.de (fabricecolin at mail.berlios.de)
Date: Tue, 11 Nov 2008 15:33:11 +0100
Subject: [Pinot-svn] r1407 - trunk/UI/GTK2/src
Message-ID: <200811111433.mABEXBka026975@sheep.berlios.de>

Author: fabricecolin
Date: 2008-11-11 15:33:04 +0100 (Tue, 11 Nov 2008)
New Revision: 1407

Modified:
   trunk/UI/GTK2/src/WorkerThreads.cpp
Log:
LabelUpdateThread need not worry about updating My Web Pages' labels since they
are exclusively pulled from My Documents.


Modified: trunk/UI/GTK2/src/WorkerThreads.cpp
===================================================================
--- trunk/UI/GTK2/src/WorkerThreads.cpp	2008-11-11 14:19:58 UTC (rev 1406)
+++ trunk/UI/GTK2/src/WorkerThreads.cpp	2008-11-11 14:33:04 UTC (rev 1407)
@@ -1323,16 +1323,14 @@
 
 	if (actOnDocuments == false)
 	{
-		// Add labels
+		// Add and/or delete labels on the daemon's index only
+		// The documents index is not required to have labels set
 		for (set<string>::iterator iter = m_labelsToAdd.begin(); iter != m_labelsToAdd.end(); ++iter)
 		{
-			pDocsIndex->addLabel(*iter);
 			pDaemonIndex->addLabel(*iter);
 		}
-		// Delete labels
 		for (set<string>::iterator iter = m_labelsToDelete.begin(); iter != m_labelsToDelete.end(); ++iter)
 		{
-			pDocsIndex->deleteLabel(*iter);
 			pDaemonIndex->deleteLabel(*iter);
 		}
 	}



From fabricecolin at mail.berlios.de  Thu Nov 13 16:01:54 2008
From: fabricecolin at mail.berlios.de (fabricecolin at mail.berlios.de)
Date: Thu, 13 Nov 2008 16:01:54 +0100
Subject: [Pinot-svn] r1408 - trunk/UI/GTK2/src
Message-ID: <200811131501.mADF1sZH020735@sheep.berlios.de>

Author: fabricecolin
Date: 2008-11-13 16:01:48 +0100 (Thu, 13 Nov 2008)
New Revision: 1408

Modified:
   trunk/UI/GTK2/src/Notebook.cpp
   trunk/UI/GTK2/src/Notebook.h
Log:
Show spelling suggestions above the results list. A close button hides them
until other suggestions are available.


Modified: trunk/UI/GTK2/src/Notebook.cpp
===================================================================
--- trunk/UI/GTK2/src/Notebook.cpp	2008-11-11 14:33:04 UTC (rev 1407)
+++ trunk/UI/GTK2/src/Notebook.cpp	2008-11-13 15:01:48 UTC (rev 1408)
@@ -16,6 +16,7 @@
  *  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
  */
 
+#include <iostream>
 #include <gtkmm/rc.h>
 
 #include "config.h"
@@ -23,6 +24,7 @@
 #include "Notebook.h"
 #include "PinotUtils.h"
 
+using namespace std;
 using namespace Glib;
 using namespace Gtk;
 
@@ -60,7 +62,9 @@
 	NotebookPageBox(queryName, NotebookPageBox::RESULTS_PAGE, settings),
 	m_pLabel(NULL),
 	m_pCombobox(NULL),
-	m_pButton(NULL),
+	m_pYesButton(NULL),
+	m_pCloseImage(NULL),
+	m_pCloseButton(NULL),
 	m_pHBox(NULL),
 	m_pVBox(NULL),
 	m_pVPaned(NULL),
@@ -70,37 +74,47 @@
 	{
 		m_pLabel = manage(new Label(_("Did you mean ?")));
 		m_pCombobox = manage(new ComboBoxText());
-		m_pButton = manage(new Button(StockID("gtk-yes")));
+		m_pYesButton = manage(new Button(StockID("gtk-yes")));
+		m_pCloseImage = manage(new Image(StockID("gtk-close"), IconSize(ICON_SIZE_MENU)));
+		m_pCloseButton = manage(new Button());
 
+		m_pCloseImage->set_alignment(0, 0);
+		m_pCloseImage->set_padding(0, 0);
+		m_pCloseButton->set_relief(RELIEF_NONE);
+		m_pCloseButton->set_border_width(0);
+		m_pCloseButton->set_name("pinot-tab-close-button");
+		m_pCloseButton->set_tooltip_text(_("Close"));
+		m_pCloseButton->set_alignment(0, 0);
+		m_pCloseButton->add(*m_pCloseImage);
 		m_pHBox = manage(new HBox(false, 0));
 		m_pHBox->pack_start(*m_pLabel, Gtk::PACK_SHRINK, 4);
 		m_pHBox->pack_start(*m_pCombobox, Gtk::PACK_EXPAND_WIDGET, 4);
-		m_pHBox->pack_start(*m_pButton, Gtk::PACK_SHRINK, 4);
+		m_pHBox->pack_start(*m_pYesButton, Gtk::PACK_SHRINK, 4);
+		m_pHBox->pack_start(*m_pCloseButton, Gtk::PACK_SHRINK, 4);
 
 		m_pVBox = manage(new VBox(false, 0));
+		m_pVBox->pack_start(*m_pHBox, Gtk::PACK_SHRINK);
 		m_pVBox->pack_start(*pTree->getResultsScrolledWindow());
-		m_pVBox->pack_start(*m_pHBox, Gtk::PACK_SHRINK, 0);
 
 		m_pVPaned = manage(new VPaned());
 		m_pVPaned->set_flags(Gtk::CAN_FOCUS);
 		m_pVPaned->set_position(105);
 		m_pVPaned->pack1(*m_pVBox, Gtk::EXPAND|Gtk::SHRINK);
 		m_pVPaned->pack2(*pTree->getExtractScrolledWindow(), Gtk::SHRINK);
-		pack_start(*m_pVPaned, Gtk::PACK_EXPAND_WIDGET, 0);
+		pack_start(*m_pVPaned, Gtk::PACK_EXPAND_WIDGET);
 
 		// Give the extract 2/10th of the height
 		m_pVPaned->set_position((parentHeight * 8) / 10);
 
 		// Hide suggestions by default
-		m_pLabel->hide();
-		m_pCombobox->hide();
-		m_pButton->hide();
-		m_pHBox->hide();
+		onCloseButtonClicked();
 		m_pVBox->show();
 		m_pVPaned->show();
 
-		m_pButton->signal_clicked().connect(
-			sigc::mem_fun(*this, &ResultsPage::onButtonClicked), false);
+		m_pYesButton->signal_clicked().connect(
+			sigc::mem_fun(*this, &ResultsPage::onYesButtonClicked), false);
+		m_pCloseButton->signal_clicked().connect(
+			sigc::mem_fun(*this, &ResultsPage::onCloseButtonClicked), false);
 	}
 
 	show();
@@ -110,7 +124,7 @@
 {
 }
 
-void ResultsPage::onButtonClicked()
+void ResultsPage::onYesButtonClicked()
 {
 	if (m_pCombobox == NULL)
 	{
@@ -120,6 +134,17 @@
 	m_signalSuggest(m_title, m_pCombobox->get_active_text());
 }
 
+void ResultsPage::onCloseButtonClicked()
+{
+	// Just hide these
+	m_pLabel->hide();
+	m_pCombobox->hide();
+	m_pYesButton->hide();
+	m_pCloseImage->hide();
+	m_pCloseButton->hide();
+	m_pHBox->hide();
+}
+
 //
 // Returns the page's tree.
 //
@@ -139,16 +164,32 @@
 //
 void ResultsPage::appendSuggestion(const ustring &text)
 {
-	if (text.empty() == false)
+	if ((text.empty() == false) &&
+		(m_suggestions.find(text) == m_suggestions.end()))
 	{
+		ustring activeText(m_pCombobox->get_active_text());
+
+#ifdef DEBUG
+		cout << "ResultsPage::appendSuggestion: suggesting " << text << endl;
+#endif
+		m_suggestions.insert(text);
 		m_pCombobox->prepend_text(text);
-		m_pCombobox->set_active(0);
+		if (activeText.empty() == true)
+		{
+			m_pCombobox->set_active(0);
+		}
+		else
+		{
+			m_pCombobox->set_active_text(activeText);
+		}
+	}
 
-		m_pLabel->show();
-		m_pCombobox->show();
-		m_pButton->show();
-		m_pHBox->show();
-	}
+	m_pLabel->show();
+	m_pCombobox->show();
+	m_pYesButton->show();
+	m_pCloseImage->show();
+	m_pCloseButton->show();
+	m_pHBox->show();
 }
 
 bool NotebookTabBox::m_initialized = false;
@@ -157,9 +198,9 @@
 	HBox(),
 	m_title(title),
 	m_pageType(type),
-	m_tabLabel(NULL),
-	m_tabImage(NULL),
-	m_tabButton(NULL)
+	m_pTabLabel(NULL),
+	m_pTabImage(NULL),
+	m_pTabButton(NULL)
 {
 	if (m_initialized == false)
 	{
@@ -176,34 +217,34 @@
 			"widget \"*.pinot-tab-close-button\" style \"pinot-tab-close-button-style\"");
 	}
 
-	m_tabLabel = manage(new Label(title));
-	m_tabImage = manage(new Image(StockID("gtk-close"), IconSize(ICON_SIZE_MENU)));
-	m_tabButton = manage(new Button());
+	m_pTabLabel = manage(new Label(title));
+	m_pTabImage = manage(new Image(StockID("gtk-close"), IconSize(ICON_SIZE_MENU)));
+	m_pTabButton = manage(new Button());
 
-	m_tabLabel->set_alignment(0, 0.5);
-	m_tabLabel->set_padding(0, 0);
-	m_tabLabel->set_justify(JUSTIFY_LEFT);
-	m_tabLabel->set_line_wrap(false);
-	m_tabLabel->set_use_markup(false);
-	m_tabLabel->set_selectable(false);
-	m_tabImage->set_alignment(0, 0);
-	m_tabImage->set_padding(0, 0);
-	m_tabButton->set_relief(RELIEF_NONE);
-	m_tabButton->set_border_width(0);
-	m_tabButton->set_name("pinot-tab-close-button");
-	m_tabButton->set_tooltip_text(_("Close"));
-	m_tabButton->set_alignment(0, 0);
-	m_tabButton->add(*m_tabImage);
-	pack_start(*m_tabLabel);
-	pack_start(*m_tabButton, PACK_SHRINK);
+	m_pTabLabel->set_alignment(0, 0.5);
+	m_pTabLabel->set_padding(0, 0);
+	m_pTabLabel->set_justify(JUSTIFY_LEFT);
+	m_pTabLabel->set_line_wrap(false);
+	m_pTabLabel->set_use_markup(false);
+	m_pTabLabel->set_selectable(false);
+	m_pTabImage->set_alignment(0, 0);
+	m_pTabImage->set_padding(0, 0);
+	m_pTabButton->set_relief(RELIEF_NONE);
+	m_pTabButton->set_border_width(0);
+	m_pTabButton->set_name("pinot-tab-close-button");
+	m_pTabButton->set_tooltip_text(_("Close"));
+	m_pTabButton->set_alignment(0, 0);
+	m_pTabButton->add(*m_pTabImage);
+	pack_start(*m_pTabLabel);
+	pack_start(*m_pTabButton, PACK_SHRINK);
 	set_spacing(0);
 	set_homogeneous(false);
-	m_tabLabel->show();
-	m_tabImage->show();
-	m_tabButton->show();
+	m_pTabLabel->show();
+	m_pTabImage->show();
+	m_pTabButton->show();
 	show();
 
-	m_tabButton->signal_clicked().connect(
+	m_pTabButton->signal_clicked().connect(
 		sigc::mem_fun(*this, &NotebookTabBox::onButtonClicked));
 }
 

Modified: trunk/UI/GTK2/src/Notebook.h
===================================================================
--- trunk/UI/GTK2/src/Notebook.h	2008-11-11 14:33:04 UTC (rev 1407)
+++ trunk/UI/GTK2/src/Notebook.h	2008-11-13 15:01:48 UTC (rev 1408)
@@ -19,6 +19,7 @@
 #ifndef _NOTEBOOK_HH
 #define _NOTEBOOK_HH
 
+#include <set>
 #include <sigc++/sigc++.h>
 #include <glibmm/ustring.h>
 #include <gtkmm/box.h>
@@ -73,14 +74,18 @@
 	protected:
 		Gtk::Label *m_pLabel;
 		Gtk::ComboBoxText *m_pCombobox;
-		Gtk::Button *m_pButton;
+		Gtk::Button *m_pYesButton;
+		Gtk::Image *m_pCloseImage;
+		Gtk::Button *m_pCloseButton;
 		Gtk::HBox *m_pHBox;
 		Gtk::VBox *m_pVBox;
 		Gtk::VPaned *m_pVPaned;
 		ResultsTree *m_pTree;
 		sigc::signal2<void, Glib::ustring, Glib::ustring> m_signalSuggest;
+		std::set<Glib::ustring> m_suggestions;
+		void onYesButtonClicked();
 
-		void onButtonClicked();
+		void onCloseButtonClicked();
 
 };
 
@@ -97,9 +102,9 @@
 		static bool m_initialized;
 		Glib::ustring m_title;
 		NotebookPageBox::PageType m_pageType;
-		Gtk::Label *m_tabLabel;
-		Gtk::Image *m_tabImage;
-		Gtk::Button *m_tabButton;
+		Gtk::Label *m_pTabLabel;
+		Gtk::Image *m_pTabImage;
+		Gtk::Button *m_pTabButton;
 		sigc::signal2<void, Glib::ustring, NotebookPageBox::PageType> m_signalClose;
 
 		void onButtonClicked(void);



From fabricecolin at mail.berlios.de  Sat Nov 15 04:59:34 2008
From: fabricecolin at mail.berlios.de (fabricecolin at mail.berlios.de)
Date: Sat, 15 Nov 2008 04:59:34 +0100
Subject: [Pinot-svn] r1409 - in trunk: IndexSearch UI/GTK2/src
Message-ID: <200811150359.mAF3xYT2011343@sheep.berlios.de>

Author: fabricecolin
Date: 2008-11-15 04:59:05 +0100 (Sat, 15 Nov 2008)
New Revision: 1409

Modified:
   trunk/IndexSearch/OpenSearchParser.cpp
   trunk/IndexSearch/PluginWebEngine.cpp
   trunk/IndexSearch/PluginWebEngine.h
   trunk/IndexSearch/SherlockParser.cpp
   trunk/UI/GTK2/src/EnginesTree.cpp
   trunk/UI/GTK2/src/PinotSettings.cpp
Log:
Sorted out discrepancies between SearchPluginProperties ad ModuleProperties.


Modified: trunk/IndexSearch/OpenSearchParser.cpp
===================================================================
--- trunk/IndexSearch/OpenSearchParser.cpp	2008-11-13 15:01:48 UTC (rev 1408)
+++ trunk/IndexSearch/OpenSearchParser.cpp	2008-11-15 03:59:05 UTC (rev 1409)
@@ -1,5 +1,5 @@
 /*
- *  Copyright 2005,2006 Fabrice Colin
+ *  Copyright 2005-2008 Fabrice Colin
  *
  *  This program is free software; you can redistribute it and/or modify
  *  it under the terms of the GNU General Public License as published by
@@ -351,7 +351,8 @@
 
 				if (nodeName == "ShortName")
 				{
-					properties.m_name = nodeContent;
+					// Ignore LongName, use this as long name
+					properties.m_longName = nodeContent;
 				}
 				else if (nodeName == "Url")
 				{
@@ -521,10 +522,6 @@
 					// This is supposed to be a space-delimited list, but use the whole thing as channel
 					properties.m_channel = nodeContent;
 				}
-				else if (nodeName == "LongName")
-				{
-					properties.m_longName = nodeContent;
-				}
 				else if (nodeName == "Language")
 				{
 					properties.m_languages.insert(nodeContent);

Modified: trunk/IndexSearch/PluginWebEngine.cpp
===================================================================
--- trunk/IndexSearch/PluginWebEngine.cpp	2008-11-13 15:01:48 UTC (rev 1408)
+++ trunk/IndexSearch/PluginWebEngine.cpp	2008-11-15 03:59:05 UTC (rev 1409)
@@ -1,5 +1,5 @@
 /*
- *  Copyright 2005,2006 Fabrice Colin
+ *  Copyright 2005-2008 Fabrice Colin
  *
  *  This program is free software; you can redistribute it and/or modify
  *  it under the terms of the GNU General Public License as published by
@@ -57,7 +57,8 @@
 		return;
 	}
 
-	PluginParserInterface *pParser = getPluginParser(fileName);
+	string pluginType;
+	PluginParserInterface *pParser = getPluginParser(fileName, pluginType);
 	if (pParser == NULL)
 	{
 		return;
@@ -137,7 +138,8 @@
 	return success;
 }
 
-PluginParserInterface *PluginWebEngine::getPluginParser(const string &fileName)
+PluginParserInterface *PluginWebEngine::getPluginParser(const string &fileName,
+	string &pluginType)
 {
 	if (fileName.empty() == true)
 	{
@@ -157,12 +159,14 @@
 #ifdef HAVE_BOOST_SPIRIT_CORE_HPP
 	if (strncasecmp(extension.c_str(), "src", 3) == 0)
 	{
+		pluginType = "sherlock";
 		return new SherlockParser(fileName);
 	}
 	else
 #endif
 	if (strncasecmp(extension.c_str(), "xml", 3) == 0)
 	{
+		pluginType = "opensearch";
 		return new OpenSearchParser(fileName);
 	}
 
@@ -176,7 +180,8 @@
 		return false;
 	}
 
-	PluginParserInterface *pParser = getPluginParser(fileName);
+	properties.m_option = fileName;
+	PluginParserInterface *pParser = getPluginParser(fileName, properties.m_name);
 	if (pParser == NULL)
 	{
 		return false;

Modified: trunk/IndexSearch/PluginWebEngine.h
===================================================================
--- trunk/IndexSearch/PluginWebEngine.h	2008-11-13 15:01:48 UTC (rev 1408)
+++ trunk/IndexSearch/PluginWebEngine.h	2008-11-15 03:59:05 UTC (rev 1409)
@@ -1,5 +1,5 @@
 /*
- *  Copyright 2005,2006 Fabrice Colin
+ *  Copyright 2005-2008 Fabrice Colin
  *
  *  This program is free software; you can redistribute it and/or modify
  *  it under the terms of the GNU General Public License as published by
@@ -47,7 +47,8 @@
 
 		bool getPage(const std::string &formattedQuery, unsigned int maxResultsCount);
 
-		static PluginParserInterface *getPluginParser(const std::string &fileName);
+		static PluginParserInterface *getPluginParser(const std::string &fileName,
+			std::string &pluginType);
 
 	private:
 		PluginWebEngine(const PluginWebEngine &other);

Modified: trunk/IndexSearch/SherlockParser.cpp
===================================================================
--- trunk/IndexSearch/SherlockParser.cpp	2008-11-13 15:01:48 UTC (rev 1408)
+++ trunk/IndexSearch/SherlockParser.cpp	2008-11-15 03:59:05 UTC (rev 1409)
@@ -1,5 +1,5 @@
 /*
- *  Copyright 2005,2006 Fabrice Colin
+ *  Copyright 2005-2008 Fabrice Colin
  *
  *  This program is free software; you can redistribute it and/or modify
  *  it under the terms of the GNU General Public License as published by
@@ -524,7 +524,7 @@
 		map<string, string>::iterator mapIter = lowSearchParams.find("name");
 		if (mapIter != lowSearchParams.end())
 		{
-			properties.m_name = mapIter->second;
+			properties.m_longName = mapIter->second;
 		}
 
 		// Channel

Modified: trunk/UI/GTK2/src/EnginesTree.cpp
===================================================================
--- trunk/UI/GTK2/src/EnginesTree.cpp	2008-11-13 15:01:48 UTC (rev 1408)
+++ trunk/UI/GTK2/src/EnginesTree.cpp	2008-11-15 03:59:05 UTC (rev 1409)
@@ -310,16 +310,11 @@
 
 			row[m_enginesColumns.m_name] = to_utf8(engineName);
 			row[m_enginesColumns.m_engineName] = to_utf8(engineType);
-			// Is this a Sherlock engine ?
-			if (engineType == "sherlock")
-			{
-				row[m_enginesColumns.m_option] = engineIter->m_option;
-			}
-			else
-			{
-				row[m_enginesColumns.m_option] = "";
-			}
+			row[m_enginesColumns.m_option] = engineIter->m_option;
 			row[m_enginesColumns.m_type] = EnginesModelColumns::WEB_ENGINE;
+#ifdef DEBUG
+			cout << "EnginesTree::populate: engine " << engineName << "/" << engineType << " at " << engineIter->m_option << endl;
+#endif
 		}
 
 		TreeModel::Path folderPath = m_refStore->get_path(folderIter);

Modified: trunk/UI/GTK2/src/PinotSettings.cpp
===================================================================
--- trunk/UI/GTK2/src/PinotSettings.cpp	2008-11-13 15:01:48 UTC (rev 1408)
+++ trunk/UI/GTK2/src/PinotSettings.cpp	2008-11-15 03:59:05 UTC (rev 1409)
@@ -1336,14 +1336,16 @@
 				SearchPluginProperties properties;
 
 				if ((PluginWebEngine::getDetails(location, properties) == true) &&
-					(properties.m_name.empty() == false))
+					(properties.m_name.empty() == false) &&
+					(properties.m_longName.empty() == false))
 				{
-					m_engineIds[1 << m_engines.size()] = properties.m_name;
+					m_engineIds[1 << m_engines.size()] = properties.m_longName;
 					if (properties.m_channel.empty() == true)
 					{
 						properties.m_channel = _("Unclassified");
 					}
-					m_engines.insert(ModuleProperties("sherlock", properties.m_name, location, properties.m_channel));
+					// SearchPluginProperties derives ModuleProperties
+					m_engines.insert(properties);
 					m_engineChannels.insert(pair<string, bool>(properties.m_channel, true));
 
 					// Any editable parameters in this plugin ?
@@ -1354,6 +1356,7 @@
 					}
 #ifdef DEBUG
 					cout << "PinotSettings::loadSearchEngines: " << properties.m_name
+						<< ", " << properties.m_longName << ", " << properties.m_option
 						<< " has " << properties.m_editableParameters.size() << " editable values" << endl;
 #endif
 				}
@@ -1751,6 +1754,7 @@
 unsigned int PinotSettings::getEngineId(const string &name)
 {
 	unsigned int engineId = 0;
+
 	for (map<unsigned int, string>::iterator mapIter = m_engineIds.begin();
 		mapIter != m_engineIds.end(); ++mapIter)
 	{
@@ -1760,6 +1764,9 @@
 			break;
 		}
 	}
+#ifdef DEBUG
+	cout << "PinotSettings::getEngineId: " << name << ", ID " << engineId << endl;
+#endif
 
 	return engineId;
 }



From fabricecolin at mail.berlios.de  Sat Nov 15 07:23:44 2008
From: fabricecolin at mail.berlios.de (fabricecolin at mail.berlios.de)
Date: Sat, 15 Nov 2008 07:23:44 +0100
Subject: [Pinot-svn] r1410 - trunk/UI/GTK2/src
Message-ID: <200811150623.mAF6Ni2P018743@sheep.berlios.de>

Author: fabricecolin
Date: 2008-11-15 07:23:35 +0100 (Sat, 15 Nov 2008)
New Revision: 1410

Modified:
   trunk/UI/GTK2/src/ServerThreads.cpp
   trunk/UI/GTK2/src/WorkerThreads.cpp
   trunk/UI/GTK2/src/WorkerThreads.h
   trunk/UI/GTK2/src/pinot-dbus-daemon.xml
Log:
Fixed default engine parameters supported by Query.
If EngineQueryThread can't find the requested engine, it looks for a plugin
that matches the given name and use that instead.


Modified: trunk/UI/GTK2/src/ServerThreads.cpp
===================================================================
--- trunk/UI/GTK2/src/ServerThreads.cpp	2008-11-15 03:59:05 UTC (rev 1409)
+++ trunk/UI/GTK2/src/ServerThreads.cpp	2008-11-15 06:23:35 UTC (rev 1410)
@@ -1176,32 +1176,20 @@
 				string engineType, engineOption;
 
 				// Provide reasonable defaults 
-				if ((pEngineType == NULL) ||
-					(strlen(pEngineType) == 0))
+				if (((pEngineType == NULL) || (strlen(pEngineType) == 0)) &&
+					((pEngineOption == NULL) || (strlen(pEngineOption) == 0)))
 				{
 					engineType = settings.m_defaultBackend;
+					engineOption = settings.m_daemonIndexLocation;
 				}
 				else
 				{
 					engineType = pEngineType;
-				}
-				if ((pEngineOption == NULL) ||
-					(strlen(pEngineOption) == 0))
-				{
-					if (engineType == settings.m_defaultBackend)
-					{
-						// This wouldn't make sense with any other engine type
-						engineOption = settings.m_daemonIndexLocation;
-					}
-				}
-				else
-				{
 					engineOption = pEngineOption;
 				}
 
-				m_pServletInfo->m_pThread = new EngineQueryThread(pEngineType,
-					engineType, engineOption,
-					queryProps, startDoc);
+				m_pServletInfo->m_pThread = new EngineQueryThread(engineType,
+					engineType, engineOption, queryProps, startDoc);
 			}
 
 			if (replyWithError == true)

Modified: trunk/UI/GTK2/src/WorkerThreads.cpp
===================================================================
--- trunk/UI/GTK2/src/WorkerThreads.cpp	2008-11-15 03:59:05 UTC (rev 1409)
+++ trunk/UI/GTK2/src/WorkerThreads.cpp	2008-11-15 06:23:35 UTC (rev 1410)
@@ -874,6 +874,10 @@
 	m_correctedSpelling(false),
 	m_isLive(true)
 {
+#ifdef DEBUG
+	cout << "QueryingThread: engine " << m_engineName << ", " << m_engineOption
+		<< ", mode " << m_listingIndex << endl;
+#endif
 }
 
 QueryingThread::~QueryingThread()
@@ -911,15 +915,61 @@
 	return m_resultsCharset;
 }
 
+bool QueryingThread::findPlugin(void)
+{
+	string pluginName;
+
+	if ((m_engineName.empty() == true) &&
+		(m_engineOption.empty() == false))
+	{
+		pluginName = m_engineOption;
+	}
+	else if ((m_engineName.empty() == false) &&
+		(m_engineOption.empty() == true))
+	{
+		pluginName = m_engineName;
+	}
+
+	if (pluginName.empty() == false)
+	{
+		set<ModuleProperties> engines;
+		PinotSettings::getInstance().getSearchEngines(engines, "");
+#ifdef DEBUG
+		cout << "QueryingThread::findPlugin: looking for a plugin named " << pluginName << endl;
+#endif
+
+		// Is there a plugin with such a name ?
+		ModuleProperties modProps("sherlock", pluginName, "", "");
+		set<ModuleProperties>::const_iterator engineIter = engines.find(modProps);
+		if (engineIter == engines.end())
+		{
+			// Try again
+			modProps.m_name = "opensearch";
+			engineIter = engines.find(modProps);
+		}
+
+		if (engineIter != engines.end())
+		{
+			// Yes, there is !
+			m_engineName = engineIter->m_name;
+			m_engineDisplayableName = engineIter->m_longName;
+			m_engineOption = engineIter->m_option;
+#ifdef DEBUG
+			cout << "QueryingThread::findPlugin: found " << m_engineName << ", " << m_engineDisplayableName << ", " << m_engineOption << endl;
+#endif
+
+			return true;
+		}
+	}
+
+	return false;
+}
+
 EngineQueryThread::EngineQueryThread(const string &engineName, const string &engineDisplayableName,
 	const string &engineOption, const QueryProperties &queryProps,
 	unsigned int startDoc, bool listingIndex) :
 	QueryingThread(engineName, engineDisplayableName, engineOption, queryProps, startDoc, listingIndex)
 {
-#ifdef DEBUG
-	cout << "EngineQueryThread::EngineQueryThread: engine " << m_engineName << ", " << m_engineOption
-		<< ", mode " << m_listingIndex << endl;
-#endif
 }
 
 EngineQueryThread::EngineQueryThread(const string &engineName, const string &engineDisplayableName,
@@ -929,10 +979,6 @@
 {
 	copy(limitToDocsSet.begin(), limitToDocsSet.end(),
 		inserter(m_limitToDocsSet, m_limitToDocsSet.begin()));
-#ifdef DEBUG
-	cout << "EngineQueryThread::EngineQueryThread: engine " << m_engineName << ", " << m_engineOption
-		<< ", limited to " << m_limitToDocsSet.size() << " documents" << endl;
-#endif
 }
 
 EngineQueryThread::~EngineQueryThread()
@@ -1073,9 +1119,18 @@
 	SearchEngineInterface *pEngine = ModuleFactory::getSearchEngine(m_engineName, m_engineOption);
 	if (pEngine == NULL)
 	{
-		m_errorNum = UNKNOWN_ENGINE;
-		m_errorParam = m_engineDisplayableName;
-		return;
+		// Try again
+		if (findPlugin() == true)
+		{
+			pEngine = ModuleFactory::getSearchEngine(m_engineName, m_engineOption);
+		}
+
+		if (pEngine == NULL)
+		{
+			m_errorNum = UNKNOWN_ENGINE;
+			m_errorParam = m_engineDisplayableName;
+			return;
+		}
 	}
 
 	// Set up the proxy
@@ -1155,9 +1210,6 @@
 	QueryingThread("", engineDisplayableName, "", queryProps, 0, false),
 	m_maxDocsCount(maxDocsCount)
 {
-#ifdef DEBUG
-	cout << "EngineHistoryThread::EngineHistoryThread: engine " << m_engineDisplayableName << endl;
-#endif
 	// Results are converted to UTF-8 prior to insertion in the history database
 	m_resultsCharset = "UTF-8";
 	m_isLive = false;

Modified: trunk/UI/GTK2/src/WorkerThreads.h
===================================================================
--- trunk/UI/GTK2/src/WorkerThreads.h	2008-11-15 03:59:05 UTC (rev 1409)
+++ trunk/UI/GTK2/src/WorkerThreads.h	2008-11-15 06:23:35 UTC (rev 1410)
@@ -244,6 +244,8 @@
 		bool m_correctedSpelling;
 		bool m_isLive;
 
+		bool findPlugin(void);
+
 	private:
 		QueryingThread(const QueryingThread &other);
 		QueryingThread &operator=(const QueryingThread &other);

Modified: trunk/UI/GTK2/src/pinot-dbus-daemon.xml
===================================================================
--- trunk/UI/GTK2/src/pinot-dbus-daemon.xml	2008-11-15 03:59:05 UTC (rev 1409)
+++ trunk/UI/GTK2/src/pinot-dbus-daemon.xml	2008-11-15 06:23:35 UTC (rev 1410)
@@ -136,8 +136,8 @@
     </method>
     <!--
 	Queries the index.
-	 engineType : engine type. See pinot-search(1) for a list of supported types
-	 engineName : engine name. See pinot-search(1) for examples
+	 engineType : engine type (defaults to "xapian"). See pinot-search(1) for a list of supported types
+	 engineName : engine name (defaults to "~/.pinot/daemon"). See pinot-search(1) for examples
 	 searchText : search text, as would be entered in Pinot's live query field
 	 startDoc: the first result to return, starting from 0
 	 maxHits: the maximum number of hits desired



From fabricecolin at mail.berlios.de  Sat Nov 15 08:25:01 2008
From: fabricecolin at mail.berlios.de (fabricecolin at mail.berlios.de)
Date: Sat, 15 Nov 2008 08:25:01 +0100
Subject: [Pinot-svn] r1411 - trunk/scripts/python
Message-ID: <200811150725.mAF7P1lT009790@sheep.berlios.de>

Author: fabricecolin
Date: 2008-11-15 08:24:39 +0100 (Sat, 15 Nov 2008)
New Revision: 1411

Modified:
   trunk/scripts/python/pinot-module.py
Log:
Modified to use the new D-Bus method Query, instead of SimpleQuery.
Be ready to catch AttributeError on set_snippet() (deskbar < v2.24).


Modified: trunk/scripts/python/pinot-module.py
===================================================================
--- trunk/scripts/python/pinot-module.py	2008-11-15 06:23:35 UTC (rev 1410)
+++ trunk/scripts/python/pinot-module.py	2008-11-15 07:24:39 UTC (rev 1411)
@@ -23,6 +23,7 @@
 from deskbar.handlers.actions.ActionsFactory import get_actions_for_uri
 import gobject
 from gettext import gettext as _
+import dbus
 
 HANDLERS = ['PinotFileSearchModule']
 
@@ -62,8 +63,11 @@
 				tmp = re.sub(r"<.*?>", "", snippet)
 				tmp = re.sub(r"</.*?>", "", tmp)
 				print 'Extract ', tmp
-				self.set_snippet("\n%s" % cgi.escape(tmp))
-        
+				try:
+					self.set_snippet("\n%s" % cgi.escape(tmp))
+				except AttributeError:
+					print 'Snippets not available'
+
 		if url_scheme == "file":
 			print 'File hit'
 			self.add_action(OpenFileAction(self.result["caption"], self.result["url"]))
@@ -99,7 +103,6 @@
 	@staticmethod
 	def has_prerequisites ():
 		try:
-			import dbus
 			try :
 				if getattr(dbus, 'version', (0,0,0)) >= (0,41,0):
 					import dbus.glib
@@ -130,7 +133,6 @@
 
 	def initialize(self):
 		try:
-			import dbus
 			print 'First time connection'
 			self.bus = dbus.SessionBus()
 			self.proxy_obj = self.bus.get_object('de.berlios.Pinot', '/de/berlios/Pinot')
@@ -141,9 +143,9 @@
 			print 'Caught unexpected exception'
 
 	def query (self, qstring):
-		print "SimpleQuery: ", qstring
-		doc_ids = []
+		print "Query: ", qstring
 		max = 10
+		estimated_hits = 0
 		# Do we need to set up the dbus connection ?
 		if self.pinot_iface:
 			try:
@@ -154,7 +156,6 @@
 				self.pinot_iface = None
 		if not self.pinot_iface:
 			try:
-				import dbus
 				print 'Connecting'
 				self.bus = dbus.SessionBus()
 				self.proxy_obj = self.bus.get_object('de.berlios.Pinot', '/de/berlios/Pinot')
@@ -165,22 +166,22 @@
 				print 'Caught unexpected exception'
 				return
 		# Run the query
+		hits_list = dbus.Array([], signature='aa{ss}') 
 		try :
-			import dbus
-			print 'Querying'
-			doc_ids = self.pinot_iface.SimpleQuery(qstring, dbus.UInt32(max))
+			print 'Querying default engine'
+			(estimated_hits, hits_list) = self.pinot_iface.Query('', '', qstring,
+				dbus.UInt32(0), dbus.UInt32(max))
 		except Exception, msg:
-			print 'Caught exception (SimpleQuery): ', msg
+			print 'Caught exception (Query): ', msg
 		# Save the query's details
 		self.query_string = qstring
 		self.matches = []
-		self.matches_count = len(doc_ids)
+		self.matches_count = len(hits_list)
 		try :
+			print 'Got ', self.matches_count, ' hits off ', estimated_hits
 			# Get the details of each hit
-			for doc_id in doc_ids:
-				print 'Hit on document ', doc_id
-				self.pinot_iface.GetDocumentInfo (dbus.UInt32(doc_id),
-					reply_handler=self.__receive_hits, error_handler=self.__receive_error)
+			for hit in hits_list:
+				self.__receive_hits(hit)
 		except Exception, msg:
 			print 'Caught exception (GetDocumentInfo): ', msg
 
@@ -199,6 +200,3 @@
 		if len(self.matches) == self.matches_count:
 			self._emit_query_ready(self.query_string, self.matches)
 
-	def __receive_error (self, error):
-		print 'D-Bus error: ', error
-



From fabricecolin at mail.berlios.de  Sun Nov 16 15:10:10 2008
From: fabricecolin at mail.berlios.de (fabricecolin at mail.berlios.de)
Date: Sun, 16 Nov 2008 15:10:10 +0100
Subject: [Pinot-svn] r1412 - in trunk/IndexSearch: . Xapian
Message-ID: <200811161410.mAGEAAtY004205@sheep.berlios.de>

Author: fabricecolin
Date: 2008-11-16 15:09:49 +0100 (Sun, 16 Nov 2008)
New Revision: 1412

Modified:
   trunk/IndexSearch/Xapian/XapianEngine.cpp
   trunk/IndexSearch/pinot-search.cpp
Log:
Added a -l/--locationnly parameter to pinot-search that makes it display only
the results' location.
In XapianEngine, XPATH: shouldn't be a boolean prefix.


Modified: trunk/IndexSearch/Xapian/XapianEngine.cpp
===================================================================
--- trunk/IndexSearch/Xapian/XapianEngine.cpp	2008-11-15 07:24:39 UTC (rev 1411)
+++ trunk/IndexSearch/Xapian/XapianEngine.cpp	2008-11-16 14:09:49 UTC (rev 1412)
@@ -593,7 +593,7 @@
 	parser.add_prefix("title", "S");
 	parser.add_boolean_prefix("url", "U");
 	parser.add_boolean_prefix("dir", "XDIR:");
-	parser.add_boolean_prefix("path", "XPATH:");
+	parser.add_prefix("path", "XPATH:");
 	parser.add_boolean_prefix("lang", "L");
 	parser.add_boolean_prefix("type", "T");
 	parser.add_boolean_prefix("class", "XCLASS:");

Modified: trunk/IndexSearch/pinot-search.cpp
===================================================================
--- trunk/IndexSearch/pinot-search.cpp	2008-11-15 07:24:39 UTC (rev 1411)
+++ trunk/IndexSearch/pinot-search.cpp	2008-11-16 14:09:49 UTC (rev 1412)
@@ -37,6 +37,7 @@
 static struct option g_longOptions[] = {
 	{"datefirst", 0, 0, 'd'},
 	{"help", 0, 0, 'h'},
+	{"locationonly", 0, 0, 'l'},
 	{"max", 1, 0, 'm'},
 	{"proxyaddress", 1, 0, 'a'},
 	{"proxyport", 1, 0, 'p'},
@@ -92,6 +93,7 @@
 		<< "Options:\n"
 		<< "  -d, --datefirst           sort by date then by relevance\n"
 		<< "  -h, --help                display this help and exit\n"
+		<< "  -l, --locationonly        only show the location of each result\n"
 		<< "  -m, --max                 maximum number of results (default 10)\n"
 		<< "  -a, --proxyaddress        proxy address\n"
 		<< "  -p, --proxyport           proxy port\n"
@@ -127,9 +129,10 @@
 	int longOptionIndex = 0;
 	bool printResults = true;
 	bool sortByDate = false;
+	bool locationOnly = false;
 
 	// Look at the options
-	int optionChar = getopt_long(argc, argv, "c:dhm:a:e:p:qs:t:uvx:", g_longOptions, &longOptionIndex);
+	int optionChar = getopt_long(argc, argv, "a:c:de:hlm:p:qs:t:uvx:", g_longOptions, &longOptionIndex);
 	while (optionChar != -1)
 	{
 		switch (optionChar)
@@ -140,6 +143,13 @@
 					proxyAddress = optarg;
 				}
 				break;
+			case 'c':
+				if (optarg != NULL)
+				{
+					csvExport = optarg;
+					printResults = false;
+				}
+				break;
 			case 'd':
 				sortByDate = true;
 				break;
@@ -149,16 +159,12 @@
 					editableParameter = optarg;
 				}
 				break;
-			case 'c':
-				if (optarg != NULL)
-				{
-					csvExport = optarg;
-					printResults = false;
-				}
-				break;
 			case 'h':
 				printHelp();
 				return EXIT_SUCCESS;
+			case 'l':
+				locationOnly = true;
+				break;
 			case 'm':
 				if (optarg != NULL)
 				{
@@ -207,7 +213,7 @@
 		}
 
 		// Next option
-		optionChar = getopt_long(argc, argv, "c:dhm:a:e:p:qs:t:uvx:", g_longOptions, &longOptionIndex);
+		optionChar = getopt_long(argc, argv, "a:c:de:hlm:p:qs:t:uvx:", g_longOptions, &longOptionIndex);
 	}
 
 	if (argc == 1)
@@ -328,25 +334,30 @@
 			{
 				unsigned int count = 0;
 
-				cout << "Matching documents are :" << endl;
-
 				vector<DocumentInfo>::const_iterator resultIter = resultsList.begin();
 				while (resultIter != resultsList.end())
 				{
 					string rawUrl(resultIter->getLocation());
 
-					cout << count << " Location : '" << rawUrl << "'"<< endl;
-					cout << count << " Title    : " << resultIter->getTitle() << endl;
-					cout << count << " Type     : " << resultIter->getType() << endl;
-					cout << count << " Language : " << resultIter->getLanguage() << endl;
-					cout << count << " Date     : " << resultIter->getTimestamp() << endl;
-					cout << count << " Size     : " << resultIter->getSize() << endl;
-					cout << count << " Extract  : " << resultIter->getExtract() << endl;
-					cout << count << " Score    : " << resultIter->getScore() << endl;
-					count++;
+					if (locationOnly == false)
+					{
+						cout << count << " Location : '" << rawUrl << "'"<< endl;
+						cout << count << " Title    : " << resultIter->getTitle() << endl;
+						cout << count << " Type     : " << resultIter->getType() << endl;
+						cout << count << " Language : " << resultIter->getLanguage() << endl;
+						cout << count << " Date     : " << resultIter->getTimestamp() << endl;
+						cout << count << " Size     : " << resultIter->getSize() << endl;
+						cout << count << " Extract  : " << resultIter->getExtract() << endl;
+						cout << count << " Score    : " << resultIter->getScore() << endl;
+					}
+					else
+					{
+						cout << rawUrl << endl;
+					}
+					++count;
 
 					// Next
-					resultIter++;
+					++resultIter;
 				}
 			}
 			else



From fabricecolin at mail.berlios.de  Sun Nov 16 15:12:49 2008
From: fabricecolin at mail.berlios.de (fabricecolin at mail.berlios.de)
Date: Sun, 16 Nov 2008 15:12:49 +0100
Subject: [Pinot-svn] r1413 - trunk/UI/GTK2/src
Message-ID: <200811161412.mAGECnsl004879@sheep.berlios.de>

Author: fabricecolin
Date: 2008-11-16 15:12:42 +0100 (Sun, 16 Nov 2008)
New Revision: 1413

Modified:
   trunk/UI/GTK2/src/pinot-dbus-daemon.cc
   trunk/UI/GTK2/src/pinot-dbus-daemon.xml
Log:
The daemon'd better call loadSearchEngines() for Query to offer access to the
same engines as the UI.
Fixed typo in the XML description file.


Modified: trunk/UI/GTK2/src/pinot-dbus-daemon.cc
===================================================================
--- trunk/UI/GTK2/src/pinot-dbus-daemon.cc	2008-11-16 14:09:49 UTC (rev 1412)
+++ trunk/UI/GTK2/src/pinot-dbus-daemon.cc	2008-11-16 14:12:42 UTC (rev 1413)
@@ -459,6 +459,9 @@
 	Languages::setIntlName(14, _("Swedish"));
 	Languages::setIntlName(15, _("Turkish"));
 
+	// Load search engines
+	settings.loadSearchEngines(prefixDir + "/share/pinot/engines");
+	settings.loadSearchEngines(confDirectory + "/engines");
 	// Load the settings
 	settings.loadGlobal(string(SYSCONFDIR) + "/pinot/globalconfig.xml");
 	settings.load();

Modified: trunk/UI/GTK2/src/pinot-dbus-daemon.xml
===================================================================
--- trunk/UI/GTK2/src/pinot-dbus-daemon.xml	2008-11-16 14:09:49 UTC (rev 1412)
+++ trunk/UI/GTK2/src/pinot-dbus-daemon.xml	2008-11-16 14:12:42 UTC (rev 1413)
@@ -145,7 +145,7 @@
 	 hitsList: hit properties
 	-->
     <method name="Query">
-      <annotation name="de.berlios.Pinot.SimpleQuery" value="pinotDBus"/>
+      <annotation name="de.berlios.Pinot.Query" value="pinotDBus"/>
       <arg type="s" name="engineType" direction="in" />
       <arg type="s" name="engineName" direction="in" />
       <arg type="s" name="searchText" direction="in" />



From fabricecolin at mail.berlios.de  Wed Nov 19 14:24:52 2008
From: fabricecolin at mail.berlios.de (fabricecolin at mail.berlios.de)
Date: Wed, 19 Nov 2008 14:24:52 +0100
Subject: [Pinot-svn] r1414 - in trunk/UI/GTK2: . src
Message-ID: <200811191324.mAJDOqvg011422@sheep.berlios.de>

Author: fabricecolin
Date: 2008-11-19 14:24:34 +0100 (Wed, 19 Nov 2008)
New Revision: 1414

Added:
   trunk/UI/GTK2/src/prefsWindow.cc
   trunk/UI/GTK2/src/prefsWindow.hh
   trunk/UI/GTK2/src/prefsWindow_glade.cc
   trunk/UI/GTK2/src/prefsWindow_glade.hh
Removed:
   trunk/UI/GTK2/src/prefsDialog.cc
   trunk/UI/GTK2/src/prefsDialog.hh
   trunk/UI/GTK2/src/prefsDialog_glade.cc
   trunk/UI/GTK2/src/prefsDialog_glade.hh
Modified:
   trunk/UI/GTK2/metase-gtk2.glade
Log:
Preferences is now a separate, independant window.


Modified: trunk/UI/GTK2/metase-gtk2.glade
===================================================================
--- trunk/UI/GTK2/metase-gtk2.glade	2008-11-16 14:12:42 UTC (rev 1413)
+++ trunk/UI/GTK2/metase-gtk2.glade	2008-11-19 13:24:34 UTC (rev 1414)
@@ -915,1301 +915,6 @@
   </child>
 </widget>
 
-<widget class="GtkDialog" id="prefsDialog">
-  <property agent="glademm" name="cxx_visibility">public</property>
-  <property name="visible">True</property>
-  <property name="title" translatable="yes">Preferences</property>
-  <property name="type">GTK_WINDOW_TOPLEVEL</property>
-  <property name="window_position">GTK_WIN_POS_NONE</property>
-  <property name="modal">False</property>
-  <property name="resizable">True</property>
-  <property name="destroy_with_parent">False</property>
-  <property name="decorated">True</property>
-  <property name="skip_taskbar_hint">False</property>
-  <property name="skip_pager_hint">False</property>
-  <property name="type_hint">GDK_WINDOW_TYPE_HINT_NORMAL</property>
-  <property name="gravity">GDK_GRAVITY_NORTH_WEST</property>
-  <property name="focus_on_map">True</property>
-  <property name="urgency_hint">False</property>
-  <property name="has_separator">True</property>
-
-  <child internal-child="vbox">
-    <widget class="GtkVBox" id="dialog-vbox2">
-      <property name="visible">True</property>
-      <property name="homogeneous">False</property>
-      <property name="spacing">0</property>
-
-      <child internal-child="action_area">
-	<widget class="GtkHButtonBox" id="dialog-action_area2">
-	  <property name="visible">True</property>
-	  <property name="layout_style">GTK_BUTTONBOX_END</property>
-
-	  <child>
-	    <widget class="GtkButton" id="prefsCancelbutton">
-	      <property agent="glademm" name="cxx_visibility">protected</property>
-	      <property name="visible">True</property>
-	      <property name="can_default">True</property>
-	      <property name="can_focus">True</property>
-	      <property name="label">gtk-cancel</property>
-	      <property name="use_stock">True</property>
-	      <property name="relief">GTK_RELIEF_NORMAL</property>
-	      <property name="focus_on_click">True</property>
-	      <property name="response_id">-6</property>
-	    </widget>
-	  </child>
-
-	  <child>
-	    <widget class="GtkButton" id="prefsOkbutton">
-	      <property agent="glademm" name="cxx_visibility">protected</property>
-	      <property name="visible">True</property>
-	      <property name="can_default">True</property>
-	      <property name="can_focus">True</property>
-	      <property name="label">gtk-ok</property>
-	      <property name="use_stock">True</property>
-	      <property name="relief">GTK_RELIEF_NORMAL</property>
-	      <property name="focus_on_click">True</property>
-	      <property name="response_id">-5</property>
-	      <signal name="clicked" handler="on_prefsOkbutton_clicked" last_modification_time="Sun, 22 Jun 2003 17:37:34 GMT"/>
-	    </widget>
-	  </child>
-	</widget>
-	<packing>
-	  <property name="padding">0</property>
-	  <property name="expand">False</property>
-	  <property name="fill">True</property>
-	  <property name="pack_type">GTK_PACK_END</property>
-	</packing>
-      </child>
-
-      <child>
-	<widget class="GtkNotebook" id="prefsNotebook">
-	  <property agent="glademm" name="cxx_visibility">protected</property>
-	  <property name="visible">True</property>
-	  <property name="can_focus">True</property>
-	  <property name="show_tabs">True</property>
-	  <property name="show_border">True</property>
-	  <property name="tab_pos">GTK_POS_TOP</property>
-	  <property name="scrollable">False</property>
-	  <property name="enable_popup">False</property>
-
-	  <child>
-	    <widget class="GtkTable" id="generalTable">
-	      <property agent="glademm" name="cxx_visibility">protected</property>
-	      <property name="visible">True</property>
-	      <property name="n_rows">4</property>
-	      <property name="n_columns">2</property>
-	      <property name="homogeneous">False</property>
-	      <property name="row_spacing">0</property>
-	      <property name="column_spacing">0</property>
-
-	      <child>
-		<widget class="GtkLabel" id="apiKeyLabel">
-		  <property agent="glademm" name="cxx_visibility">protected</property>
-		  <property name="visible">True</property>
-		  <property name="label" translatable="yes">Google API key:</property>
-		  <property name="use_underline">False</property>
-		  <property name="use_markup">False</property>
-		  <property name="justify">GTK_JUSTIFY_LEFT</property>
-		  <property name="wrap">False</property>
-		  <property name="selectable">False</property>
-		  <property name="xalign">0</property>
-		  <property name="yalign">0.5</property>
-		  <property name="xpad">4</property>
-		  <property name="ypad">4</property>
-		  <property name="ellipsize">PANGO_ELLIPSIZE_NONE</property>
-		  <property name="width_chars">-1</property>
-		  <property name="single_line_mode">False</property>
-		  <property name="angle">0</property>
-		</widget>
-		<packing>
-		  <property name="left_attach">0</property>
-		  <property name="right_attach">1</property>
-		  <property name="top_attach">3</property>
-		  <property name="bottom_attach">4</property>
-		  <property name="x_options">fill</property>
-		  <property name="y_options">fill</property>
-		</packing>
-	      </child>
-
-	      <child>
-		<widget class="GtkEntry" id="apiKeyEntry">
-		  <property agent="glademm" name="cxx_visibility">protected</property>
-		  <property name="visible">True</property>
-		  <property name="can_focus">True</property>
-		  <property name="editable">True</property>
-		  <property name="visibility">True</property>
-		  <property name="max_length">0</property>
-		  <property name="text" translatable="yes"></property>
-		  <property name="has_frame">True</property>
-		  <property name="invisible_char">*</property>
-		  <property name="activates_default">False</property>
-		</widget>
-		<packing>
-		  <property name="left_attach">1</property>
-		  <property name="right_attach">2</property>
-		  <property name="top_attach">3</property>
-		  <property name="bottom_attach">4</property>
-		  <property name="x_padding">4</property>
-		  <property name="y_padding">4</property>
-		  <property name="y_options">fill</property>
-		</packing>
-	      </child>
-
-	      <child>
-		<widget class="GtkLabel" id="newResultsLabel">
-		  <property name="visible">True</property>
-		  <property name="label" translatable="yes">New results:</property>
-		  <property name="use_underline">False</property>
-		  <property name="use_markup">False</property>
-		  <property name="justify">GTK_JUSTIFY_LEFT</property>
-		  <property name="wrap">False</property>
-		  <property name="selectable">False</property>
-		  <property name="xalign">0</property>
-		  <property name="yalign">0.5</property>
-		  <property name="xpad">4</property>
-		  <property name="ypad">4</property>
-		  <property name="ellipsize">PANGO_ELLIPSIZE_NONE</property>
-		  <property name="width_chars">-1</property>
-		  <property name="single_line_mode">False</property>
-		  <property name="angle">0</property>
-		</widget>
-		<packing>
-		  <property name="left_attach">0</property>
-		  <property name="right_attach">1</property>
-		  <property name="top_attach">1</property>
-		  <property name="bottom_attach">2</property>
-		  <property name="x_options">fill</property>
-		  <property name="y_options">fill</property>
-		</packing>
-	      </child>
-
-	      <child>
-		<widget class="GtkLabel" id="queriesLabel">
-		  <property name="visible">True</property>
-		  <property name="label" translatable="yes">Queries:</property>
-		  <property name="use_underline">False</property>
-		  <property name="use_markup">False</property>
-		  <property name="justify">GTK_JUSTIFY_LEFT</property>
-		  <property name="wrap">False</property>
-		  <property name="selectable">False</property>
-		  <property name="xalign">0</property>
-		  <property name="yalign">0.5</property>
-		  <property name="xpad">4</property>
-		  <property name="ypad">4</property>
-		  <property name="ellipsize">PANGO_ELLIPSIZE_NONE</property>
-		  <property name="width_chars">-1</property>
-		  <property name="single_line_mode">False</property>
-		  <property name="angle">0</property>
-		</widget>
-		<packing>
-		  <property name="left_attach">0</property>
-		  <property name="right_attach">1</property>
-		  <property name="top_attach">2</property>
-		  <property name="bottom_attach">3</property>
-		  <property name="x_options">fill</property>
-		  <property name="y_options">fill</property>
-		</packing>
-	      </child>
-
-	      <child>
-		<widget class="GtkCheckButton" id="enableCompletionCheckbutton">
-		  <property agent="glademm" name="cxx_visibility">protected</property>
-		  <property name="visible">True</property>
-		  <property name="can_focus">True</property>
-		  <property name="label" translatable="yes">Enable search terms suggestion</property>
-		  <property name="use_underline">True</property>
-		  <property name="relief">GTK_RELIEF_NORMAL</property>
-		  <property name="focus_on_click">True</property>
-		  <property name="active">False</property>
-		  <property name="inconsistent">False</property>
-		  <property name="draw_indicator">True</property>
-		</widget>
-		<packing>
-		  <property name="left_attach">1</property>
-		  <property name="right_attach">2</property>
-		  <property name="top_attach">2</property>
-		  <property name="bottom_attach">3</property>
-		  <property name="x_padding">4</property>
-		  <property name="y_padding">4</property>
-		  <property name="y_options">fill</property>
-		</packing>
-	      </child>
-
-	      <child>
-		<widget class="GtkColorButton" id="newResultsColorbutton">
-		  <property agent="glademm" name="cxx_visibility">protected</property>
-		  <property name="visible">True</property>
-		  <property name="can_focus">True</property>
-		  <property name="use_alpha">False</property>
-		  <property name="focus_on_click">True</property>
-		</widget>
-		<packing>
-		  <property name="left_attach">1</property>
-		  <property name="right_attach">2</property>
-		  <property name="top_attach">1</property>
-		  <property name="bottom_attach">2</property>
-		  <property name="x_padding">4</property>
-		  <property name="y_padding">4</property>
-		  <property name="y_options">fill</property>
-		</packing>
-	      </child>
-
-	      <child>
-		<widget class="GtkCheckButton" id="ignoreRobotsCheckbutton">
-		  <property agent="glademm" name="cxx_visibility">protected</property>
-		  <property name="visible">True</property>
-		  <property name="can_focus">True</property>
-		  <property name="label" translatable="yes">Ignore robots.txt and Robots META tag</property>
-		  <property name="use_underline">True</property>
-		  <property name="relief">GTK_RELIEF_NORMAL</property>
-		  <property name="focus_on_click">True</property>
-		  <property name="active">False</property>
-		  <property name="inconsistent">False</property>
-		  <property name="draw_indicator">True</property>
-		</widget>
-		<packing>
-		  <property name="left_attach">1</property>
-		  <property name="right_attach">2</property>
-		  <property name="top_attach">0</property>
-		  <property name="bottom_attach">1</property>
-		  <property name="x_padding">4</property>
-		  <property name="y_padding">4</property>
-		  <property name="y_options">fill</property>
-		</packing>
-	      </child>
-
-	      <child>
-		<widget class="GtkLabel" id="robotsLabel">
-		  <property agent="glademm" name="cxx_visibility">protected</property>
-		  <property name="visible">True</property>
-		  <property name="label" translatable="yes">HTTP crawling:</property>
-		  <property name="use_underline">False</property>
-		  <property name="use_markup">False</property>
-		  <property name="justify">GTK_JUSTIFY_LEFT</property>
-		  <property name="wrap">False</property>
-		  <property name="selectable">False</property>
-		  <property name="xalign">0</property>
-		  <property name="yalign">0.5</property>
-		  <property name="xpad">4</property>
-		  <property name="ypad">4</property>
-		  <property name="ellipsize">PANGO_ELLIPSIZE_NONE</property>
-		  <property name="width_chars">-1</property>
-		  <property name="single_line_mode">False</property>
-		  <property name="angle">0</property>
-		</widget>
-		<packing>
-		  <property name="left_attach">0</property>
-		  <property name="right_attach">1</property>
-		  <property name="top_attach">0</property>
-		  <property name="bottom_attach">1</property>
-		  <property name="x_options">fill</property>
-		  <property name="y_options"></property>
-		</packing>
-	      </child>
-	    </widget>
-	    <packing>
-	      <property name="tab_expand">False</property>
-	      <property name="tab_fill">True</property>
-	    </packing>
-	  </child>
-
-	  <child>
-	    <widget class="GtkLabel" id="generalLabel">
-	      <property name="visible">True</property>
-	      <property name="label" translatable="yes">General</property>
-	      <property name="use_underline">False</property>
-	      <property name="use_markup">False</property>
-	      <property name="justify">GTK_JUSTIFY_LEFT</property>
-	      <property name="wrap">False</property>
-	      <property name="selectable">False</property>
-	      <property name="xalign">0.5</property>
-	      <property name="yalign">0.5</property>
-	      <property name="xpad">0</property>
-	      <property name="ypad">0</property>
-	      <property name="ellipsize">PANGO_ELLIPSIZE_NONE</property>
-	      <property name="width_chars">-1</property>
-	      <property name="single_line_mode">False</property>
-	      <property name="angle">0</property>
-	    </widget>
-	    <packing>
-	      <property name="type">tab</property>
-	    </packing>
-	  </child>
-
-	  <child>
-	    <widget class="GtkTable" id="netTable">
-	      <property name="visible">True</property>
-	      <property name="n_rows">3</property>
-	      <property name="n_columns">1</property>
-	      <property name="homogeneous">False</property>
-	      <property name="row_spacing">0</property>
-	      <property name="column_spacing">0</property>
-
-	      <child>
-		<widget class="GtkRadioButton" id="directConnectionRadiobutton">
-		  <property agent="glademm" name="cxx_visibility">protected</property>
-		  <property name="visible">True</property>
-		  <property name="can_focus">True</property>
-		  <property name="label" translatable="yes">Direct connection to the Internet</property>
-		  <property name="use_underline">True</property>
-		  <property name="relief">GTK_RELIEF_NORMAL</property>
-		  <property name="focus_on_click">True</property>
-		  <property name="active">True</property>
-		  <property name="inconsistent">False</property>
-		  <property name="draw_indicator">True</property>
-		  <signal name="toggled" handler="on_directConnectionRadiobutton_toggled" last_modification_time="Fri, 23 Mar 2007 13:40:21 GMT"/>
-		</widget>
-		<packing>
-		  <property name="left_attach">0</property>
-		  <property name="right_attach">1</property>
-		  <property name="top_attach">0</property>
-		  <property name="bottom_attach">1</property>
-		  <property name="x_padding">4</property>
-		  <property name="y_padding">4</property>
-		  <property name="y_options">fill</property>
-		</packing>
-	      </child>
-
-	      <child>
-		<widget class="GtkRadioButton" id="proxyRadiobutton">
-		  <property agent="glademm" name="cxx_visibility">protected</property>
-		  <property name="visible">True</property>
-		  <property name="can_focus">True</property>
-		  <property name="label" translatable="yes">Manual proxy configuration:</property>
-		  <property name="use_underline">True</property>
-		  <property name="relief">GTK_RELIEF_NORMAL</property>
-		  <property name="focus_on_click">True</property>
-		  <property name="active">False</property>
-		  <property name="inconsistent">False</property>
-		  <property name="draw_indicator">True</property>
-		  <property name="group">directConnectionRadiobutton</property>
-		</widget>
-		<packing>
-		  <property name="left_attach">0</property>
-		  <property name="right_attach">1</property>
-		  <property name="top_attach">1</property>
-		  <property name="bottom_attach">2</property>
-		  <property name="x_padding">4</property>
-		  <property name="y_padding">4</property>
-		  <property name="y_options">fill</property>
-		</packing>
-	      </child>
-
-	      <child>
-		<widget class="GtkTable" id="socksTable">
-		  <property name="visible">True</property>
-		  <property name="n_rows">3</property>
-		  <property name="n_columns">2</property>
-		  <property name="homogeneous">False</property>
-		  <property name="row_spacing">0</property>
-		  <property name="column_spacing">0</property>
-
-		  <child>
-		    <widget class="GtkLabel" id="proxyAddressLabel">
-		      <property name="visible">True</property>
-		      <property name="label" translatable="yes">Address:</property>
-		      <property name="use_underline">False</property>
-		      <property name="use_markup">False</property>
-		      <property name="justify">GTK_JUSTIFY_LEFT</property>
-		      <property name="wrap">False</property>
-		      <property name="selectable">False</property>
-		      <property name="xalign">0</property>
-		      <property name="yalign">0.5</property>
-		      <property name="xpad">0</property>
-		      <property name="ypad">0</property>
-		      <property name="ellipsize">PANGO_ELLIPSIZE_NONE</property>
-		      <property name="width_chars">-1</property>
-		      <property name="single_line_mode">False</property>
-		      <property name="angle">0</property>
-		    </widget>
-		    <packing>
-		      <property name="left_attach">0</property>
-		      <property name="right_attach">1</property>
-		      <property name="top_attach">1</property>
-		      <property name="bottom_attach">2</property>
-		      <property name="x_padding">4</property>
-		      <property name="y_padding">4</property>
-		      <property name="x_options">fill</property>
-		      <property name="y_options">fill</property>
-		    </packing>
-		  </child>
-
-		  <child>
-		    <widget class="GtkEntry" id="proxyAddressEntry">
-		      <property agent="glademm" name="cxx_visibility">protected</property>
-		      <property name="visible">True</property>
-		      <property name="can_focus">True</property>
-		      <property name="editable">True</property>
-		      <property name="visibility">True</property>
-		      <property name="max_length">0</property>
-		      <property name="text" translatable="yes"></property>
-		      <property name="has_frame">True</property>
-		      <property name="invisible_char">*</property>
-		      <property name="activates_default">False</property>
-		    </widget>
-		    <packing>
-		      <property name="left_attach">1</property>
-		      <property name="right_attach">2</property>
-		      <property name="top_attach">1</property>
-		      <property name="bottom_attach">2</property>
-		      <property name="x_padding">4</property>
-		      <property name="y_padding">4</property>
-		      <property name="y_options">fill</property>
-		    </packing>
-		  </child>
-
-		  <child>
-		    <widget class="GtkLabel" id="proxyTypeLabel">
-		      <property name="visible">True</property>
-		      <property name="label" translatable="yes">Type:</property>
-		      <property name="use_underline">False</property>
-		      <property name="use_markup">False</property>
-		      <property name="justify">GTK_JUSTIFY_LEFT</property>
-		      <property name="wrap">False</property>
-		      <property name="selectable">False</property>
-		      <property name="xalign">0</property>
-		      <property name="yalign">0.5</property>
-		      <property name="xpad">0</property>
-		      <property name="ypad">0</property>
-		      <property name="ellipsize">PANGO_ELLIPSIZE_NONE</property>
-		      <property name="width_chars">-1</property>
-		      <property name="single_line_mode">False</property>
-		      <property name="angle">0</property>
-		    </widget>
-		    <packing>
-		      <property name="left_attach">0</property>
-		      <property name="right_attach">1</property>
-		      <property name="top_attach">0</property>
-		      <property name="bottom_attach">1</property>
-		      <property name="x_padding">4</property>
-		      <property name="y_padding">4</property>
-		      <property name="x_options">fill</property>
-		      <property name="y_options">fill</property>
-		    </packing>
-		  </child>
-
-		  <child>
-		    <widget class="GtkLabel" id="proxyPortLabel">
-		      <property name="visible">True</property>
-		      <property name="label" translatable="yes">Port:</property>
-		      <property name="use_underline">False</property>
-		      <property name="use_markup">False</property>
-		      <property name="justify">GTK_JUSTIFY_LEFT</property>
-		      <property name="wrap">False</property>
-		      <property name="selectable">False</property>
-		      <property name="xalign">0</property>
-		      <property name="yalign">0.5</property>
-		      <property name="xpad">0</property>
-		      <property name="ypad">0</property>
-		      <property name="ellipsize">PANGO_ELLIPSIZE_NONE</property>
-		      <property name="width_chars">-1</property>
-		      <property name="single_line_mode">False</property>
-		      <property name="angle">0</property>
-		    </widget>
-		    <packing>
-		      <property name="left_attach">0</property>
-		      <property name="right_attach">1</property>
-		      <property name="top_attach">2</property>
-		      <property name="bottom_attach">3</property>
-		      <property name="x_padding">4</property>
-		      <property name="y_padding">4</property>
-		      <property name="x_options">fill</property>
-		      <property name="y_options">fill</property>
-		    </packing>
-		  </child>
-
-		  <child>
-		    <widget class="GtkSpinButton" id="proxyPortSpinbutton">
-		      <property agent="glademm" name="cxx_visibility">protected</property>
-		      <property name="visible">True</property>
-		      <property name="can_focus">True</property>
-		      <property name="climb_rate">1</property>
-		      <property name="digits">0</property>
-		      <property name="numeric">False</property>
-		      <property name="update_policy">GTK_UPDATE_ALWAYS</property>
-		      <property name="snap_to_ticks">False</property>
-		      <property name="wrap">False</property>
-		      <property name="adjustment">80 1 65535 1 10 10</property>
-		    </widget>
-		    <packing>
-		      <property name="left_attach">1</property>
-		      <property name="right_attach">2</property>
-		      <property name="top_attach">2</property>
-		      <property name="bottom_attach">3</property>
-		      <property name="x_padding">4</property>
-		      <property name="y_padding">4</property>
-		      <property name="y_options"></property>
-		    </packing>
-		  </child>
-
-		  <child>
-		    <widget class="GtkComboBox" id="proxyTypeCombobox">
-		      <property agent="glademm" name="cxx_visibility">protected</property>
-		      <property name="visible">True</property>
-		      <property name="items" translatable="yes"></property>
-		      <property name="add_tearoffs">False</property>
-		      <property name="focus_on_click">True</property>
-		    </widget>
-		    <packing>
-		      <property name="left_attach">1</property>
-		      <property name="right_attach">2</property>
-		      <property name="top_attach">0</property>
-		      <property name="bottom_attach">1</property>
-		      <property name="x_padding">4</property>
-		      <property name="y_padding">4</property>
-		      <property name="y_options"></property>
-		    </packing>
-		  </child>
-		</widget>
-		<packing>
-		  <property name="left_attach">0</property>
-		  <property name="right_attach">1</property>
-		  <property name="top_attach">2</property>
-		  <property name="bottom_attach">3</property>
-		  <property name="x_options">fill</property>
-		</packing>
-	      </child>
-	    </widget>
-	    <packing>
-	      <property name="tab_expand">False</property>
-	      <property name="tab_fill">True</property>
-	    </packing>
-	  </child>
-
-	  <child>
-	    <widget class="GtkLabel" id="netLabel">
-	      <property name="visible">True</property>
-	      <property name="label" translatable="yes">Network</property>
-	      <property name="use_underline">False</property>
-	      <property name="use_markup">False</property>
-	      <property name="justify">GTK_JUSTIFY_LEFT</property>
-	      <property name="wrap">False</property>
-	      <property name="selectable">False</property>
-	      <property name="xalign">0.5</property>
-	      <property name="yalign">0.5</property>
-	      <property name="xpad">0</property>
-	      <property name="ypad">0</property>
-	      <property name="ellipsize">PANGO_ELLIPSIZE_NONE</property>
-	      <property name="width_chars">-1</property>
-	      <property name="single_line_mode">False</property>
-	      <property name="angle">0</property>
-	    </widget>
-	    <packing>
-	      <property name="type">tab</property>
-	    </packing>
-	  </child>
-
-	  <child>
-	    <widget class="GtkVBox" id="labelsVbox">
-	      <property name="visible">True</property>
-	      <property name="homogeneous">False</property>
-	      <property name="spacing">0</property>
-
-	      <child>
-		<widget class="GtkLabel" id="indexLabelsLabel">
-		  <property name="visible">True</property>
-		  <property name="label" translatable="yes">Labels are used to classify indexed documents:</property>
-		  <property name="use_underline">False</property>
-		  <property name="use_markup">False</property>
-		  <property name="justify">GTK_JUSTIFY_LEFT</property>
-		  <property name="wrap">True</property>
-		  <property name="selectable">False</property>
-		  <property name="xalign">0</property>
-		  <property name="yalign">0.5</property>
-		  <property name="xpad">4</property>
-		  <property name="ypad">4</property>
-		  <property name="ellipsize">PANGO_ELLIPSIZE_NONE</property>
-		  <property name="width_chars">-1</property>
-		  <property name="single_line_mode">False</property>
-		  <property name="angle">0</property>
-		</widget>
-		<packing>
-		  <property name="padding">4</property>
-		  <property name="expand">False</property>
-		  <property name="fill">False</property>
-		</packing>
-	      </child>
-
-	      <child>
-		<widget class="GtkHBox" id="labelsHbox">
-		  <property name="visible">True</property>
-		  <property name="homogeneous">False</property>
-		  <property name="spacing">0</property>
-
-		  <child>
-		    <widget class="GtkScrolledWindow" id="labelsScrolledwindow">
-		      <property name="border_width">4</property>
-		      <property name="visible">True</property>
-		      <property name="can_focus">True</property>
-		      <property name="hscrollbar_policy">GTK_POLICY_AUTOMATIC</property>
-		      <property name="vscrollbar_policy">GTK_POLICY_AUTOMATIC</property>
-		      <property name="shadow_type">GTK_SHADOW_NONE</property>
-		      <property name="window_placement">GTK_CORNER_TOP_LEFT</property>
-
-		      <child>
-			<widget class="GtkTreeView" id="labelsTreeview">
-			  <property agent="glademm" name="cxx_visibility">protected</property>
-			  <property name="visible">True</property>
-			  <property name="can_focus">True</property>
-			  <property name="headers_visible">True</property>
-			  <property name="rules_hint">False</property>
-			  <property name="reorderable">False</property>
-			  <property name="enable_search">True</property>
-			  <property name="fixed_height_mode">True</property>
-			  <property name="hover_selection">False</property>
-			  <property name="hover_expand">False</property>
-			</widget>
-		      </child>
-		    </widget>
-		    <packing>
-		      <property name="padding">0</property>
-		      <property name="expand">True</property>
-		      <property name="fill">True</property>
-		    </packing>
-		  </child>
-
-		  <child>
-		    <widget class="GtkVButtonBox" id="labelsVbuttonbox">
-		      <property name="visible">True</property>
-		      <property name="layout_style">GTK_BUTTONBOX_START</property>
-		      <property name="spacing">0</property>
-
-		      <child>
-			<widget class="GtkButton" id="addLabelButton">
-			  <property name="border_width">4</property>
-			  <property agent="glademm" name="cxx_visibility">protected</property>
-			  <property name="visible">True</property>
-			  <property name="can_default">True</property>
-			  <property name="can_focus">True</property>
-			  <property name="relief">GTK_RELIEF_NORMAL</property>
-			  <property name="focus_on_click">True</property>
-			  <signal name="clicked" handler="on_addLabelButton_clicked" last_modification_time="Wed, 28 Apr 2004 17:31:55 GMT"/>
-
-			  <child>
-			    <widget class="GtkAlignment" id="alignment17">
-			      <property name="visible">True</property>
-			      <property name="xalign">0.5</property>
-			      <property name="yalign">0.5</property>
-			      <property name="xscale">0</property>
-			      <property name="yscale">0</property>
-			      <property name="top_padding">0</property>
-			      <property name="bottom_padding">0</property>
-			      <property name="left_padding">0</property>
-			      <property name="right_padding">0</property>
-
-			      <child>
-				<widget class="GtkHBox" id="hbox29">
-				  <property name="visible">True</property>
-				  <property name="homogeneous">False</property>
-				  <property name="spacing">2</property>
-
-				  <child>
-				    <widget class="GtkImage" id="image235">
-				      <property name="visible">True</property>
-				      <property name="stock">gtk-add</property>
-				      <property name="icon_size">4</property>
-				      <property name="xalign">0.5</property>
-				      <property name="yalign">0.5</property>
-				      <property name="xpad">0</property>
-				      <property name="ypad">0</property>
-				    </widget>
-				    <packing>
-				      <property name="padding">0</property>
-				      <property name="expand">False</property>
-				      <property name="fill">False</property>
-				    </packing>
-				  </child>
-
-				  <child>
-				    <widget class="GtkLabel" id="label35">
-				      <property name="visible">True</property>
-				      <property name="label" translatable="yes">Add</property>
-				      <property name="use_underline">True</property>
-				      <property name="use_markup">False</property>
-				      <property name="justify">GTK_JUSTIFY_LEFT</property>
-				      <property name="wrap">False</property>
-				      <property name="selectable">False</property>
-				      <property name="xalign">0.5</property>
-				      <property name="yalign">0.5</property>
-				      <property name="xpad">0</property>
-				      <property name="ypad">0</property>
-				      <property name="ellipsize">PANGO_ELLIPSIZE_NONE</property>
-				      <property name="width_chars">-1</property>
-				      <property name="single_line_mode">False</property>
-				      <property name="angle">0</property>
-				    </widget>
-				    <packing>
-				      <property name="padding">0</property>
-				      <property name="expand">False</property>
-				      <property name="fill">False</property>
-				    </packing>
-				  </child>
-				</widget>
-			      </child>
-			    </widget>
-			  </child>
-			</widget>
-		      </child>
-
-		      <child>
-			<widget class="GtkButton" id="removeLabelButton">
-			  <property name="border_width">4</property>
-			  <property agent="glademm" name="cxx_visibility">protected</property>
-			  <property name="visible">True</property>
-			  <property name="can_default">True</property>
-			  <property name="can_focus">True</property>
-			  <property name="relief">GTK_RELIEF_NORMAL</property>
-			  <property name="focus_on_click">True</property>
-			  <signal name="clicked" handler="on_removeLabelButton_clicked" last_modification_time="Wed, 28 Apr 2004 17:32:01 GMT"/>
-
-			  <child>
-			    <widget class="GtkAlignment" id="alignment18">
-			      <property name="visible">True</property>
-			      <property name="xalign">0.5</property>
-			      <property name="yalign">0.5</property>
-			      <property name="xscale">0</property>
-			      <property name="yscale">0</property>
-			      <property name="top_padding">0</property>
-			      <property name="bottom_padding">0</property>
-			      <property name="left_padding">0</property>
-			      <property name="right_padding">0</property>
-
-			      <child>
-				<widget class="GtkHBox" id="hbox30">
-				  <property name="visible">True</property>
-				  <property name="homogeneous">False</property>
-				  <property name="spacing">2</property>
-
-				  <child>
-				    <widget class="GtkImage" id="image236">
-				      <property name="visible">True</property>
-				      <property name="stock">gtk-remove</property>
-				      <property name="icon_size">4</property>
-				      <property name="xalign">0.5</property>
-				      <property name="yalign">0.5</property>
-				      <property name="xpad">0</property>
-				      <property name="ypad">0</property>
-				    </widget>
-				    <packing>
-				      <property name="padding">0</property>
-				      <property name="expand">False</property>
-				      <property name="fill">False</property>
-				    </packing>
-				  </child>
-
-				  <child>
-				    <widget class="GtkLabel" id="label36">
-				      <property name="visible">True</property>
-				      <property name="label" translatable="yes">Remove</property>
-				      <property name="use_underline">True</property>
-				      <property name="use_markup">False</property>
-				      <property name="justify">GTK_JUSTIFY_LEFT</property>
-				      <property name="wrap">False</property>
-				      <property name="selectable">False</property>
-				      <property name="xalign">0.5</property>
-				      <property name="yalign">0.5</property>
-				      <property name="xpad">0</property>
-				      <property name="ypad">0</property>
-				      <property name="ellipsize">PANGO_ELLIPSIZE_NONE</property>
-				      <property name="width_chars">-1</property>
-				      <property name="single_line_mode">False</property>
-				      <property name="angle">0</property>
-				    </widget>
-				    <packing>
-				      <property name="padding">0</property>
-				      <property name="expand">False</property>
-				      <property name="fill">False</property>
-				    </packing>
-				  </child>
-				</widget>
-			      </child>
-			    </widget>
-			  </child>
-			</widget>
-		      </child>
-		    </widget>
-		    <packing>
-		      <property name="padding">0</property>
-		      <property name="expand">False</property>
-		      <property name="fill">True</property>
-		    </packing>
-		  </child>
-		</widget>
-		<packing>
-		  <property name="padding">4</property>
-		  <property name="expand">True</property>
-		  <property name="fill">True</property>
-		</packing>
-	      </child>
-	    </widget>
-	    <packing>
-	      <property name="tab_expand">False</property>
-	      <property name="tab_fill">True</property>
-	    </packing>
-	  </child>
-
-	  <child>
-	    <widget class="GtkLabel" id="labelsLabel">
-	      <property name="visible">True</property>
-	      <property name="label" translatable="yes">Labels</property>
-	      <property name="use_underline">False</property>
-	      <property name="use_markup">False</property>
-	      <property name="justify">GTK_JUSTIFY_LEFT</property>
-	      <property name="wrap">False</property>
-	      <property name="selectable">False</property>
-	      <property name="xalign">0.5</property>
-	      <property name="yalign">0.5</property>
-	      <property name="xpad">0</property>
-	      <property name="ypad">0</property>
-	      <property name="ellipsize">PANGO_ELLIPSIZE_NONE</property>
-	      <property name="width_chars">-1</property>
-	      <property name="single_line_mode">False</property>
-	      <property name="angle">0</property>
-	    </widget>
-	    <packing>
-	      <property name="type">tab</property>
-	    </packing>
-	  </child>
-
-	  <child>
-	    <widget class="GtkVBox" id="indexingVbox">
-	      <property name="visible">True</property>
-	      <property name="homogeneous">False</property>
-	      <property name="spacing">0</property>
-
-	      <child>
-		<widget class="GtkLabel" id="directoriesLabel">
-		  <property name="visible">True</property>
-		  <property name="label" translatable="yes">These directories will be indexed and optionally monitored for changes:</property>
-		  <property name="use_underline">False</property>
-		  <property name="use_markup">False</property>
-		  <property name="justify">GTK_JUSTIFY_LEFT</property>
-		  <property name="wrap">True</property>
-		  <property name="selectable">False</property>
-		  <property name="xalign">0</property>
-		  <property name="yalign">0.5</property>
-		  <property name="xpad">4</property>
-		  <property name="ypad">4</property>
-		  <property name="ellipsize">PANGO_ELLIPSIZE_NONE</property>
-		  <property name="width_chars">-1</property>
-		  <property name="single_line_mode">False</property>
-		  <property name="angle">0</property>
-		</widget>
-		<packing>
-		  <property name="padding">4</property>
-		  <property name="expand">False</property>
-		  <property name="fill">False</property>
-		</packing>
-	      </child>
-
-	      <child>
-		<widget class="GtkHBox" id="directoriesHbox">
-		  <property name="visible">True</property>
-		  <property name="homogeneous">False</property>
-		  <property name="spacing">0</property>
-
-		  <child>
-		    <widget class="GtkScrolledWindow" id="directoriesScrolledwindow">
-		      <property name="border_width">4</property>
-		      <property name="visible">True</property>
-		      <property name="can_focus">True</property>
-		      <property name="hscrollbar_policy">GTK_POLICY_AUTOMATIC</property>
-		      <property name="vscrollbar_policy">GTK_POLICY_AUTOMATIC</property>
-		      <property name="shadow_type">GTK_SHADOW_NONE</property>
-		      <property name="window_placement">GTK_CORNER_TOP_LEFT</property>
-
-		      <child>
-			<widget class="GtkTreeView" id="directoriesTreeview">
-			  <property agent="glademm" name="cxx_visibility">protected</property>
-			  <property name="visible">True</property>
-			  <property name="can_focus">True</property>
-			  <property name="headers_visible">True</property>
-			  <property name="rules_hint">False</property>
-			  <property name="reorderable">False</property>
-			  <property name="enable_search">True</property>
-			  <property name="fixed_height_mode">True</property>
-			  <property name="hover_selection">False</property>
-			  <property name="hover_expand">False</property>
-			</widget>
-		      </child>
-		    </widget>
-		    <packing>
-		      <property name="padding">0</property>
-		      <property name="expand">True</property>
-		      <property name="fill">True</property>
-		    </packing>
-		  </child>
-
-		  <child>
-		    <widget class="GtkVButtonBox" id="directoriesVbuttonbox">
-		      <property name="visible">True</property>
-		      <property name="layout_style">GTK_BUTTONBOX_START</property>
-		      <property name="spacing">0</property>
-
-		      <child>
-			<widget class="GtkButton" id="addDirectoryButton">
-			  <property name="border_width">4</property>
-			  <property agent="glademm" name="cxx_visibility">protected</property>
-			  <property name="visible">True</property>
-			  <property name="can_default">True</property>
-			  <property name="can_focus">True</property>
-			  <property name="relief">GTK_RELIEF_NORMAL</property>
-			  <property name="focus_on_click">True</property>
-			  <signal name="clicked" handler="on_addDirectoryButton_clicked" last_modification_time="Sun, 20 Aug 2006 07:33:34 GMT"/>
-
-			  <child>
-			    <widget class="GtkAlignment" id="alignment35">
-			      <property name="visible">True</property>
-			      <property name="xalign">0.5</property>
-			      <property name="yalign">0.5</property>
-			      <property name="xscale">0</property>
-			      <property name="yscale">0</property>
-			      <property name="top_padding">0</property>
-			      <property name="bottom_padding">0</property>
-			      <property name="left_padding">0</property>
-			      <property name="right_padding">0</property>
-
-			      <child>
-				<widget class="GtkHBox" id="hbox54">
-				  <property name="visible">True</property>
-				  <property name="homogeneous">False</property>
-				  <property name="spacing">2</property>
-
-				  <child>
-				    <widget class="GtkImage" id="image609">
-				      <property name="visible">True</property>
-				      <property name="stock">gtk-add</property>
-				      <property name="icon_size">4</property>
-				      <property name="xalign">0.5</property>
-				      <property name="yalign">0.5</property>
-				      <property name="xpad">0</property>
-				      <property name="ypad">0</property>
-				    </widget>
-				    <packing>
-				      <property name="padding">0</property>
-				      <property name="expand">False</property>
-				      <property name="fill">False</property>
-				    </packing>
-				  </child>
-
-				  <child>
-				    <widget class="GtkLabel" id="label58">
-				      <property name="visible">True</property>
-				      <property name="label" translatable="yes">Add</property>
-				      <property name="use_underline">True</property>
-				      <property name="use_markup">False</property>
-				      <property name="justify">GTK_JUSTIFY_LEFT</property>
-				      <property name="wrap">False</property>
-				      <property name="selectable">False</property>
-				      <property name="xalign">0.5</property>
-				      <property name="yalign">0.5</property>
-				      <property name="xpad">0</property>
-				      <property name="ypad">0</property>
-				      <property name="ellipsize">PANGO_ELLIPSIZE_NONE</property>
-				      <property name="width_chars">-1</property>
-				      <property name="single_line_mode">False</property>
-				      <property name="angle">0</property>
-				    </widget>
-				    <packing>
-				      <property name="padding">0</property>
-				      <property name="expand">False</property>
-				      <property name="fill">False</property>
-				    </packing>
-				  </child>
-				</widget>
-			      </child>
-			    </widget>
-			  </child>
-			</widget>
-		      </child>
-
-		      <child>
-			<widget class="GtkButton" id="removeDirectoryButton">
-			  <property name="border_width">4</property>
-			  <property agent="glademm" name="cxx_visibility">protected</property>
-			  <property name="visible">True</property>
-			  <property name="can_default">True</property>
-			  <property name="can_focus">True</property>
-			  <property name="label">gtk-remove</property>
-			  <property name="use_stock">True</property>
-			  <property name="relief">GTK_RELIEF_NORMAL</property>
-			  <property name="focus_on_click">True</property>
-			  <signal name="clicked" handler="on_removeDirectoryButton_clicked" last_modification_time="Sun, 20 Aug 2006 07:33:50 GMT"/>
-			</widget>
-		      </child>
-		    </widget>
-		    <packing>
-		      <property name="padding">0</property>
-		      <property name="expand">False</property>
-		      <property name="fill">True</property>
-		    </packing>
-		  </child>
-		</widget>
-		<packing>
-		  <property name="padding">4</property>
-		  <property name="expand">True</property>
-		  <property name="fill">True</property>
-		</packing>
-	      </child>
-
-	      <child>
-		<widget class="GtkLabel" id="patternsLabel">
-		  <property name="visible">True</property>
-		  <property name="label" translatable="yes">File patterns:</property>
-		  <property name="use_underline">False</property>
-		  <property name="use_markup">False</property>
-		  <property name="justify">GTK_JUSTIFY_LEFT</property>
-		  <property name="wrap">True</property>
-		  <property name="selectable">False</property>
-		  <property name="xalign">0</property>
-		  <property name="yalign">0.5</property>
-		  <property name="xpad">4</property>
-		  <property name="ypad">4</property>
-		  <property name="ellipsize">PANGO_ELLIPSIZE_NONE</property>
-		  <property name="width_chars">-1</property>
-		  <property name="single_line_mode">False</property>
-		  <property name="angle">0</property>
-		</widget>
-		<packing>
-		  <property name="padding">4</property>
-		  <property name="expand">False</property>
-		  <property name="fill">False</property>
-		</packing>
-	      </child>
-
-	      <child>
-		<widget class="GtkHBox" id="patternsHbox">
-		  <property name="visible">True</property>
-		  <property name="homogeneous">False</property>
-		  <property name="spacing">0</property>
-
-		  <child>
-		    <widget class="GtkVBox" id="patternsVbox">
-		      <property name="visible">True</property>
-		      <property name="homogeneous">False</property>
-		      <property name="spacing">0</property>
-
-		      <child>
-			<widget class="GtkScrolledWindow" id="patternsScrolledwindow">
-			  <property name="border_width">4</property>
-			  <property name="visible">True</property>
-			  <property name="can_focus">True</property>
-			  <property name="hscrollbar_policy">GTK_POLICY_AUTOMATIC</property>
-			  <property name="vscrollbar_policy">GTK_POLICY_AUTOMATIC</property>
-			  <property name="shadow_type">GTK_SHADOW_NONE</property>
-			  <property name="window_placement">GTK_CORNER_TOP_LEFT</property>
-
-			  <child>
-			    <widget class="GtkTreeView" id="patternsTreeview">
-			      <property agent="glademm" name="cxx_visibility">protected</property>
-			      <property name="visible">True</property>
-			      <property name="can_focus">True</property>
-			      <property name="headers_visible">True</property>
-			      <property name="rules_hint">False</property>
-			      <property name="reorderable">False</property>
-			      <property name="enable_search">True</property>
-			      <property name="fixed_height_mode">True</property>
-			      <property name="hover_selection">False</property>
-			      <property name="hover_expand">False</property>
-			    </widget>
-			  </child>
-			</widget>
-			<packing>
-			  <property name="padding">0</property>
-			  <property name="expand">True</property>
-			  <property name="fill">True</property>
-			</packing>
-		      </child>
-
-		      <child>
-			<widget class="GtkComboBox" id="patternsCombobox">
-			  <property agent="glademm" name="cxx_visibility">protected</property>
-			  <property name="visible">True</property>
-			  <property name="items" translatable="yes"></property>
-			  <property name="add_tearoffs">False</property>
-			  <property name="focus_on_click">True</property>
-			  <signal name="changed" handler="on_patternsCombobox_changed" last_modification_time="Tue, 03 Jul 2007 13:02:19 GMT"/>
-			</widget>
-			<packing>
-			  <property name="padding">4</property>
-			  <property name="expand">False</property>
-			  <property name="fill">True</property>
-			</packing>
-		      </child>
-		    </widget>
-		    <packing>
-		      <property name="padding">0</property>
-		      <property name="expand">True</property>
-		      <property name="fill">True</property>
-		    </packing>
-		  </child>
-
-		  <child>
-		    <widget class="GtkVButtonBox" id="patternsVbuttonbox">
-		      <property name="visible">True</property>
-		      <property name="layout_style">GTK_BUTTONBOX_START</property>
-		      <property name="spacing">0</property>
-
-		      <child>
-			<widget class="GtkButton" id="addPatternButton">
-			  <property name="border_width">4</property>
-			  <property agent="glademm" name="cxx_visibility">protected</property>
-			  <property name="visible">True</property>
-			  <property name="can_default">True</property>
-			  <property name="can_focus">True</property>
-			  <property name="relief">GTK_RELIEF_NORMAL</property>
-			  <property name="focus_on_click">True</property>
-			  <signal name="clicked" handler="on_addPatternButton_clicked" last_modification_time="Tue, 31 Oct 2006 14:48:22 GMT"/>
-
-			  <child>
-			    <widget class="GtkAlignment" id="alignment36">
-			      <property name="visible">True</property>
-			      <property name="xalign">0.5</property>
-			      <property name="yalign">0.5</property>
-			      <property name="xscale">0</property>
-			      <property name="yscale">0</property>
-			      <property name="top_padding">0</property>
-			      <property name="bottom_padding">0</property>
-			      <property name="left_padding">0</property>
-			      <property name="right_padding">0</property>
-
-			      <child>
-				<widget class="GtkHBox" id="hbox56">
-				  <property name="visible">True</property>
-				  <property name="homogeneous">False</property>
-				  <property name="spacing">2</property>
-
-				  <child>
-				    <widget class="GtkImage" id="image624">
-				      <property name="visible">True</property>
-				      <property name="stock">gtk-add</property>
-				      <property name="icon_size">4</property>
-				      <property name="xalign">0.5</property>
-				      <property name="yalign">0.5</property>
-				      <property name="xpad">0</property>
-				      <property name="ypad">0</property>
-				    </widget>
-				    <packing>
-				      <property name="padding">0</property>
-				      <property name="expand">False</property>
-				      <property name="fill">False</property>
-				    </packing>
-				  </child>
-
-				  <child>
-				    <widget class="GtkLabel" id="label60">
-				      <property name="visible">True</property>
-				      <property name="label" translatable="yes">Add</property>
-				      <property name="use_underline">True</property>
-				      <property name="use_markup">False</property>
-				      <property name="justify">GTK_JUSTIFY_LEFT</property>
-				      <property name="wrap">False</property>
-				      <property name="selectable">False</property>
-				      <property name="xalign">0.5</property>
-				      <property name="yalign">0.5</property>
-				      <property name="xpad">0</property>
-				      <property name="ypad">0</property>
-				      <property name="ellipsize">PANGO_ELLIPSIZE_NONE</property>
-				      <property name="width_chars">-1</property>
-				      <property name="single_line_mode">False</property>
-				      <property name="angle">0</property>
-				    </widget>
-				    <packing>
-				      <property name="padding">0</property>
-				      <property name="expand">False</property>
-				      <property name="fill">False</property>
-				    </packing>
-				  </child>
-				</widget>
-			      </child>
-			    </widget>
-			  </child>
-			</widget>
-		      </child>
-
-		      <child>
-			<widget class="GtkButton" id="removePatternButton">
-			  <property name="border_width">4</property>
-			  <property agent="glademm" name="cxx_visibility">protected</property>
-			  <property name="visible">True</property>
-			  <property name="can_default">True</property>
-			  <property name="can_focus">True</property>
-			  <property name="label">gtk-remove</property>
-			  <property name="use_stock">True</property>
-			  <property name="relief">GTK_RELIEF_NORMAL</property>
-			  <property name="focus_on_click">True</property>
-			  <signal name="clicked" handler="on_removePatternButton_clicked" last_modification_time="Tue, 31 Oct 2006 14:48:32 GMT"/>
-			</widget>
-		      </child>
-
-		      <child>
-			<widget class="GtkButton" id="resetPatternsButton">
-			  <property name="border_width">4</property>
-			  <property agent="glademm" name="cxx_visibility">protected</property>
-			  <property name="visible">True</property>
-			  <property name="can_default">True</property>
-			  <property name="can_focus">True</property>
-			  <property name="label" translatable="yes">Reset</property>
-			  <property name="use_underline">True</property>
-			  <property name="relief">GTK_RELIEF_NORMAL</property>
-			  <property name="focus_on_click">True</property>
-			  <signal name="clicked" handler="on_resetPatternsButton_clicked" last_modification_time="Mon, 24 Mar 2008 04:59:59 GMT"/>
-			</widget>
-		      </child>
-		    </widget>
-		    <packing>
-		      <property name="padding">0</property>
-		      <property name="expand">False</property>
-		      <property name="fill">True</property>
-		    </packing>
-		  </child>
-		</widget>
-		<packing>
-		  <property name="padding">4</property>
-		  <property name="expand">True</property>
-		  <property name="fill">True</property>
-		</packing>
-	      </child>
-	    </widget>
-	    <packing>
-	      <property name="tab_expand">False</property>
-	      <property name="tab_fill">True</property>
-	    </packing>
-	  </child>
-
-	  <child>
-	    <widget class="GtkLabel" id="indexingLabel">
-	      <property name="visible">True</property>
-	      <property name="label" translatable="yes">Indexing</property>
-	      <property name="use_underline">False</property>
-	      <property name="use_markup">False</property>
-	      <property name="justify">GTK_JUSTIFY_LEFT</property>
-	      <property name="wrap">False</property>
-	      <property name="selectable">False</property>
-	      <property name="xalign">0.5</property>
-	      <property name="yalign">0.5</property>
-	      <property name="xpad">0</property>
-	      <property name="ypad">0</property>
-	      <property name="ellipsize">PANGO_ELLIPSIZE_NONE</property>
-	      <property name="width_chars">-1</property>
-	      <property name="single_line_mode">False</property>
-	      <property name="angle">0</property>
-	    </widget>
-	    <packing>
-	      <property name="type">tab</property>
-	    </packing>
-	  </child>
-	</widget>
-	<packing>
-	  <property name="padding">0</property>
-	  <property name="expand">True</property>
-	  <property name="fill">True</property>
-	</packing>
-      </child>
-    </widget>
-  </child>
-</widget>
-
 <widget class="GtkDialog" id="queryDialog">
   <property agent="glademm" name="cxx_visibility">public</property>
   <property name="visible">True</property>
@@ -4078,4 +2783,1300 @@
   </child>
 </widget>
 
+<widget class="GtkWindow" id="prefsWindow">
+  <property name="visible">True</property>
+  <property name="title" translatable="yes">Pinot Preferences</property>
+  <property name="type">GTK_WINDOW_TOPLEVEL</property>
+  <property name="window_position">GTK_WIN_POS_CENTER</property>
+  <property name="modal">False</property>
+  <property name="resizable">True</property>
+  <property name="destroy_with_parent">False</property>
+  <property name="decorated">True</property>
+  <property name="skip_taskbar_hint">False</property>
+  <property name="skip_pager_hint">False</property>
+  <property name="type_hint">GDK_WINDOW_TYPE_HINT_NORMAL</property>
+  <property name="gravity">GDK_GRAVITY_NORTH_WEST</property>
+  <property name="focus_on_map">True</property>
+  <property name="urgency_hint">False</property>
+  <signal name="delete_event" handler="on_prefsWindow_delete_event" last_modification_time="Tue, 18 Nov 2008 15:27:57 GMT"/>
+
+  <child>
+    <widget class="GtkVBox" id="vbox1">
+      <property name="border_width">4</property>
+      <property name="visible">True</property>
+      <property name="homogeneous">False</property>
+      <property name="spacing">0</property>
+
+      <child internal-child="action_area">
+	<widget class="GtkHButtonBox" id="hbuttonbox1">
+	  <property name="visible">True</property>
+	  <property name="layout_style">GTK_BUTTONBOX_END</property>
+
+	  <child>
+	    <widget class="GtkButton" id="prefsCancelbutton">
+	      <property name="border_width">4</property>
+	      <property agent="glademm" name="cxx_visibility">protected</property>
+	      <property name="visible">True</property>
+	      <property name="can_default">True</property>
+	      <property name="can_focus">True</property>
+	      <property name="label">gtk-cancel</property>
+	      <property name="use_stock">True</property>
+	      <property name="relief">GTK_RELIEF_NORMAL</property>
+	      <property name="focus_on_click">True</property>
+	      <signal name="clicked" handler="on_prefsCancelbutton_clicked" last_modification_time="Tue, 18 Nov 2008 15:49:22 GMT"/>
+	    </widget>
+	  </child>
+
+	  <child>
+	    <widget class="GtkButton" id="prefsOkbutton">
+	      <property name="border_width">4</property>
+	      <property agent="glademm" name="cxx_visibility">protected</property>
+	      <property name="visible">True</property>
+	      <property name="can_default">True</property>
+	      <property name="can_focus">True</property>
+	      <property name="label">gtk-ok</property>
+	      <property name="use_stock">True</property>
+	      <property name="relief">GTK_RELIEF_NORMAL</property>
+	      <property name="focus_on_click">True</property>
+	      <signal name="clicked" handler="on_prefsOkbutton_clicked" last_modification_time="Sun, 22 Jun 2003 17:37:34 GMT"/>
+	    </widget>
+	  </child>
+	</widget>
+	<packing>
+	  <property name="padding">0</property>
+	  <property name="expand">False</property>
+	  <property name="fill">True</property>
+	  <property name="pack_type">GTK_PACK_END</property>
+	</packing>
+      </child>
+
+      <child>
+	<widget class="GtkNotebook" id="prefsNotebook">
+	  <property agent="glademm" name="cxx_visibility">protected</property>
+	  <property name="visible">True</property>
+	  <property name="can_focus">True</property>
+	  <property name="show_tabs">True</property>
+	  <property name="show_border">True</property>
+	  <property name="tab_pos">GTK_POS_TOP</property>
+	  <property name="scrollable">False</property>
+	  <property name="enable_popup">False</property>
+
+	  <child>
+	    <widget class="GtkTable" id="generalTable">
+	      <property agent="glademm" name="cxx_visibility">protected</property>
+	      <property name="visible">True</property>
+	      <property name="n_rows">4</property>
+	      <property name="n_columns">2</property>
+	      <property name="homogeneous">False</property>
+	      <property name="row_spacing">0</property>
+	      <property name="column_spacing">0</property>
+
+	      <child>
+		<widget class="GtkLabel" id="apiKeyLabel">
+		  <property agent="glademm" name="cxx_visibility">protected</property>
+		  <property name="visible">True</property>
+		  <property name="label" translatable="yes">Google API key:</property>
+		  <property name="use_underline">False</property>
+		  <property name="use_markup">False</property>
+		  <property name="justify">GTK_JUSTIFY_LEFT</property>
+		  <property name="wrap">False</property>
+		  <property name="selectable">False</property>
+		  <property name="xalign">0</property>
+		  <property name="yalign">0.5</property>
+		  <property name="xpad">4</property>
+		  <property name="ypad">4</property>
+		  <property name="ellipsize">PANGO_ELLIPSIZE_NONE</property>
+		  <property name="width_chars">-1</property>
+		  <property name="single_line_mode">False</property>
+		  <property name="angle">0</property>
+		</widget>
+		<packing>
+		  <property name="left_attach">0</property>
+		  <property name="right_attach">1</property>
+		  <property name="top_attach">3</property>
+		  <property name="bottom_attach">4</property>
+		  <property name="x_options">fill</property>
+		  <property name="y_options">fill</property>
+		</packing>
+	      </child>
+
+	      <child>
+		<widget class="GtkEntry" id="apiKeyEntry">
+		  <property agent="glademm" name="cxx_visibility">protected</property>
+		  <property name="visible">True</property>
+		  <property name="can_focus">True</property>
+		  <property name="editable">True</property>
+		  <property name="visibility">True</property>
+		  <property name="max_length">0</property>
+		  <property name="text" translatable="yes"></property>
+		  <property name="has_frame">True</property>
+		  <property name="invisible_char">*</property>
+		  <property name="activates_default">False</property>
+		</widget>
+		<packing>
+		  <property name="left_attach">1</property>
+		  <property name="right_attach">2</property>
+		  <property name="top_attach">3</property>
+		  <property name="bottom_attach">4</property>
+		  <property name="x_padding">4</property>
+		  <property name="y_padding">4</property>
+		  <property name="y_options">fill</property>
+		</packing>
+	      </child>
+
+	      <child>
+		<widget class="GtkLabel" id="queriesLabel">
+		  <property name="visible">True</property>
+		  <property name="label" translatable="yes">Queries:</property>
+		  <property name="use_underline">False</property>
+		  <property name="use_markup">False</property>
+		  <property name="justify">GTK_JUSTIFY_LEFT</property>
+		  <property name="wrap">False</property>
+		  <property name="selectable">False</property>
+		  <property name="xalign">0</property>
+		  <property name="yalign">0.5</property>
+		  <property name="xpad">4</property>
+		  <property name="ypad">4</property>
+		  <property name="ellipsize">PANGO_ELLIPSIZE_NONE</property>
+		  <property name="width_chars">-1</property>
+		  <property name="single_line_mode">False</property>
+		  <property name="angle">0</property>
+		</widget>
+		<packing>
+		  <property name="left_attach">0</property>
+		  <property name="right_attach">1</property>
+		  <property name="top_attach">2</property>
+		  <property name="bottom_attach">3</property>
+		  <property name="x_options">fill</property>
+		  <property name="y_options">fill</property>
+		</packing>
+	      </child>
+
+	      <child>
+		<widget class="GtkCheckButton" id="enableCompletionCheckbutton">
+		  <property agent="glademm" name="cxx_visibility">protected</property>
+		  <property name="visible">True</property>
+		  <property name="can_focus">True</property>
+		  <property name="label" translatable="yes">Enable search terms suggestion</property>
+		  <property name="use_underline">True</property>
+		  <property name="relief">GTK_RELIEF_NORMAL</property>
+		  <property name="focus_on_click">True</property>
+		  <property name="active">False</property>
+		  <property name="inconsistent">False</property>
+		  <property name="draw_indicator">True</property>
+		</widget>
+		<packing>
+		  <property name="left_attach">1</property>
+		  <property name="right_attach">2</property>
+		  <property name="top_attach">2</property>
+		  <property name="bottom_attach">3</property>
+		  <property name="x_padding">4</property>
+		  <property name="y_padding">4</property>
+		  <property name="y_options">fill</property>
+		</packing>
+	      </child>
+
+	      <child>
+		<widget class="GtkColorButton" id="newResultsColorbutton">
+		  <property agent="glademm" name="cxx_visibility">protected</property>
+		  <property name="visible">True</property>
+		  <property name="can_focus">True</property>
+		  <property name="use_alpha">False</property>
+		  <property name="focus_on_click">True</property>
+		</widget>
+		<packing>
+		  <property name="left_attach">1</property>
+		  <property name="right_attach">2</property>
+		  <property name="top_attach">1</property>
+		  <property name="bottom_attach">2</property>
+		  <property name="x_padding">4</property>
+		  <property name="y_padding">4</property>
+		  <property name="y_options">fill</property>
+		</packing>
+	      </child>
+
+	      <child>
+		<widget class="GtkCheckButton" id="ignoreRobotsCheckbutton">
+		  <property agent="glademm" name="cxx_visibility">protected</property>
+		  <property name="visible">True</property>
+		  <property name="can_focus">True</property>
+		  <property name="label" translatable="yes">Ignore robots.txt and Robots META tag</property>
+		  <property name="use_underline">True</property>
+		  <property name="relief">GTK_RELIEF_NORMAL</property>
+		  <property name="focus_on_click">True</property>
+		  <property name="active">False</property>
+		  <property name="inconsistent">False</property>
+		  <property name="draw_indicator">True</property>
+		</widget>
+		<packing>
+		  <property name="left_attach">1</property>
+		  <property name="right_attach">2</property>
+		  <property name="top_attach">0</property>
+		  <property name="bottom_attach">1</property>
+		  <property name="x_padding">4</property>
+		  <property name="y_padding">4</property>
+		  <property name="y_options">fill</property>
+		</packing>
+	      </child>
+
+	      <child>
+		<widget class="GtkLabel" id="robotsLabels">
+		  <property agent="glademm" name="cxx_visibility">protected</property>
+		  <property name="visible">True</property>
+		  <property name="label" translatable="yes">HTTP crawling:</property>
+		  <property name="use_underline">False</property>
+		  <property name="use_markup">False</property>
+		  <property name="justify">GTK_JUSTIFY_LEFT</property>
+		  <property name="wrap">False</property>
+		  <property name="selectable">False</property>
+		  <property name="xalign">0</property>
+		  <property name="yalign">0.5</property>
+		  <property name="xpad">4</property>
+		  <property name="ypad">4</property>
+		  <property name="ellipsize">PANGO_ELLIPSIZE_NONE</property>
+		  <property name="width_chars">-1</property>
+		  <property name="single_line_mode">False</property>
+		  <property name="angle">0</property>
+		</widget>
+		<packing>
+		  <property name="left_attach">0</property>
+		  <property name="right_attach">1</property>
+		  <property name="top_attach">0</property>
+		  <property name="bottom_attach">1</property>
+		  <property name="x_options">fill</property>
+		  <property name="y_options"></property>
+		</packing>
+	      </child>
+
+	      <child>
+		<widget class="GtkLabel" id="newResultsLabel">
+		  <property name="visible">True</property>
+		  <property name="label" translatable="yes">New results:</property>
+		  <property name="use_underline">False</property>
+		  <property name="use_markup">False</property>
+		  <property name="justify">GTK_JUSTIFY_LEFT</property>
+		  <property name="wrap">False</property>
+		  <property name="selectable">False</property>
+		  <property name="xalign">0</property>
+		  <property name="yalign">0.5</property>
+		  <property name="xpad">4</property>
+		  <property name="ypad">4</property>
+		  <property name="ellipsize">PANGO_ELLIPSIZE_NONE</property>
+		  <property name="width_chars">-1</property>
+		  <property name="single_line_mode">False</property>
+		  <property name="angle">0</property>
+		</widget>
+		<packing>
+		  <property name="left_attach">0</property>
+		  <property name="right_attach">1</property>
+		  <property name="top_attach">1</property>
+		  <property name="bottom_attach">2</property>
+		  <property name="x_options">fill</property>
+		  <property name="y_options">fill</property>
+		</packing>
+	      </child>
+	    </widget>
+	    <packing>
+	      <property name="tab_expand">False</property>
+	      <property name="tab_fill">True</property>
+	    </packing>
+	  </child>
+
+	  <child>
+	    <widget class="GtkLabel" id="label65">
+	      <property name="visible">True</property>
+	      <property name="label" translatable="yes">General</property>
+	      <property name="use_underline">False</property>
+	      <property name="use_markup">False</property>
+	      <property name="justify">GTK_JUSTIFY_LEFT</property>
+	      <property name="wrap">False</property>
+	      <property name="selectable">False</property>
+	      <property name="xalign">0.5</property>
+	      <property name="yalign">0.5</property>
+	      <property name="xpad">0</property>
+	      <property name="ypad">0</property>
+	      <property name="ellipsize">PANGO_ELLIPSIZE_NONE</property>
+	      <property name="width_chars">-1</property>
+	      <property name="single_line_mode">False</property>
+	      <property name="angle">0</property>
+	    </widget>
+	    <packing>
+	      <property name="type">tab</property>
+	    </packing>
+	  </child>
+
+	  <child>
+	    <widget class="GtkTable" id="table2">
+	      <property name="visible">True</property>
+	      <property name="n_rows">3</property>
+	      <property name="n_columns">1</property>
+	      <property name="homogeneous">False</property>
+	      <property name="row_spacing">0</property>
+	      <property name="column_spacing">0</property>
+
+	      <child>
+		<widget class="GtkRadioButton" id="directConnectionRadiobutton">
+		  <property agent="glademm" name="cxx_visibility">protected</property>
+		  <property name="visible">True</property>
+		  <property name="can_focus">True</property>
+		  <property name="label" translatable="yes">Direct connection to the Internet</property>
+		  <property name="use_underline">True</property>
+		  <property name="relief">GTK_RELIEF_NORMAL</property>
+		  <property name="focus_on_click">True</property>
+		  <property name="active">True</property>
+		  <property name="inconsistent">False</property>
+		  <property name="draw_indicator">True</property>
+		  <signal name="toggled" handler="on_directConnectionRadiobutton_toggled" last_modification_time="Fri, 23 Mar 2007 13:40:21 GMT"/>
+		</widget>
+		<packing>
+		  <property name="left_attach">0</property>
+		  <property name="right_attach">1</property>
+		  <property name="top_attach">0</property>
+		  <property name="bottom_attach">1</property>
+		  <property name="x_padding">4</property>
+		  <property name="y_padding">4</property>
+		  <property name="y_options">fill</property>
+		</packing>
+	      </child>
+
+	      <child>
+		<widget class="GtkRadioButton" id="proxyRadiobutton">
+		  <property agent="glademm" name="cxx_visibility">protected</property>
+		  <property name="visible">True</property>
+		  <property name="can_focus">True</property>
+		  <property name="label" translatable="yes">Manual proxy configuration:</property>
+		  <property name="use_underline">True</property>
+		  <property name="relief">GTK_RELIEF_NORMAL</property>
+		  <property name="focus_on_click">True</property>
+		  <property name="active">False</property>
+		  <property name="inconsistent">False</property>
+		  <property name="draw_indicator">True</property>
+		  <property name="group">directConnectionRadiobutton</property>
+		</widget>
+		<packing>
+		  <property name="left_attach">0</property>
+		  <property name="right_attach">1</property>
+		  <property name="top_attach">1</property>
+		  <property name="bottom_attach">2</property>
+		  <property name="x_padding">4</property>
+		  <property name="y_padding">4</property>
+		  <property name="y_options">fill</property>
+		</packing>
+	      </child>
+
+	      <child>
+		<widget class="GtkTable" id="table3">
+		  <property name="visible">True</property>
+		  <property name="n_rows">3</property>
+		  <property name="n_columns">2</property>
+		  <property name="homogeneous">False</property>
+		  <property name="row_spacing">0</property>
+		  <property name="column_spacing">0</property>
+
+		  <child>
+		    <widget class="GtkLabel" id="proxyAddressLabel">
+		      <property name="visible">True</property>
+		      <property name="label" translatable="yes">Address:</property>
+		      <property name="use_underline">False</property>
+		      <property name="use_markup">False</property>
+		      <property name="justify">GTK_JUSTIFY_LEFT</property>
+		      <property name="wrap">False</property>
+		      <property name="selectable">False</property>
+		      <property name="xalign">0</property>
+		      <property name="yalign">0.5</property>
+		      <property name="xpad">0</property>
+		      <property name="ypad">0</property>
+		      <property name="ellipsize">PANGO_ELLIPSIZE_NONE</property>
+		      <property name="width_chars">-1</property>
+		      <property name="single_line_mode">False</property>
+		      <property name="angle">0</property>
+		    </widget>
+		    <packing>
+		      <property name="left_attach">0</property>
+		      <property name="right_attach">1</property>
+		      <property name="top_attach">1</property>
+		      <property name="bottom_attach">2</property>
+		      <property name="x_padding">4</property>
+		      <property name="y_padding">4</property>
+		      <property name="x_options">fill</property>
+		      <property name="y_options">fill</property>
+		    </packing>
+		  </child>
+
+		  <child>
+		    <widget class="GtkEntry" id="proxyAddressEntry">
+		      <property agent="glademm" name="cxx_visibility">protected</property>
+		      <property name="visible">True</property>
+		      <property name="can_focus">True</property>
+		      <property name="editable">True</property>
+		      <property name="visibility">True</property>
+		      <property name="max_length">0</property>
+		      <property name="text" translatable="yes"></property>
+		      <property name="has_frame">True</property>
+		      <property name="invisible_char">*</property>
+		      <property name="activates_default">False</property>
+		    </widget>
+		    <packing>
+		      <property name="left_attach">1</property>
+		      <property name="right_attach">2</property>
+		      <property name="top_attach">1</property>
+		      <property name="bottom_attach">2</property>
+		      <property name="x_padding">4</property>
+		      <property name="y_padding">4</property>
+		      <property name="y_options">fill</property>
+		    </packing>
+		  </child>
+
+		  <child>
+		    <widget class="GtkLabel" id="proxyTypeLabel">
+		      <property name="visible">True</property>
+		      <property name="label" translatable="yes">Type:</property>
+		      <property name="use_underline">False</property>
+		      <property name="use_markup">False</property>
+		      <property name="justify">GTK_JUSTIFY_LEFT</property>
+		      <property name="wrap">False</property>
+		      <property name="selectable">False</property>
+		      <property name="xalign">0</property>
+		      <property name="yalign">0.5</property>
+		      <property name="xpad">0</property>
+		      <property name="ypad">0</property>
+		      <property name="ellipsize">PANGO_ELLIPSIZE_NONE</property>
+		      <property name="width_chars">-1</property>
+		      <property name="single_line_mode">False</property>
+		      <property name="angle">0</property>
+		    </widget>
+		    <packing>
+		      <property name="left_attach">0</property>
+		      <property name="right_attach">1</property>
+		      <property name="top_attach">0</property>
+		      <property name="bottom_attach">1</property>
+		      <property name="x_padding">4</property>
+		      <property name="y_padding">4</property>
+		      <property name="x_options">fill</property>
+		      <property name="y_options">fill</property>
+		    </packing>
+		  </child>
+
+		  <child>
+		    <widget class="GtkLabel" id="proxyPortLabel">
+		      <property name="visible">True</property>
+		      <property name="label" translatable="yes">Port:</property>
+		      <property name="use_underline">False</property>
+		      <property name="use_markup">False</property>
+		      <property name="justify">GTK_JUSTIFY_LEFT</property>
+		      <property name="wrap">False</property>
+		      <property name="selectable">False</property>
+		      <property name="xalign">0</property>
+		      <property name="yalign">0.5</property>
+		      <property name="xpad">0</property>
+		      <property name="ypad">0</property>
+		      <property name="ellipsize">PANGO_ELLIPSIZE_NONE</property>
+		      <property name="width_chars">-1</property>
+		      <property name="single_line_mode">False</property>
+		      <property name="angle">0</property>
+		    </widget>
+		    <packing>
+		      <property name="left_attach">0</property>
+		      <property name="right_attach">1</property>
+		      <property name="top_attach">2</property>
+		      <property name="bottom_attach">3</property>
+		      <property name="x_padding">4</property>
+		      <property name="y_padding">4</property>
+		      <property name="x_options">fill</property>
+		      <property name="y_options">fill</property>
+		    </packing>
+		  </child>
+
+		  <child>
+		    <widget class="GtkSpinButton" id="proxyPortSpinbutton">
+		      <property agent="glademm" name="cxx_visibility">protected</property>
+		      <property name="visible">True</property>
+		      <property name="can_focus">True</property>
+		      <property name="climb_rate">1</property>
+		      <property name="digits">0</property>
+		      <property name="numeric">False</property>
+		      <property name="update_policy">GTK_UPDATE_ALWAYS</property>
+		      <property name="snap_to_ticks">False</property>
+		      <property name="wrap">False</property>
+		      <property name="adjustment">80 1 65535 1 10 10</property>
+		    </widget>
+		    <packing>
+		      <property name="left_attach">1</property>
+		      <property name="right_attach">2</property>
+		      <property name="top_attach">2</property>
+		      <property name="bottom_attach">3</property>
+		      <property name="x_padding">4</property>
+		      <property name="y_padding">4</property>
+		      <property name="y_options"></property>
+		    </packing>
+		  </child>
+
+		  <child>
+		    <widget class="GtkComboBox" id="proxyTypeCombobox">
+		      <property agent="glademm" name="cxx_visibility">protected</property>
+		      <property name="visible">True</property>
+		      <property name="items" translatable="yes"></property>
+		      <property name="add_tearoffs">False</property>
+		      <property name="focus_on_click">True</property>
+		    </widget>
+		    <packing>
+		      <property name="left_attach">1</property>
+		      <property name="right_attach">2</property>
+		      <property name="top_attach">0</property>
+		      <property name="bottom_attach">1</property>
+		      <property name="x_padding">4</property>
+		      <property name="y_padding">4</property>
+		      <property name="y_options"></property>
+		    </packing>
+		  </child>
+		</widget>
+		<packing>
+		  <property name="left_attach">0</property>
+		  <property name="right_attach">1</property>
+		  <property name="top_attach">2</property>
+		  <property name="bottom_attach">3</property>
+		  <property name="x_options">fill</property>
+		</packing>
+	      </child>
+	    </widget>
+	    <packing>
+	      <property name="tab_expand">False</property>
+	      <property name="tab_fill">True</property>
+	    </packing>
+	  </child>
+
+	  <child>
+	    <widget class="GtkLabel" id="label69">
+	      <property name="visible">True</property>
+	      <property name="label" translatable="yes">Network</property>
+	      <property name="use_underline">False</property>
+	      <property name="use_markup">False</property>
+	      <property name="justify">GTK_JUSTIFY_LEFT</property>
+	      <property name="wrap">False</property>
+	      <property name="selectable">False</property>
+	      <property name="xalign">0.5</property>
+	      <property name="yalign">0.5</property>
+	      <property name="xpad">0</property>
+	      <property name="ypad">0</property>
+	      <property name="ellipsize">PANGO_ELLIPSIZE_NONE</property>
+	      <property name="width_chars">-1</property>
+	      <property name="single_line_mode">False</property>
+	      <property name="angle">0</property>
+	    </widget>
+	    <packing>
+	      <property name="type">tab</property>
+	    </packing>
+	  </child>
+
+	  <child>
+	    <widget class="GtkVBox" id="vbox2">
+	      <property name="visible">True</property>
+	      <property name="homogeneous">False</property>
+	      <property name="spacing">0</property>
+
+	      <child>
+		<widget class="GtkLabel" id="indexLabelsLabel">
+		  <property name="visible">True</property>
+		  <property name="label" translatable="yes">Labels are used to classify indexed documents:</property>
+		  <property name="use_underline">False</property>
+		  <property name="use_markup">False</property>
+		  <property name="justify">GTK_JUSTIFY_LEFT</property>
+		  <property name="wrap">True</property>
+		  <property name="selectable">False</property>
+		  <property name="xalign">0</property>
+		  <property name="yalign">0.5</property>
+		  <property name="xpad">4</property>
+		  <property name="ypad">4</property>
+		  <property name="ellipsize">PANGO_ELLIPSIZE_NONE</property>
+		  <property name="width_chars">-1</property>
+		  <property name="single_line_mode">False</property>
+		  <property name="angle">0</property>
+		</widget>
+		<packing>
+		  <property name="padding">4</property>
+		  <property name="expand">False</property>
+		  <property name="fill">False</property>
+		</packing>
+	      </child>
+
+	      <child>
+		<widget class="GtkHBox" id="hbox57">
+		  <property name="visible">True</property>
+		  <property name="homogeneous">False</property>
+		  <property name="spacing">0</property>
+
+		  <child>
+		    <widget class="GtkScrolledWindow" id="scrolledwindow1">
+		      <property name="border_width">4</property>
+		      <property name="visible">True</property>
+		      <property name="can_focus">True</property>
+		      <property name="hscrollbar_policy">GTK_POLICY_AUTOMATIC</property>
+		      <property name="vscrollbar_policy">GTK_POLICY_AUTOMATIC</property>
+		      <property name="shadow_type">GTK_SHADOW_NONE</property>
+		      <property name="window_placement">GTK_CORNER_TOP_LEFT</property>
+
+		      <child>
+			<widget class="GtkTreeView" id="labelsTreeview">
+			  <property agent="glademm" name="cxx_visibility">protected</property>
+			  <property name="visible">True</property>
+			  <property name="can_focus">True</property>
+			  <property name="headers_visible">True</property>
+			  <property name="rules_hint">False</property>
+			  <property name="reorderable">False</property>
+			  <property name="enable_search">True</property>
+			  <property name="fixed_height_mode">True</property>
+			  <property name="hover_selection">False</property>
+			  <property name="hover_expand">False</property>
+			</widget>
+		      </child>
+		    </widget>
+		    <packing>
+		      <property name="padding">0</property>
+		      <property name="expand">True</property>
+		      <property name="fill">True</property>
+		    </packing>
+		  </child>
+
+		  <child>
+		    <widget class="GtkVButtonBox" id="vbuttonbox1">
+		      <property name="visible">True</property>
+		      <property name="layout_style">GTK_BUTTONBOX_START</property>
+		      <property name="spacing">0</property>
+
+		      <child>
+			<widget class="GtkButton" id="addLabelButton">
+			  <property name="border_width">4</property>
+			  <property agent="glademm" name="cxx_visibility">protected</property>
+			  <property name="visible">True</property>
+			  <property name="can_default">True</property>
+			  <property name="can_focus">True</property>
+			  <property name="relief">GTK_RELIEF_NORMAL</property>
+			  <property name="focus_on_click">True</property>
+			  <signal name="clicked" handler="on_addLabelButton_clicked" last_modification_time="Wed, 28 Apr 2004 17:31:55 GMT"/>
+
+			  <child>
+			    <widget class="GtkAlignment" id="alignment37">
+			      <property name="visible">True</property>
+			      <property name="xalign">0.5</property>
+			      <property name="yalign">0.5</property>
+			      <property name="xscale">0</property>
+			      <property name="yscale">0</property>
+			      <property name="top_padding">0</property>
+			      <property name="bottom_padding">0</property>
+			      <property name="left_padding">0</property>
+			      <property name="right_padding">0</property>
+
+			      <child>
+				<widget class="GtkHBox" id="hbox58">
+				  <property name="visible">True</property>
+				  <property name="homogeneous">False</property>
+				  <property name="spacing">2</property>
+
+				  <child>
+				    <widget class="GtkImage" id="image725">
+				      <property name="visible">True</property>
+				      <property name="stock">gtk-add</property>
+				      <property name="icon_size">4</property>
+				      <property name="xalign">0.5</property>
+				      <property name="yalign">0.5</property>
+				      <property name="xpad">0</property>
+				      <property name="ypad">0</property>
+				    </widget>
+				    <packing>
+				      <property name="padding">0</property>
+				      <property name="expand">False</property>
+				      <property name="fill">False</property>
+				    </packing>
+				  </child>
+
+				  <child>
+				    <widget class="GtkLabel" id="label71">
+				      <property name="visible">True</property>
+				      <property name="label" translatable="yes">Add</property>
+				      <property name="use_underline">True</property>
+				      <property name="use_markup">False</property>
+				      <property name="justify">GTK_JUSTIFY_LEFT</property>
+				      <property name="wrap">False</property>
+				      <property name="selectable">False</property>
+				      <property name="xalign">0.5</property>
+				      <property name="yalign">0.5</property>
+				      <property name="xpad">0</property>
+				      <property name="ypad">0</property>
+				      <property name="ellipsize">PANGO_ELLIPSIZE_NONE</property>
+				      <property name="width_chars">-1</property>
+				      <property name="single_line_mode">False</property>
+				      <property name="angle">0</property>
+				    </widget>
+				    <packing>
+				      <property name="padding">0</property>
+				      <property name="expand">False</property>
+				      <property name="fill">False</property>
+				    </packing>
+				  </child>
+				</widget>
+			      </child>
+			    </widget>
+			  </child>
+			</widget>
+		      </child>
+
+		      <child>
+			<widget class="GtkButton" id="removeLabelButton">
+			  <property name="border_width">4</property>
+			  <property agent="glademm" name="cxx_visibility">protected</property>
+			  <property name="visible">True</property>
+			  <property name="can_default">True</property>
+			  <property name="can_focus">True</property>
+			  <property name="relief">GTK_RELIEF_NORMAL</property>
+			  <property name="focus_on_click">True</property>
+			  <signal name="clicked" handler="on_removeLabelButton_clicked" last_modification_time="Wed, 28 Apr 2004 17:32:01 GMT"/>
+
+			  <child>
+			    <widget class="GtkAlignment" id="alignment38">
+			      <property name="visible">True</property>
+			      <property name="xalign">0.5</property>
+			      <property name="yalign">0.5</property>
+			      <property name="xscale">0</property>
+			      <property name="yscale">0</property>
+			      <property name="top_padding">0</property>
+			      <property name="bottom_padding">0</property>
+			      <property name="left_padding">0</property>
+			      <property name="right_padding">0</property>
+
+			      <child>
+				<widget class="GtkHBox" id="hbox59">
+				  <property name="visible">True</property>
+				  <property name="homogeneous">False</property>
+				  <property name="spacing">2</property>
+
+				  <child>
+				    <widget class="GtkImage" id="image726">
+				      <property name="visible">True</property>
+				      <property name="stock">gtk-remove</property>
+				      <property name="icon_size">4</property>
+				      <property name="xalign">0.5</property>
+				      <property name="yalign">0.5</property>
+				      <property name="xpad">0</property>
+				      <property name="ypad">0</property>
+				    </widget>
+				    <packing>
+				      <property name="padding">0</property>
+				      <property name="expand">False</property>
+				      <property name="fill">False</property>
+				    </packing>
+				  </child>
+
+				  <child>
+				    <widget class="GtkLabel" id="label72">
+				      <property name="visible">True</property>
+				      <property name="label" translatable="yes">Remove</property>
+				      <property name="use_underline">True</property>
+				      <property name="use_markup">False</property>
+				      <property name="justify">GTK_JUSTIFY_LEFT</property>
+				      <property name="wrap">False</property>
+				      <property name="selectable">False</property>
+				      <property name="xalign">0.5</property>
+				      <property name="yalign">0.5</property>
+				      <property name="xpad">0</property>
+				      <property name="ypad">0</property>
+				      <property name="ellipsize">PANGO_ELLIPSIZE_NONE</property>
+				      <property name="width_chars">-1</property>
+				      <property name="single_line_mode">False</property>
+				      <property name="angle">0</property>
+				    </widget>
+				    <packing>
+				      <property name="padding">0</property>
+				      <property name="expand">False</property>
+				      <property name="fill">False</property>
+				    </packing>
+				  </child>
+				</widget>
+			      </child>
+			    </widget>
+			  </child>
+			</widget>
+		      </child>
+		    </widget>
+		    <packing>
+		      <property name="padding">0</property>
+		      <property name="expand">False</property>
+		      <property name="fill">True</property>
+		    </packing>
+		  </child>
+		</widget>
+		<packing>
+		  <property name="padding">4</property>
+		  <property name="expand">True</property>
+		  <property name="fill">True</property>
+		</packing>
+	      </child>
+	    </widget>
+	    <packing>
+	      <property name="tab_expand">False</property>
+	      <property name="tab_fill">True</property>
+	    </packing>
+	  </child>
+
+	  <child>
+	    <widget class="GtkLabel" id="label73">
+	      <property name="visible">True</property>
+	      <property name="label" translatable="yes">Labels</property>
+	      <property name="use_underline">False</property>
+	      <property name="use_markup">False</property>
+	      <property name="justify">GTK_JUSTIFY_LEFT</property>
+	      <property name="wrap">False</property>
+	      <property name="selectable">False</property>
+	      <property name="xalign">0.5</property>
+	      <property name="yalign">0.5</property>
+	      <property name="xpad">0</property>
+	      <property name="ypad">0</property>
+	      <property name="ellipsize">PANGO_ELLIPSIZE_NONE</property>
+	      <property name="width_chars">-1</property>
+	      <property name="single_line_mode">False</property>
+	      <property name="angle">0</property>
+	    </widget>
+	    <packing>
+	      <property name="type">tab</property>
+	    </packing>
+	  </child>
+
+	  <child>
+	    <widget class="GtkVBox" id="vbox3">
+	      <property name="visible">True</property>
+	      <property name="homogeneous">False</property>
+	      <property name="spacing">0</property>
+
+	      <child>
+		<widget class="GtkLabel" id="directoriesLabel">
+		  <property name="visible">True</property>
+		  <property name="label" translatable="yes">These directories will be indexed and optionally monitored for changes:</property>
+		  <property name="use_underline">False</property>
+		  <property name="use_markup">False</property>
+		  <property name="justify">GTK_JUSTIFY_LEFT</property>
+		  <property name="wrap">True</property>
+		  <property name="selectable">False</property>
+		  <property name="xalign">0</property>
+		  <property name="yalign">0.5</property>
+		  <property name="xpad">4</property>
+		  <property name="ypad">4</property>
+		  <property name="ellipsize">PANGO_ELLIPSIZE_NONE</property>
+		  <property name="width_chars">-1</property>
+		  <property name="single_line_mode">False</property>
+		  <property name="angle">0</property>
+		</widget>
+		<packing>
+		  <property name="padding">4</property>
+		  <property name="expand">False</property>
+		  <property name="fill">False</property>
+		</packing>
+	      </child>
+
+	      <child>
+		<widget class="GtkHBox" id="hbox60">
+		  <property name="visible">True</property>
+		  <property name="homogeneous">False</property>
+		  <property name="spacing">0</property>
+
+		  <child>
+		    <widget class="GtkScrolledWindow" id="scrolledwindow2">
+		      <property name="border_width">4</property>
+		      <property name="visible">True</property>
+		      <property name="can_focus">True</property>
+		      <property name="hscrollbar_policy">GTK_POLICY_AUTOMATIC</property>
+		      <property name="vscrollbar_policy">GTK_POLICY_AUTOMATIC</property>
+		      <property name="shadow_type">GTK_SHADOW_NONE</property>
+		      <property name="window_placement">GTK_CORNER_TOP_LEFT</property>
+
+		      <child>
+			<widget class="GtkTreeView" id="directoriesTreeview">
+			  <property agent="glademm" name="cxx_visibility">protected</property>
+			  <property name="visible">True</property>
+			  <property name="can_focus">True</property>
+			  <property name="headers_visible">True</property>
+			  <property name="rules_hint">False</property>
+			  <property name="reorderable">False</property>
+			  <property name="enable_search">True</property>
+			  <property name="fixed_height_mode">True</property>
+			  <property name="hover_selection">False</property>
+			  <property name="hover_expand">False</property>
+			</widget>
+		      </child>
+		    </widget>
+		    <packing>
+		      <property name="padding">0</property>
+		      <property name="expand">True</property>
+		      <property name="fill">True</property>
+		    </packing>
+		  </child>
+
+		  <child>
+		    <widget class="GtkVButtonBox" id="vbuttonbox2">
+		      <property name="visible">True</property>
+		      <property name="layout_style">GTK_BUTTONBOX_START</property>
+		      <property name="spacing">0</property>
+
+		      <child>
+			<widget class="GtkButton" id="addDirectoryButton">
+			  <property name="border_width">4</property>
+			  <property agent="glademm" name="cxx_visibility">protected</property>
+			  <property name="visible">True</property>
+			  <property name="can_default">True</property>
+			  <property name="can_focus">True</property>
+			  <property name="relief">GTK_RELIEF_NORMAL</property>
+			  <property name="focus_on_click">True</property>
+			  <signal name="clicked" handler="on_addDirectoryButton_clicked" last_modification_time="Sun, 20 Aug 2006 07:33:34 GMT"/>
+
+			  <child>
+			    <widget class="GtkAlignment" id="alignment39">
+			      <property name="visible">True</property>
+			      <property name="xalign">0.5</property>
+			      <property name="yalign">0.5</property>
+			      <property name="xscale">0</property>
+			      <property name="yscale">0</property>
+			      <property name="top_padding">0</property>
+			      <property name="bottom_padding">0</property>
+			      <property name="left_padding">0</property>
+			      <property name="right_padding">0</property>
+
+			      <child>
+				<widget class="GtkHBox" id="hbox61">
+				  <property name="visible">True</property>
+				  <property name="homogeneous">False</property>
+				  <property name="spacing">2</property>
+
+				  <child>
+				    <widget class="GtkImage" id="image727">
+				      <property name="visible">True</property>
+				      <property name="stock">gtk-add</property>
+				      <property name="icon_size">4</property>
+				      <property name="xalign">0.5</property>
+				      <property name="yalign">0.5</property>
+				      <property name="xpad">0</property>
+				      <property name="ypad">0</property>
+				    </widget>
+				    <packing>
+				      <property name="padding">0</property>
+				      <property name="expand">False</property>
+				      <property name="fill">False</property>
+				    </packing>
+				  </child>
+
+				  <child>
+				    <widget class="GtkLabel" id="label75">
+				      <property name="visible">True</property>
+				      <property name="label" translatable="yes">Add</property>
+				      <property name="use_underline">True</property>
+				      <property name="use_markup">False</property>
+				      <property name="justify">GTK_JUSTIFY_LEFT</property>
+				      <property name="wrap">False</property>
+				      <property name="selectable">False</property>
+				      <property name="xalign">0.5</property>
+				      <property name="yalign">0.5</property>
+				      <property name="xpad">0</property>
+				      <property name="ypad">0</property>
+				      <property name="ellipsize">PANGO_ELLIPSIZE_NONE</property>
+				      <property name="width_chars">-1</property>
+				      <property name="single_line_mode">False</property>
+				      <property name="angle">0</property>
+				    </widget>
+				    <packing>
+				      <property name="padding">0</property>
+				      <property name="expand">False</property>
+				      <property name="fill">False</property>
+				    </packing>
+				  </child>
+				</widget>
+			      </child>
+			    </widget>
+			  </child>
+			</widget>
+		      </child>
+
+		      <child>
+			<widget class="GtkButton" id="removeDirectoryButton">
+			  <property name="border_width">4</property>
+			  <property agent="glademm" name="cxx_visibility">protected</property>
+			  <property name="visible">True</property>
+			  <property name="can_default">True</property>
+			  <property name="can_focus">True</property>
+			  <property name="label">gtk-remove</property>
+			  <property name="use_stock">True</property>
+			  <property name="relief">GTK_RELIEF_NORMAL</property>
+			  <property name="focus_on_click">True</property>
+			  <signal name="clicked" handler="on_removeDirectoryButton_clicked" last_modification_time="Sun, 20 Aug 2006 07:33:50 GMT"/>
+			</widget>
+		      </child>
+		    </widget>
+		    <packing>
+		      <property name="padding">0</property>
+		      <property name="expand">False</property>
+		      <property name="fill">True</property>
+		    </packing>
+		  </child>
+		</widget>
+		<packing>
+		  <property name="padding">4</property>
+		  <property name="expand">True</property>
+		  <property name="fill">True</property>
+		</packing>
+	      </child>
+
+	      <child>
+		<widget class="GtkLabel" id="label76">
+		  <property name="visible">True</property>
+		  <property name="label" translatable="yes">File patterns:</property>
+		  <property name="use_underline">False</property>
+		  <property name="use_markup">False</property>
+		  <property name="justify">GTK_JUSTIFY_LEFT</property>
+		  <property name="wrap">True</property>
+		  <property name="selectable">False</property>
+		  <property name="xalign">0</property>
+		  <property name="yalign">0.5</property>
+		  <property name="xpad">4</property>
+		  <property name="ypad">4</property>
+		  <property name="ellipsize">PANGO_ELLIPSIZE_NONE</property>
+		  <property name="width_chars">-1</property>
+		  <property name="single_line_mode">False</property>
+		  <property name="angle">0</property>
+		</widget>
+		<packing>
+		  <property name="padding">4</property>
+		  <property name="expand">False</property>
+		  <property name="fill">False</property>
+		</packing>
+	      </child>
+
+	      <child>
+		<widget class="GtkHBox" id="hbox62">
+		  <property name="visible">True</property>
+		  <property name="homogeneous">False</property>
+		  <property name="spacing">0</property>
+
+		  <child>
+		    <widget class="GtkVBox" id="vbox4">
+		      <property name="visible">True</property>
+		      <property name="homogeneous">False</property>
+		      <property name="spacing">0</property>
+
+		      <child>
+			<widget class="GtkScrolledWindow" id="scrolledwindow3">
+			  <property name="border_width">4</property>
+			  <property name="visible">True</property>
+			  <property name="can_focus">True</property>
+			  <property name="hscrollbar_policy">GTK_POLICY_AUTOMATIC</property>
+			  <property name="vscrollbar_policy">GTK_POLICY_AUTOMATIC</property>
+			  <property name="shadow_type">GTK_SHADOW_NONE</property>
+			  <property name="window_placement">GTK_CORNER_TOP_LEFT</property>
+
+			  <child>
+			    <widget class="GtkTreeView" id="patternsTreeview">
+			      <property agent="glademm" name="cxx_visibility">protected</property>
+			      <property name="visible">True</property>
+			      <property name="can_focus">True</property>
+			      <property name="headers_visible">True</property>
+			      <property name="rules_hint">False</property>
+			      <property name="reorderable">False</property>
+			      <property name="enable_search">True</property>
+			      <property name="fixed_height_mode">True</property>
+			      <property name="hover_selection">False</property>
+			      <property name="hover_expand">False</property>
+			    </widget>
+			  </child>
+			</widget>
+			<packing>
+			  <property name="padding">0</property>
+			  <property name="expand">True</property>
+			  <property name="fill">True</property>
+			</packing>
+		      </child>
+
+		      <child>
+			<widget class="GtkComboBox" id="patternsCombobox">
+			  <property agent="glademm" name="cxx_visibility">protected</property>
+			  <property name="visible">True</property>
+			  <property name="items" translatable="yes"></property>
+			  <property name="add_tearoffs">False</property>
+			  <property name="focus_on_click">True</property>
+			  <signal name="changed" handler="on_patternsCombobox_changed" last_modification_time="Tue, 03 Jul 2007 13:02:19 GMT"/>
+			</widget>
+			<packing>
+			  <property name="padding">4</property>
+			  <property name="expand">False</property>
+			  <property name="fill">True</property>
+			</packing>
+		      </child>
+		    </widget>
+		    <packing>
+		      <property name="padding">0</property>
+		      <property name="expand">True</property>
+		      <property name="fill">True</property>
+		    </packing>
+		  </child>
+
+		  <child>
+		    <widget class="GtkVButtonBox" id="vbuttonbox3">
+		      <property name="visible">True</property>
+		      <property name="layout_style">GTK_BUTTONBOX_START</property>
+		      <property name="spacing">0</property>
+
+		      <child>
+			<widget class="GtkButton" id="addPatternButton">
+			  <property name="border_width">4</property>
+			  <property agent="glademm" name="cxx_visibility">protected</property>
+			  <property name="visible">True</property>
+			  <property name="can_default">True</property>
+			  <property name="can_focus">True</property>
+			  <property name="relief">GTK_RELIEF_NORMAL</property>
+			  <property name="focus_on_click">True</property>
+			  <signal name="clicked" handler="on_addPatternButton_clicked" last_modification_time="Tue, 31 Oct 2006 14:48:22 GMT"/>
+
+			  <child>
+			    <widget class="GtkAlignment" id="alignment40">
+			      <property name="visible">True</property>
+			      <property name="xalign">0.5</property>
+			      <property name="yalign">0.5</property>
+			      <property name="xscale">0</property>
+			      <property name="yscale">0</property>
+			      <property name="top_padding">0</property>
+			      <property name="bottom_padding">0</property>
+			      <property name="left_padding">0</property>
+			      <property name="right_padding">0</property>
+
+			      <child>
+				<widget class="GtkHBox" id="hbox63">
+				  <property name="visible">True</property>
+				  <property name="homogeneous">False</property>
+				  <property name="spacing">2</property>
+
+				  <child>
+				    <widget class="GtkImage" id="image728">
+				      <property name="visible">True</property>
+				      <property name="stock">gtk-add</property>
+				      <property name="icon_size">4</property>
+				      <property name="xalign">0.5</property>
+				      <property name="yalign">0.5</property>
+				      <property name="xpad">0</property>
+				      <property name="ypad">0</property>
+				    </widget>
+				    <packing>
+				      <property name="padding">0</property>
+				      <property name="expand">False</property>
+				      <property name="fill">False</property>
+				    </packing>
+				  </child>
+
+				  <child>
+				    <widget class="GtkLabel" id="label77">
+				      <property name="visible">True</property>
+				      <property name="label" translatable="yes">Add</property>
+				      <property name="use_underline">True</property>
+				      <property name="use_markup">False</property>
+				      <property name="justify">GTK_JUSTIFY_LEFT</property>
+				      <property name="wrap">False</property>
+				      <property name="selectable">False</property>
+				      <property name="xalign">0.5</property>
+				      <property name="yalign">0.5</property>
+				      <property name="xpad">0</property>
+				      <property name="ypad">0</property>
+				      <property name="ellipsize">PANGO_ELLIPSIZE_NONE</property>
+				      <property name="width_chars">-1</property>
+				      <property name="single_line_mode">False</property>
+				      <property name="angle">0</property>
+				    </widget>
+				    <packing>
+				      <property name="padding">0</property>
+				      <property name="expand">False</property>
+				      <property name="fill">False</property>
+				    </packing>
+				  </child>
+				</widget>
+			      </child>
+			    </widget>
+			  </child>
+			</widget>
+		      </child>
+
+		      <child>
+			<widget class="GtkButton" id="removePatternButton">
+			  <property name="border_width">4</property>
+			  <property agent="glademm" name="cxx_visibility">protected</property>
+			  <property name="visible">True</property>
+			  <property name="can_default">True</property>
+			  <property name="can_focus">True</property>
+			  <property name="label">gtk-remove</property>
+			  <property name="use_stock">True</property>
+			  <property name="relief">GTK_RELIEF_NORMAL</property>
+			  <property name="focus_on_click">True</property>
+			  <signal name="clicked" handler="on_removePatternButton_clicked" last_modification_time="Tue, 31 Oct 2006 14:48:32 GMT"/>
+			</widget>
+		      </child>
+
+		      <child>
+			<widget class="GtkButton" id="resetPatternsButton">
+			  <property name="border_width">4</property>
+			  <property agent="glademm" name="cxx_visibility">protected</property>
+			  <property name="visible">True</property>
+			  <property name="can_default">True</property>
+			  <property name="can_focus">True</property>
+			  <property name="label" translatable="yes">Reset</property>
+			  <property name="use_underline">True</property>
+			  <property name="relief">GTK_RELIEF_NORMAL</property>
+			  <property name="focus_on_click">True</property>
+			  <signal name="clicked" handler="on_resetPatternsButton_clicked" last_modification_time="Mon, 24 Mar 2008 04:59:59 GMT"/>
+			</widget>
+		      </child>
+		    </widget>
+		    <packing>
+		      <property name="padding">0</property>
+		      <property name="expand">False</property>
+		      <property name="fill">True</property>
+		    </packing>
+		  </child>
+		</widget>
+		<packing>
+		  <property name="padding">4</property>
+		  <property name="expand">True</property>
+		  <property name="fill">True</property>
+		</packing>
+	      </child>
+	    </widget>
+	    <packing>
+	      <property name="tab_expand">False</property>
+	      <property name="tab_fill">True</property>
+	    </packing>
+	  </child>
+
+	  <child>
+	    <widget class="GtkLabel" id="label78">
+	      <property name="visible">True</property>
+	      <property name="label" translatable="yes">Indexing</property>
+	      <property name="use_underline">False</property>
+	      <property name="use_markup">False</property>
+	      <property name="justify">GTK_JUSTIFY_LEFT</property>
+	      <property name="wrap">False</property>
+	      <property name="selectable">False</property>
+	      <property name="xalign">0.5</property>
+	      <property name="yalign">0.5</property>
+	      <property name="xpad">0</property>
+	      <property name="ypad">0</property>
+	      <property name="ellipsize">PANGO_ELLIPSIZE_NONE</property>
+	      <property name="width_chars">-1</property>
+	      <property name="single_line_mode">False</property>
+	      <property name="angle">0</property>
+	    </widget>
+	    <packing>
+	      <property name="type">tab</property>
+	    </packing>
+	  </child>
+	</widget>
+	<packing>
+	  <property name="padding">0</property>
+	  <property name="expand">True</property>
+	  <property name="fill">True</property>
+	</packing>
+      </child>
+    </widget>
+  </child>
+</widget>
+
 </glade-interface>

Deleted: trunk/UI/GTK2/src/prefsDialog.cc
===================================================================
--- trunk/UI/GTK2/src/prefsDialog.cc	2008-11-16 14:12:42 UTC (rev 1413)
+++ trunk/UI/GTK2/src/prefsDialog.cc	2008-11-19 13:24:34 UTC (rev 1414)
@@ -1,773 +0,0 @@
-/*
- *  Copyright 2005-2008 Fabrice Colin
- *
- *  This program is free software; you can redistribute it and/or modify
- *  it under the terms of the GNU General Public License as published by
- *  the Free Software Foundation; either version 2 of the License, or
- *  (at your option) any later version.
- *
- *  This program is distributed in the hope that it will be useful,
- *  but WITHOUT ANY WARRANTY; without even the implied warranty of
- *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- *  GNU General Public License for more details.
- *
- *  You should have received a copy of the GNU General Public License
- *  along with this program; if not, write to the Free Software
- *  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
- */
-
-#include <stdlib.h>
-#include <iostream>
-#include <algorithm>
-#include <glibmm/convert.h>
-#include <gdkmm/color.h>
-#include <gtkmm/colorselection.h>
-#include <gtkmm/label.h>
-#include <gtkmm/entry.h>
-#include <gtkmm/menu.h>
-#include <gtkmm/cellrenderertext.h>
-
-#include "config.h"
-#include "NLS.h"
-#include "StringManip.h"
-#include "ModuleFactory.h"
-#include "PinotUtils.h"
-#include "prefsDialog.hh"
-
-using namespace std;
-using namespace Glib;
-using namespace Gdk;
-using namespace Gtk;
-
-prefsDialog::prefsDialog() :
-	prefsDialog_glade(),
-	m_settings(PinotSettings::getInstance()),
-	m_startDaemon(false)
-{
-	Color newColour;
-
-	newColour.set_red(m_settings.m_newResultsColourRed);
-	newColour.set_green(m_settings.m_newResultsColourGreen);
-	newColour.set_blue(m_settings.m_newResultsColourBlue);
-
-	// Initialize widgets
-	// Ignore robots directives
-	ignoreRobotsCheckbutton->set_active(m_settings.m_ignoreRobotsDirectives);
-	// Google API key
-	if (m_settings.m_googleAPIKey.empty() == false)
-	{
-		apiKeyEntry->set_text(m_settings.m_googleAPIKey);
-	}
-	// New results colour
-	newResultsColorbutton->set_color(newColour);
-	// Enable terms suggestion
-	enableCompletionCheckbutton->set_active(m_settings.m_suggestQueryTerms);
-
-	// Any plugin editable parameter ?
-	if (m_settings.m_editablePluginValues.empty() == false)
-	{
-		Glib::PropertyProxy<guint> columnsProp(generalTable->property_n_columns());
-		Glib::PropertyProxy<guint> rowsProp(generalTable->property_n_rows());
-		guint rowsCount = rowsProp.get_value();
-
-#ifdef DEBUG
-		cout << "prefsDialog: adding " << m_settings.m_editablePluginValues.size() << " more rows" << endl;
-#endif
-		generalTable->resize(rowsCount + m_settings.m_editablePluginValues.size(), columnsProp.get_value());
-
-		for (std::map<string, string>::const_iterator valueIter = m_settings.m_editablePluginValues.begin();
-			valueIter != m_settings.m_editablePluginValues.end(); ++valueIter)
-		{
-			++rowsCount;
-			attach_value_widgets(valueIter->first, valueIter->second, rowsCount);
-		}
-	}
-
-	populate_proxyTypeCombobox();
-	proxyRadiobutton->set_active(m_settings.m_proxyEnabled);
-	proxyAddressEntry->set_text(m_settings.m_proxyAddress);
-	proxyPortSpinbutton->set_value((double)m_settings.m_proxyPort);
-	int proxyType = 0;
-	if (m_settings.m_proxyType == "SOCKS4")
-	{
-		proxyType = 1;
-	}
-	else if (m_settings.m_proxyType == "SOCKS5")
-	{
-		proxyType = 2;
-	}
-	proxyTypeCombobox->set_active(proxyType);
-	on_directConnectionRadiobutton_toggled();
-
-	// Associate the columns model to the labels tree
-	m_refLabelsTree = ListStore::create(m_labelsColumns);
-	labelsTreeview->set_model(m_refLabelsTree);
-	TreeViewColumn *pColumn = new TreeViewColumn(_("Name"));
-	CellRendererText *pTextRenderer = new CellRendererText();
-	pTextRenderer->signal_edited().connect(sigc::mem_fun(*this, &prefsDialog::updateLabelRow));
-	pColumn->pack_start(*manage(pTextRenderer));
-	pColumn->set_cell_data_func(*pTextRenderer, sigc::mem_fun(*this, &prefsDialog::renderLabelNameColumn));
-	pColumn->add_attribute(pTextRenderer->property_text(), m_labelsColumns.m_name);
-	pColumn->set_resizable(true);
-	pColumn->set_sort_column(m_labelsColumns.m_name);
-	labelsTreeview->append_column(*manage(pColumn));
-	// Allow only single selection
-	labelsTreeview->get_selection()->set_mode(SELECTION_SINGLE);
-	populate_labelsTreeview();
-
-	// Associate the columns model to the directories tree
-	m_refDirectoriesTree = ListStore::create(m_directoriesColumns);
-	directoriesTreeview->set_model(m_refDirectoriesTree);
-	directoriesTreeview->append_column_editable(_("Monitor"), m_directoriesColumns.m_monitor);
-	directoriesTreeview->append_column(_("Location"), m_directoriesColumns.m_location);
-	// Allow only single selection
-	directoriesTreeview->get_selection()->set_mode(SELECTION_SINGLE);
-	populate_directoriesTreeview();
-
-	// Associate the columns model to the file patterns tree
-	m_refPatternsTree = ListStore::create(m_patternsColumns);
-	patternsTreeview->set_model(m_refPatternsTree);
-	patternsTreeview->append_column_editable(_("Pattern"), m_patternsColumns.m_location);
-	// Allow only single selection
-	patternsTreeview->get_selection()->set_mode(SELECTION_SINGLE);
-	populate_patternsCombobox();
-	populate_patternsTreeview(m_settings.m_filePatternsList, m_settings.m_isBlackList);
-
-	// Hide the Google API entry field ?
-	if (ModuleFactory::isSupported("googleapi") == false)
-	{
-		apiKeyLabel->hide();
-		apiKeyEntry->hide();
-	}
-
-	// Show The Indexing tab on first run
-	if ((m_settings.isFirstRun() == true) &&
-		(prefsNotebook != NULL) &&
-		(prefsNotebook->get_n_pages() > 3))
-	{
-		prefsNotebook->set_current_page(3);
-	}
-}
-
-prefsDialog::~prefsDialog()
-{
-}
-
-const set<string> &prefsDialog::getLabelsToAdd(void) const
-{
-	return m_addedLabels;
-}
-
-const set<string> &prefsDialog::getLabelsToDelete(void) const
-{
-	return m_deletedLabels;
-}
-
-bool prefsDialog::startDaemon(void) const
-{
-	return m_startDaemon;
-}
-
-void prefsDialog::attach_value_widgets(const string &name, const string &value, guint rowNumber)
-{
-	Label *valueLabel = manage(new Label(name + ":"));
-	Entry *valueEntry = manage(new Entry());
-
-	// These settings are what Glade-- would use
-	valueLabel->set_alignment(0,0.5); 
-	valueLabel->set_padding(4,4);
-	valueLabel->set_justify(Gtk::JUSTIFY_LEFT); 
-	valueLabel->set_line_wrap(false);
-	valueLabel->set_use_markup(false);
-	valueLabel->set_selectable(false);
-	valueLabel->set_ellipsize(Pango::ELLIPSIZE_NONE);
-	valueLabel->set_width_chars(-1);
-	valueLabel->set_angle(0);
-	valueLabel->set_single_line_mode(false);
-
-	valueEntry->set_flags(Gtk::CAN_FOCUS);
-	valueEntry->set_visibility(true);
-	valueEntry->set_editable(true);
-	valueEntry->set_max_length(0);
-	valueEntry->set_has_frame(true);
-	valueEntry->set_activates_default(false);
-
-	valueEntry->set_text(to_utf8(value));
-
-	generalTable->attach(*valueLabel, 0, 1, rowNumber, rowNumber + 1, Gtk::FILL, Gtk::FILL, 0, 0);
-	generalTable->attach(*valueEntry, 1, 2, rowNumber, rowNumber + 1, Gtk::EXPAND|Gtk::FILL, Gtk::FILL, 4, 4);
-
-	m_editableValueEntries.push_back(valueEntry);
-
-	valueLabel->show();
-	valueEntry->show();
-}
-
-void prefsDialog::populate_proxyTypeCombobox()
-{
-	proxyTypeCombobox->append_text("HTTP");
-	proxyTypeCombobox->append_text("SOCKS v4");
-	proxyTypeCombobox->append_text("SOCKS v5");
-}
-
-void prefsDialog::populate_labelsTreeview()
-{
-	TreeModel::iterator iter;
-	TreeModel::Row row;
-	set<string> &labels = m_settings.m_labels;
-
-	// Get labels directly from the daemon's index
-	IndexInterface *pDaemonIndex = m_settings.getIndex(m_settings.m_daemonIndexLocation);
-	if (pDaemonIndex != NULL)
-	{
-		set<string> indexLabels;
-
-		// Nothing might be found if we are upgrading from an older version
-		// and the daemon has not been run
-		if (pDaemonIndex->getLabels(indexLabels) == true)
-		{
-			labels.clear();
-
-			copy(indexLabels.begin(), indexLabels.end(),
-				inserter(labels, labels.begin()));
-		}
-#ifdef DEBUG
-		else cout << "prefsDialog::populate_labelsTreeview: relying on configuration file" << endl;
-#endif
-
-		delete pDaemonIndex;
-	}
-
-	if (labels.empty() == true)
-	{
-		// This button will stay disabled until labels are added to the list
-		removeLabelButton->set_sensitive(false);
-		return;
-	}
-
-	// Populate the tree
-	for (set<string>::const_iterator labelIter = labels.begin();
-		labelIter != labels.end();
-		++labelIter)
-	{
-		// Create a new row
-		iter = m_refLabelsTree->append();
-		row = *iter;
-		// Set its name
-		row[m_labelsColumns.m_name] = *labelIter;
-		// This allows to differentiate existing labels from new labels the user may create
-		row[m_labelsColumns.m_enabled] = true;
-	}
-
-	removeLabelButton->set_sensitive(true);
-}
-
-void prefsDialog::save_labelsTreeview()
-{
-	set<string> &labels = m_settings.m_labels;
-
-	labels.clear();
-
-	// Go through the labels tree
-	TreeModel::Children children = m_refLabelsTree->children();
-	if (children.empty() == false)
-	{
-		TreeModel::Children::iterator iter = children.begin();
-		for (; iter != children.end(); ++iter)
-		{
-			TreeModel::Row row = *iter;
-			ustring labelName(row[m_labelsColumns.m_name]);
-
-			// Check user didn't recreate this label after having deleted it
-			set<string>::iterator labelIter = m_deletedLabels.find(from_utf8(labelName));
-			if (labelIter != m_deletedLabels.end())
-			{
-				m_deletedLabels.erase(labelIter);
-			}
-			// Is this a new label ?
-			if (row[m_labelsColumns.m_enabled] == false)
-			{
-				m_addedLabels.insert(from_utf8(labelName));
-			}
-
-#ifdef DEBUG
-			cout << "prefsDialog::save_labelsTreeview: " << labelName << endl;
-#endif
-			// Add this new label to the settings
-			labels.insert(labelName);
-		}
-	}
-}
-
-void prefsDialog::populate_directoriesTreeview()
-{
-	TreeModel::iterator iter;
-	TreeModel::Row row;
-	ustring dirsString;
-
-	if (m_settings.m_indexableLocations.empty() == true)
-	{
-		// This button will stay disabled until directories are added to the list
-		removeDirectoryButton->set_sensitive(false);
-		return;
-	}
-
-	// Populate the tree
-	for (set<PinotSettings::IndexableLocation>::iterator dirIter = m_settings.m_indexableLocations.begin();
-		dirIter != m_settings.m_indexableLocations.end();
-		++dirIter)
-	{
-		// Create a new row
-		iter = m_refDirectoriesTree->append();
-		row = *iter;
-		row[m_directoriesColumns.m_monitor] = dirIter->m_monitor;
-		row[m_directoriesColumns.m_location] = dirIter->m_name;
-		dirsString += dirIter->m_name + (dirIter->m_monitor == true ? "1" : "0") + "|";
-	}
-
-	m_directoriesHash = StringManip::hashString(dirsString);
-	removeDirectoryButton->set_sensitive(true);
-}
-
-bool prefsDialog::save_directoriesTreeview()
-{
-	string dirsString;
-
-	// Clear the current settings
-	m_settings.m_indexableLocations.clear();
-
-	// Go through the directories tree
-	TreeModel::Children children = m_refDirectoriesTree->children();
-	if (children.empty() == false)
-	{
-		TreeModel::Children::iterator iter = children.begin();
-		for (; iter != children.end(); ++iter)
-		{
-			TreeModel::Row row = *iter;
-			PinotSettings::IndexableLocation indexableLocation;
-
-			// Add this new directory to the settings
-			indexableLocation.m_monitor = row[m_directoriesColumns.m_monitor];
-			indexableLocation.m_name = row[m_directoriesColumns.m_location];
-
-			string dirLabel("file://");
-			dirLabel += from_utf8(indexableLocation.m_name);
-
-			// Check user didn't recreate this directory after having deleted it
-			set<string>::iterator dirIter = m_deletedDirectories.find(dirLabel);
-			if (dirIter != m_deletedDirectories.end())
-			{
-				m_deletedDirectories.erase(dirIter);
-			}
-
-#ifdef DEBUG
-			cout << "prefsDialog::save_directoriesTreeview: " << indexableLocation.m_name << endl;
-#endif
-			m_settings.m_indexableLocations.insert(indexableLocation);
-			dirsString += indexableLocation.m_name + (indexableLocation.m_monitor == true ? "1" : "0") + "|";
-		}
-	}
-
-	if (m_directoriesHash != StringManip::hashString(dirsString))
-	{
-#ifdef DEBUG
-		cout << "prefsDialog::save_directoriesTreeview: directories changed" << endl;
-#endif
-		return true;
-	}
-
-	return false;
-}
-
-void prefsDialog::populate_patternsCombobox()
-{
-	patternsCombobox->append_text(_("Exclude these patterns from indexing"));
-	patternsCombobox->append_text(_("Only index these patterns"));
-}
-
-void prefsDialog::populate_patternsTreeview(const set<ustring> &patternsList, bool isBlackList)
-{
-	TreeModel::iterator iter;
-	TreeModel::Row row;
-	ustring patternsString;
-
-	if (patternsList.empty() == true)
-	{
-		// This button will stay disabled until a ppatern is added to the list
-		removePatternButton->set_sensitive(false);
-		return;
-	}
-
-	// Populate the tree
-	for (set<ustring>::iterator patternIter = patternsList.begin();
-		patternIter != patternsList.end();
-		++patternIter)
-	{
-		ustring pattern(*patternIter);
-
-		// Create a new row
-		iter = m_refPatternsTree->append();
-		row = *iter;
-		// Set its name
-		row[m_patternsColumns.m_location] = pattern;
-		patternsString += pattern + "|";
-	}
-
-	removePatternButton->set_sensitive(true);
-
-	// Is it a black or white list ?
-	if (isBlackList == true)
-	{
-		patternsCombobox->set_active(0);
-		patternsString += "0";
-	}
-	else
-	{
-		patternsCombobox->set_active(1);
-		patternsString += "1";
-	}
-
-	m_patternsHash = StringManip::hashString(patternsString);
-}
-
-bool prefsDialog::save_patternsTreeview()
-{
-	ustring patternsString;
-
-	// Clear the current settings
-	m_settings.m_filePatternsList.clear();
-
-	// Go through the file patterns tree
-	TreeModel::Children children = m_refPatternsTree->children();
-	if (children.empty() == false)
-	{
-		TreeModel::Children::iterator iter = children.begin();
-		for (; iter != children.end(); ++iter)
-		{
-			TreeModel::Row row = *iter;
-			ustring pattern(row[m_patternsColumns.m_location]);
-
-			if (pattern.empty() == false)
-			{
-				m_settings.m_filePatternsList.insert(pattern);
-				patternsString += pattern + "|";
-			}
-		}
-	}
-	if (patternsCombobox->get_active_row_number() == 0)
-	{
-		m_settings.m_isBlackList = true;
-		patternsString += "0";
-	}
-	else
-	{
-		m_settings.m_isBlackList = false;
-		patternsString += "1";
-	}
-
-	if (m_patternsHash != StringManip::hashString(patternsString))
-	{
-#ifdef DEBUG
-		cout << "prefsDialog::save_patternsTreeview: patterns changed" << endl;
-#endif
-		return true;
-	}
-
-	return false;
-}
-
-void prefsDialog::on_prefsOkbutton_clicked()
-{
-	// Synchronise widgets with settings
-	m_settings.m_ignoreRobotsDirectives = ignoreRobotsCheckbutton->get_active();
-	Color newColour = newResultsColorbutton->get_color();
-	m_settings.m_newResultsColourRed = newColour.get_red();
-	m_settings.m_newResultsColourGreen = newColour.get_green();
-	m_settings.m_newResultsColourBlue = newColour.get_blue();
-	m_settings.m_suggestQueryTerms = enableCompletionCheckbutton->get_active();
-	m_settings.m_googleAPIKey = apiKeyEntry->get_text();
-	// Any plugin editable parameter ?
-	if (m_settings.m_editablePluginValues.empty() == false)
-	{
-		std::map<string, string>::iterator valueIter = m_settings.m_editablePluginValues.begin();
-		vector<Entry *>::const_iterator entryIter = m_editableValueEntries.begin();
-		while ((valueIter != m_settings.m_editablePluginValues.end()) &&
-			(entryIter != m_editableValueEntries.end()))
-		{
-			ustring value((*entryIter)->get_text());
-
-			valueIter->second = from_utf8(value);
-
-			// Next
-			++valueIter;
-			++entryIter;
-		}
-	}
-
-	m_settings.m_proxyEnabled = proxyRadiobutton->get_active();
-	m_settings.m_proxyAddress = proxyAddressEntry->get_text();
-	m_settings.m_proxyPort = (unsigned int)proxyPortSpinbutton->get_value();
-	int proxyType = proxyTypeCombobox->get_active_row_number();
-	if (proxyType == 1)
-	{
-		m_settings.m_proxyType = "SOCKS4";
-	}
-	else if (proxyType == 2)
-	{
-		m_settings.m_proxyType = "SOCKS5";
-	}
-	else
-	{
-		m_settings.m_proxyType = "HTTP";
-	}
-
-	// Validate the current lists
-	save_labelsTreeview();
-	bool startForDirectories = save_directoriesTreeview();
-	bool startForPatterns = save_patternsTreeview();
-	if ((startForDirectories == true) ||
-		(startForPatterns == true))
-	{
-		// Save the settings
-		m_settings.save();
-		m_startDaemon = true;
-	}
-}
-
-void prefsDialog::on_directConnectionRadiobutton_toggled()
-{
-	bool enabled = proxyRadiobutton->get_active();
-
-	proxyAddressEntry->set_sensitive(enabled);
-	proxyPortSpinbutton->set_sensitive(enabled);
-	proxyTypeCombobox->set_sensitive(enabled);
-}
-
-void prefsDialog::on_addLabelButton_clicked()
-{
-	// Now create a new entry in the labels list
-	TreeModel::iterator iter = m_refLabelsTree->append();
-	TreeModel::Row row = *iter;
-	row[m_labelsColumns.m_name] = to_utf8(_("New Label"));
-	// This marks the label as new
-	row[m_labelsColumns.m_enabled] = false;
-
-	// Enable this button
-	removeLabelButton->set_sensitive(true);
-}
-
-void prefsDialog::on_removeLabelButton_clicked()
-{
-	// Get the selected label in the list
-	TreeModel::iterator iter = labelsTreeview->get_selection()->get_selected();
-	if (iter)
-	{
-		// Unselect
-		labelsTreeview->get_selection()->unselect(iter);
-		// Select another row
-		TreeModel::Path labelPath = m_refLabelsTree->get_path(iter);
-		labelPath.next();
-		labelsTreeview->get_selection()->select(labelPath);
-		// Erase
-		TreeModel::Row row = *iter;
-		m_deletedLabels.insert(from_utf8(row[m_labelsColumns.m_name]));
-		m_refLabelsTree->erase(row);
-
-		TreeModel::Children children = m_refLabelsTree->children();
-		if (children.empty() == true)
-		{
-			// Disable this button
-			removeLabelButton->set_sensitive(false);
-		}
-	}
-}
-
-void prefsDialog::on_addDirectoryButton_clicked()
-{
-	ustring dirName;
-
-	TreeModel::Children children = m_refDirectoriesTree->children();
-	bool wasEmpty = children.empty();
-
-	if (select_file_name(_("Directory to index"), dirName, true, true) == true)
-	{
-#ifdef DEBUG
-		cout << "prefsDialog::on_addDirectoryButton_clicked: "
-			<< dirName << endl;
-#endif
-		// Create a new entry in the directories list
-		TreeModel::iterator iter = m_refDirectoriesTree->append();
-		TreeModel::Row row = *iter;
-	
-		row[m_directoriesColumns.m_monitor] = false;
-		row[m_directoriesColumns.m_location] = to_utf8(dirName);
-
-		if (wasEmpty == true)
-		{
-			// Enable this button
-			removeDirectoryButton->set_sensitive(true);
-		}
-	}
-}
-
-void prefsDialog::on_removeDirectoryButton_clicked()
-{
-	// Get the selected directory in the list
-	TreeModel::iterator iter = directoriesTreeview->get_selection()->get_selected();
-	if (iter)
-	{
-		string dirLabel("file://");
-
-		// Unselect
-		directoriesTreeview->get_selection()->unselect(iter);
-		// Select another row
-		TreeModel::Path dirPath = m_refDirectoriesTree->get_path(iter);
-		dirPath.next();
-		directoriesTreeview->get_selection()->select(dirPath);
-
-		// Erase
-		TreeModel::Row row = *iter;
-		dirLabel += from_utf8(row[m_directoriesColumns.m_location]);
-		m_deletedDirectories.insert(dirLabel);
-		m_refDirectoriesTree->erase(row);
-
-		TreeModel::Children children = m_refDirectoriesTree->children();
-		if (children.empty() == true)
-		{
-			// Disable this button
-			removeDirectoryButton->set_sensitive(false);
-		}
-	}
-}
-
-void prefsDialog::on_patternsCombobox_changed()
-{
-	int activeRow = patternsCombobox->get_active_row_number();
-
-	if (((activeRow == 0) && (m_settings.m_isBlackList == true)) ||
-		((activeRow > 0) && (m_settings.m_isBlackList == false)))
-	{
-		// No change
-		return;
-	}
-
-	// Unselect
-	patternsTreeview->get_selection()->unselect_all();
-	// Remove all patterns in order to make sure the user enters a new bunch
-	m_refPatternsTree->clear();
-}
-
-void prefsDialog::on_addPatternButton_clicked()
-{
-	TreeModel::Children children = m_refPatternsTree->children();
-	bool wasEmpty = children.empty();
-
-	// Create a new entry in the file patterns list
-	TreeModel::iterator iter = m_refPatternsTree->append();
-	TreeModel::Row row = *iter;
-
-	row[m_patternsColumns.m_location] = "";
-	row[m_patternsColumns.m_mTime] = time(NULL);
-
-	// Select and start editing the row
-	TreeViewColumn *pColumn = patternsTreeview->get_column(0);
-	if (pColumn != NULL)
-	{
-		TreeModel::Path patternPath = m_refPatternsTree->get_path(iter);
-		patternsTreeview->set_cursor(patternPath, *pColumn, true);
-	}
-
-	if (wasEmpty == true)
-	{
-		// Enable this button
-		removePatternButton->set_sensitive(true);
-	}
-}
-
-void prefsDialog::on_removePatternButton_clicked()
-{
-	// Get the selected file pattern in the list
-	TreeModel::iterator iter = patternsTreeview->get_selection()->get_selected();
-	if (iter)
-	{
-		// Unselect
-		patternsTreeview->get_selection()->unselect(iter);
-		// Select another row
-		TreeModel::Path patternPath = m_refPatternsTree->get_path(iter);
-		patternPath.next();
-		patternsTreeview->get_selection()->select(patternPath);
-
-		// Erase
-		TreeModel::Row row = *iter;
-		m_refPatternsTree->erase(row);
-
-		TreeModel::Children children = m_refPatternsTree->children();
-		if (children.empty() == true)
-		{
-			// Disable this button
-			removePatternButton->set_sensitive(false);
-		}
-	}
-}
-
-void prefsDialog::on_resetPatternsButton_clicked()
-{
-	set<ustring> defaultPatterns;
-	bool isBlackList = m_settings.getDefaultPatterns(defaultPatterns);
-
-	// Unselect
-	patternsTreeview->get_selection()->unselect_all();
-	// Remove all patterns
-	m_refPatternsTree->clear();
-
-	// Repopulate with defaults
-	populate_patternsTreeview(defaultPatterns, isBlackList);
-}
-
-void prefsDialog::updateLabelRow(const ustring &path_string, const ustring &text)
-{
-	Gtk::TreePath path(path_string);
-
-	// Get the row
-	TreeModel::iterator iter = m_refLabelsTree->get_iter(path);
-	if (iter)
-	{
-		TreeRow row = *iter;
-
-#ifdef DEBUG
-		cout << "prefsDialog::updateLabelRow: set label to " << text << endl;
-#endif
-		// Set the value of the name column
-		row.set_value(m_labelsColumns.m_name, (ustring)text);
-	}
-}
-
-void prefsDialog::renderLabelNameColumn(CellRenderer *pRenderer, const TreeModel::iterator &iter)
-{
-	TreeModel::Row row = *iter;
-
-	if (pRenderer == NULL)
-	{
-		return;
-	}
-
-	CellRendererText *pTextRenderer = dynamic_cast<CellRendererText*>(pRenderer);
-	if (pTextRenderer != NULL)
-	{
-		bool isNewLabel = false;
-
-		// Is this a new label ?
-		if (row[m_labelsColumns.m_enabled] == false)
-		{
-			isNewLabel = true;
-		}
-
-		// Set the editable property
-#ifdef GLIBMM_PROPERTIES_ENABLED
-		pTextRenderer->property_editable() = isNewLabel;
-#else
-		pTextRenderer->set_property("editable", isNewLabel);
-#endif
-	}
-}
-

Deleted: trunk/UI/GTK2/src/prefsDialog.hh
===================================================================
--- trunk/UI/GTK2/src/prefsDialog.hh	2008-11-16 14:12:42 UTC (rev 1413)
+++ trunk/UI/GTK2/src/prefsDialog.hh	2008-11-19 13:24:34 UTC (rev 1414)
@@ -1,90 +0,0 @@
-/*
- *  Copyright 2005,2006 Fabrice Colin
- *
- *  This program is free software; you can redistribute it and/or modify
- *  it under the terms of the GNU General Public License as published by
- *  the Free Software Foundation; either version 2 of the License, or
- *  (at your option) any later version.
- *
- *  This program is distributed in the hope that it will be useful,
- *  but WITHOUT ANY WARRANTY; without even the implied warranty of
- *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- *  GNU General Public License for more details.
- *
- *  You should have received a copy of the GNU General Public License
- *  along with this program; if not, write to the Free Software
- *  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
- */
-
-#ifndef _PREFSDIALOG_HH
-#define _PREFSDIALOG_HH
-
-#include <string>
-#include <map>
-#include <set>
-#include <vector>
-#include <glibmm/refptr.h>
-#include <glibmm/ustring.h>
-#include <gtkmm/liststore.h>
-
-#include "ModelColumns.h"
-#include "PinotSettings.h"
-#include "prefsDialog_glade.hh"
-
-class prefsDialog : public prefsDialog_glade
-{  
-public:
-	prefsDialog();
-	virtual ~prefsDialog();
-
-	const std::set<std::string> &getLabelsToAdd(void) const;
-
-	const std::set<std::string> &getLabelsToDelete(void) const;
-
-	bool startDaemon(void) const;
-
-protected:
-	PinotSettings &m_settings;
-	Glib::RefPtr<Gtk::ListStore> m_refViewTree;
-	LabelModelColumns m_labelsColumns;
-	Glib::RefPtr<Gtk::ListStore> m_refLabelsTree;
-	IndexableModelColumns m_directoriesColumns;
-	Glib::RefPtr<Gtk::ListStore> m_refDirectoriesTree;
-	TimestampedModelColumns m_mailColumns;
-	TimestampedModelColumns m_patternsColumns;
-	Glib::RefPtr<Gtk::ListStore> m_refPatternsTree;
-	std::vector<Gtk::Entry *> m_editableValueEntries;
-	std::set<std::string> m_addedLabels;
-	std::set<std::string> m_deletedLabels;
-	std::set<std::string> m_deletedDirectories;
-	std::string m_directoriesHash;
-	std::string m_patternsHash;
-	bool m_startDaemon;
-
-	virtual void on_prefsOkbutton_clicked();
-	virtual void on_directConnectionRadiobutton_toggled();
-	virtual void on_addLabelButton_clicked();
-	virtual void on_removeLabelButton_clicked();
-	virtual void on_addDirectoryButton_clicked();
-	virtual void on_removeDirectoryButton_clicked();
-	virtual void on_patternsCombobox_changed();
-	virtual void on_addPatternButton_clicked();
-	virtual void on_removePatternButton_clicked();
-	virtual void on_resetPatternsButton_clicked();
-
-	void updateLabelRow(const Glib::ustring &path_string, const Glib::ustring &text);
-	void renderLabelNameColumn(Gtk::CellRenderer *pRenderer, const Gtk::TreeModel::iterator &iter);
-
-	void attach_value_widgets(const std::string &name, const std::string &value, guint rowNumber);
-	void populate_proxyTypeCombobox();
-	void populate_labelsTreeview();
-	void save_labelsTreeview();
-	void populate_directoriesTreeview();
-	bool save_directoriesTreeview();
-	void populate_patternsCombobox();
-	void populate_patternsTreeview(const std::set<Glib::ustring> &patternsList, bool isBlackList);
-	bool save_patternsTreeview();
-
-};
-
-#endif

Deleted: trunk/UI/GTK2/src/prefsDialog_glade.cc
===================================================================
--- trunk/UI/GTK2/src/prefsDialog_glade.cc	2008-11-16 14:12:42 UTC (rev 1413)
+++ trunk/UI/GTK2/src/prefsDialog_glade.cc	2008-11-19 13:24:34 UTC (rev 1414)
@@ -1,603 +0,0 @@
-// generated 2008/7/13 20:38:58 SGT by fabrice at rexor.dyndns.org.(none)
-// using glademm V2.12.1
-//
-// DO NOT EDIT THIS FILE ! It was created using
-// glade-- /home/fabrice/Projects/MetaSE/pinot/UI/GTK2/metase-gtk2.glade
-// for gtk 2.12.11 and gtkmm 2.12.7
-//
-// Please modify the corresponding derived classes in ./src/prefsDialog.cc
-
-
-#if defined __GNUC__ && __GNUC__ < 3
-#error This program will crash if compiled with g++ 2.x
-// see the dynamic_cast bug in the gtkmm FAQ
-#endif //
-#include "config.h"
-/*
- * Standard gettext macros.
- */
-#ifdef ENABLE_NLS
-#  include <libintl.h>
-#  undef _
-#  define _(String) dgettext (GETTEXT_PACKAGE, String)
-#  ifdef gettext_noop
-#    define N_(String) gettext_noop (String)
-#  else
-#    define N_(String) (String)
-#  endif
-#endif
-#include <gtkmmconfig.h>
-#if GTKMM_MAJOR_VERSION==2 && GTKMM_MINOR_VERSION>2
-#include <sigc++/sigc++.h>
-#define GMM_GTKMM_22_24(a,b) b
-#else //gtkmm 2.2
-#define GMM_GTKMM_22_24(a,b) a
-#endif //
-#include "prefsDialog_glade.hh"
-#include <gdk/gdkkeysyms.h>
-#include <gtkmm/accelgroup.h>
-#include <gtkmm/buttonbox.h>
-#include <gtkmm/label.h>
-#include <gtkmm/table.h>
-#include <gtkmm/radiobutton.h>
-#include <gtkmm/adjustment.h>
-#include <gtkmm/scrolledwindow.h>
-#include <gtkmm/image.h>
-#include <gtkmm/box.h>
-#include <gtkmm/alignment.h>
-#ifndef ENABLE_NLS
-#  define textdomain(String) (String)
-#  define gettext(String) (String)
-#  define dgettext(Domain,Message) (Message)
-#  define dcgettext(Domain,Message,Type) (Message)
-#  define bindtextdomain(Domain,Directory) (Domain)
-#  define _(String) (String)
-#  define N_(String) (String)
-#endif
-
-
-prefsDialog_glade::prefsDialog_glade(
-)
-{  prefsDialog = this;
-   gmm_data = new GlademmData(get_accel_group());
-   prefsCancelbutton = Gtk::manage(new class Gtk::Button(Gtk::StockID("gtk-cancel")));
-   prefsOkbutton = Gtk::manage(new class Gtk::Button(Gtk::StockID("gtk-ok")));
-   apiKeyLabel = Gtk::manage(new class Gtk::Label(_("Google API key:")));
-   apiKeyEntry = Gtk::manage(new class Gtk::Entry());
-   
-   Gtk::Label *newResultsLabel = Gtk::manage(new class Gtk::Label(_("New results:")));
-   Gtk::Label *queriesLabel = Gtk::manage(new class Gtk::Label(_("Queries:")));
-   enableCompletionCheckbutton = Gtk::manage(new class Gtk::CheckButton(_("Enable search terms suggestion")));
-   newResultsColorbutton = Gtk::manage(new class Gtk::ColorButton());
-   ignoreRobotsCheckbutton = Gtk::manage(new class Gtk::CheckButton(_("Ignore robots.txt and Robots META tag")));
-   robotsLabel = Gtk::manage(new class Gtk::Label(_("HTTP crawling:")));
-   
-   generalTable = Gtk::manage(new class Gtk::Table(2, 2, false));
-   Gtk::Label *generalLabel = Gtk::manage(new class Gtk::Label(_("General")));
-   Gtk::RadioButton::Group _RadioBGroup_directConnectionRadiobutton;
-   directConnectionRadiobutton = Gtk::manage(new class Gtk::RadioButton(_RadioBGroup_directConnectionRadiobutton, _("Direct connection to the Internet")));
-   proxyRadiobutton = Gtk::manage(new class Gtk::RadioButton(_RadioBGroup_directConnectionRadiobutton, _("Manual proxy configuration:")));
-   
-   Gtk::Label *proxyAddressLabel = Gtk::manage(new class Gtk::Label(_("Address:")));
-   proxyAddressEntry = Gtk::manage(new class Gtk::Entry());
-   
-   Gtk::Label *proxyTypeLabel = Gtk::manage(new class Gtk::Label(_("Type:")));
-   Gtk::Label *proxyPortLabel = Gtk::manage(new class Gtk::Label(_("Port:")));
-   Gtk::Adjustment *proxyPortSpinbutton_adj = Gtk::manage(new class Gtk::Adjustment(80, 1, 65535, 1, 10, 10));
-   proxyPortSpinbutton = Gtk::manage(new class Gtk::SpinButton(*proxyPortSpinbutton_adj, 1, 0));
-   proxyTypeCombobox = Gtk::manage(new class Gtk::ComboBoxText());
-   
-   Gtk::Table *socksTable = Gtk::manage(new class Gtk::Table(2, 2, false));
-   Gtk::Table *netTable = Gtk::manage(new class Gtk::Table(2, 2, false));
-   Gtk::Label *netLabel = Gtk::manage(new class Gtk::Label(_("Network")));
-   Gtk::Label *indexLabelsLabel = Gtk::manage(new class Gtk::Label(_("Labels are used to classify indexed documents:")));
-   labelsTreeview = Gtk::manage(new class Gtk::TreeView());
-   
-   Gtk::ScrolledWindow *labelsScrolledwindow = Gtk::manage(new class Gtk::ScrolledWindow());
-   Gtk::Image *image235 = Gtk::manage(new class Gtk::Image(Gtk::StockID("gtk-add"), Gtk::IconSize(4)));
-   Gtk::Label *label35 = Gtk::manage(new class Gtk::Label(_("Add")));
-   Gtk::HBox *hbox29 = Gtk::manage(new class Gtk::HBox(false, 2));
-   Gtk::Alignment *alignment17 = Gtk::manage(new class Gtk::Alignment(0.5, 0.5, 0, 0));
-   addLabelButton = Gtk::manage(new class Gtk::Button());
-   
-   Gtk::Image *image236 = Gtk::manage(new class Gtk::Image(Gtk::StockID("gtk-remove"), Gtk::IconSize(4)));
-   Gtk::Label *label36 = Gtk::manage(new class Gtk::Label(_("Remove")));
-   Gtk::HBox *hbox30 = Gtk::manage(new class Gtk::HBox(false, 2));
-   Gtk::Alignment *alignment18 = Gtk::manage(new class Gtk::Alignment(0.5, 0.5, 0, 0));
-   removeLabelButton = Gtk::manage(new class Gtk::Button());
-   
-   Gtk::VButtonBox *labelsVbuttonbox = Gtk::manage(new class Gtk::VButtonBox(Gtk::BUTTONBOX_START, 0));
-   Gtk::HBox *labelsHbox = Gtk::manage(new class Gtk::HBox(false, 0));
-   Gtk::VBox *labelsVbox = Gtk::manage(new class Gtk::VBox(false, 0));
-   Gtk::Label *labelsLabel = Gtk::manage(new class Gtk::Label(_("Labels")));
-   Gtk::Label *directoriesLabel = Gtk::manage(new class Gtk::Label(_("These directories will be indexed and optionally monitored for changes:")));
-   directoriesTreeview = Gtk::manage(new class Gtk::TreeView());
-   
-   Gtk::ScrolledWindow *directoriesScrolledwindow = Gtk::manage(new class Gtk::ScrolledWindow());
-   Gtk::Image *image609 = Gtk::manage(new class Gtk::Image(Gtk::StockID("gtk-add"), Gtk::IconSize(4)));
-   Gtk::Label *label58 = Gtk::manage(new class Gtk::Label(_("Add")));
-   Gtk::HBox *hbox54 = Gtk::manage(new class Gtk::HBox(false, 2));
-   Gtk::Alignment *alignment35 = Gtk::manage(new class Gtk::Alignment(0.5, 0.5, 0, 0));
-   addDirectoryButton = Gtk::manage(new class Gtk::Button());
-   removeDirectoryButton = Gtk::manage(new class Gtk::Button(Gtk::StockID("gtk-remove")));
-   
-   Gtk::VButtonBox *directoriesVbuttonbox = Gtk::manage(new class Gtk::VButtonBox(Gtk::BUTTONBOX_START, 0));
-   Gtk::HBox *directoriesHbox = Gtk::manage(new class Gtk::HBox(false, 0));
-   Gtk::Label *patternsLabel = Gtk::manage(new class Gtk::Label(_("File patterns:")));
-   patternsTreeview = Gtk::manage(new class Gtk::TreeView());
-   
-   Gtk::ScrolledWindow *patternsScrolledwindow = Gtk::manage(new class Gtk::ScrolledWindow());
-   patternsCombobox = Gtk::manage(new class Gtk::ComboBoxText());
-   
-   Gtk::VBox *patternsVbox = Gtk::manage(new class Gtk::VBox(false, 0));
-   Gtk::Image *image624 = Gtk::manage(new class Gtk::Image(Gtk::StockID("gtk-add"), Gtk::IconSize(4)));
-   Gtk::Label *label60 = Gtk::manage(new class Gtk::Label(_("Add")));
-   Gtk::HBox *hbox56 = Gtk::manage(new class Gtk::HBox(false, 2));
-   Gtk::Alignment *alignment36 = Gtk::manage(new class Gtk::Alignment(0.5, 0.5, 0, 0));
-   addPatternButton = Gtk::manage(new class Gtk::Button());
-   removePatternButton = Gtk::manage(new class Gtk::Button(Gtk::StockID("gtk-remove")));
-   resetPatternsButton = Gtk::manage(new class Gtk::Button(_("Reset")));
-   
-   Gtk::VButtonBox *patternsVbuttonbox = Gtk::manage(new class Gtk::VButtonBox(Gtk::BUTTONBOX_START, 0));
-   Gtk::HBox *patternsHbox = Gtk::manage(new class Gtk::HBox(false, 0));
-   Gtk::VBox *indexingVbox = Gtk::manage(new class Gtk::VBox(false, 0));
-   Gtk::Label *indexingLabel = Gtk::manage(new class Gtk::Label(_("Indexing")));
-   prefsNotebook = Gtk::manage(new class Gtk::Notebook());
-   prefsCancelbutton->set_flags(Gtk::CAN_FOCUS);
-   prefsCancelbutton->set_flags(Gtk::CAN_DEFAULT);
-   prefsCancelbutton->set_relief(Gtk::RELIEF_NORMAL);
-   prefsOkbutton->set_flags(Gtk::CAN_FOCUS);
-   prefsOkbutton->set_flags(Gtk::CAN_DEFAULT);
-   prefsOkbutton->set_relief(Gtk::RELIEF_NORMAL);
-   prefsDialog->get_action_area()->property_layout_style().set_value(Gtk::BUTTONBOX_END);
-   apiKeyLabel->set_alignment(0,0.5);
-   apiKeyLabel->set_padding(4,4);
-   apiKeyLabel->set_justify(Gtk::JUSTIFY_LEFT);
-   apiKeyLabel->set_line_wrap(false);
-   apiKeyLabel->set_use_markup(false);
-   apiKeyLabel->set_selectable(false);
-   apiKeyLabel->set_ellipsize(Pango::ELLIPSIZE_NONE);
-   apiKeyLabel->set_width_chars(-1);
-   apiKeyLabel->set_angle(0);
-   apiKeyLabel->set_single_line_mode(false);
-   apiKeyEntry->set_flags(Gtk::CAN_FOCUS);
-   apiKeyEntry->set_visibility(true);
-   apiKeyEntry->set_editable(true);
-   apiKeyEntry->set_max_length(0);
-   apiKeyEntry->set_has_frame(true);
-   apiKeyEntry->set_activates_default(false);
-   newResultsLabel->set_alignment(0,0.5);
-   newResultsLabel->set_padding(4,4);
-   newResultsLabel->set_justify(Gtk::JUSTIFY_LEFT);
-   newResultsLabel->set_line_wrap(false);
-   newResultsLabel->set_use_markup(false);
-   newResultsLabel->set_selectable(false);
-   newResultsLabel->set_ellipsize(Pango::ELLIPSIZE_NONE);
-   newResultsLabel->set_width_chars(-1);
-   newResultsLabel->set_angle(0);
-   newResultsLabel->set_single_line_mode(false);
-   queriesLabel->set_alignment(0,0.5);
-   queriesLabel->set_padding(4,4);
-   queriesLabel->set_justify(Gtk::JUSTIFY_LEFT);
-   queriesLabel->set_line_wrap(false);
-   queriesLabel->set_use_markup(false);
-   queriesLabel->set_selectable(false);
-   queriesLabel->set_ellipsize(Pango::ELLIPSIZE_NONE);
-   queriesLabel->set_width_chars(-1);
-   queriesLabel->set_angle(0);
-   queriesLabel->set_single_line_mode(false);
-   enableCompletionCheckbutton->set_flags(Gtk::CAN_FOCUS);
-   enableCompletionCheckbutton->set_relief(Gtk::RELIEF_NORMAL);
-   enableCompletionCheckbutton->set_mode(true);
-   enableCompletionCheckbutton->set_active(false);
-   newResultsColorbutton->set_flags(Gtk::CAN_FOCUS);
-   ignoreRobotsCheckbutton->set_flags(Gtk::CAN_FOCUS);
-   ignoreRobotsCheckbutton->set_relief(Gtk::RELIEF_NORMAL);
-   ignoreRobotsCheckbutton->set_mode(true);
-   ignoreRobotsCheckbutton->set_active(false);
-   robotsLabel->set_alignment(0,0.5);
-   robotsLabel->set_padding(4,4);
-   robotsLabel->set_justify(Gtk::JUSTIFY_LEFT);
-   robotsLabel->set_line_wrap(false);
-   robotsLabel->set_use_markup(false);
-   robotsLabel->set_selectable(false);
-   robotsLabel->set_ellipsize(Pango::ELLIPSIZE_NONE);
-   robotsLabel->set_width_chars(-1);
-   robotsLabel->set_angle(0);
-   robotsLabel->set_single_line_mode(false);
-   generalTable->set_row_spacings(0);
-   generalTable->set_col_spacings(0);
-   generalTable->attach(*apiKeyLabel, 0, 1, 3, 4, Gtk::FILL, Gtk::FILL, 0, 0);
-   generalTable->attach(*apiKeyEntry, 1, 2, 3, 4, Gtk::EXPAND|Gtk::FILL, Gtk::FILL, 4, 4);
-   generalTable->attach(*newResultsLabel, 0, 1, 1, 2, Gtk::FILL, Gtk::FILL, 0, 0);
-   generalTable->attach(*queriesLabel, 0, 1, 2, 3, Gtk::FILL, Gtk::FILL, 0, 0);
-   generalTable->attach(*enableCompletionCheckbutton, 1, 2, 2, 3, Gtk::EXPAND|Gtk::FILL, Gtk::FILL, 4, 4);
-   generalTable->attach(*newResultsColorbutton, 1, 2, 1, 2, Gtk::EXPAND|Gtk::FILL, Gtk::FILL, 4, 4);
-   generalTable->attach(*ignoreRobotsCheckbutton, 1, 2, 0, 1, Gtk::EXPAND|Gtk::FILL, Gtk::FILL, 4, 4);
-   generalTable->attach(*robotsLabel, 0, 1, 0, 1, Gtk::FILL, Gtk::AttachOptions(), 0, 0);
-   generalLabel->set_alignment(0.5,0.5);
-   generalLabel->set_padding(0,0);
-   generalLabel->set_justify(Gtk::JUSTIFY_LEFT);
-   generalLabel->set_line_wrap(false);
-   generalLabel->set_use_markup(false);
-   generalLabel->set_selectable(false);
-   generalLabel->set_ellipsize(Pango::ELLIPSIZE_NONE);
-   generalLabel->set_width_chars(-1);
-   generalLabel->set_angle(0);
-   generalLabel->set_single_line_mode(false);
-   directConnectionRadiobutton->set_flags(Gtk::CAN_FOCUS);
-   directConnectionRadiobutton->set_relief(Gtk::RELIEF_NORMAL);
-   directConnectionRadiobutton->set_mode(true);
-   directConnectionRadiobutton->set_active(true);
-   proxyRadiobutton->set_flags(Gtk::CAN_FOCUS);
-   proxyRadiobutton->set_relief(Gtk::RELIEF_NORMAL);
-   proxyRadiobutton->set_mode(true);
-   proxyRadiobutton->set_active(false);
-   proxyAddressLabel->set_alignment(0,0.5);
-   proxyAddressLabel->set_padding(0,0);
-   proxyAddressLabel->set_justify(Gtk::JUSTIFY_LEFT);
-   proxyAddressLabel->set_line_wrap(false);
-   proxyAddressLabel->set_use_markup(false);
-   proxyAddressLabel->set_selectable(false);
-   proxyAddressLabel->set_ellipsize(Pango::ELLIPSIZE_NONE);
-   proxyAddressLabel->set_width_chars(-1);
-   proxyAddressLabel->set_angle(0);
-   proxyAddressLabel->set_single_line_mode(false);
-   proxyAddressEntry->set_flags(Gtk::CAN_FOCUS);
-   proxyAddressEntry->set_visibility(true);
-   proxyAddressEntry->set_editable(true);
-   proxyAddressEntry->set_max_length(0);
-   proxyAddressEntry->set_has_frame(true);
-   proxyAddressEntry->set_activates_default(false);
-   proxyTypeLabel->set_alignment(0,0.5);
-   proxyTypeLabel->set_padding(0,0);
-   proxyTypeLabel->set_justify(Gtk::JUSTIFY_LEFT);
-   proxyTypeLabel->set_line_wrap(false);
-   proxyTypeLabel->set_use_markup(false);
-   proxyTypeLabel->set_selectable(false);
-   proxyTypeLabel->set_ellipsize(Pango::ELLIPSIZE_NONE);
-   proxyTypeLabel->set_width_chars(-1);
-   proxyTypeLabel->set_angle(0);
-   proxyTypeLabel->set_single_line_mode(false);
-   proxyPortLabel->set_alignment(0,0.5);
-   proxyPortLabel->set_padding(0,0);
-   proxyPortLabel->set_justify(Gtk::JUSTIFY_LEFT);
-   proxyPortLabel->set_line_wrap(false);
-   proxyPortLabel->set_use_markup(false);
-   proxyPortLabel->set_selectable(false);
-   proxyPortLabel->set_ellipsize(Pango::ELLIPSIZE_NONE);
-   proxyPortLabel->set_width_chars(-1);
-   proxyPortLabel->set_angle(0);
-   proxyPortLabel->set_single_line_mode(false);
-   proxyPortSpinbutton->set_flags(Gtk::CAN_FOCUS);
-   proxyPortSpinbutton->set_update_policy(Gtk::UPDATE_ALWAYS);
-   proxyPortSpinbutton->set_numeric(false);
-   proxyPortSpinbutton->set_digits(0);
-   proxyPortSpinbutton->set_wrap(false);
-   socksTable->set_row_spacings(0);
-   socksTable->set_col_spacings(0);
-   socksTable->attach(*proxyAddressLabel, 0, 1, 1, 2, Gtk::FILL, Gtk::FILL, 4, 4);
-   socksTable->attach(*proxyAddressEntry, 1, 2, 1, 2, Gtk::EXPAND|Gtk::FILL, Gtk::FILL, 4, 4);
-   socksTable->attach(*proxyTypeLabel, 0, 1, 0, 1, Gtk::FILL, Gtk::FILL, 4, 4);
-   socksTable->attach(*proxyPortLabel, 0, 1, 2, 3, Gtk::FILL, Gtk::FILL, 4, 4);
-   socksTable->attach(*proxyPortSpinbutton, 1, 2, 2, 3, Gtk::EXPAND|Gtk::FILL, Gtk::AttachOptions(), 4, 4);
-   socksTable->attach(*proxyTypeCombobox, 1, 2, 0, 1, Gtk::EXPAND|Gtk::FILL, Gtk::AttachOptions(), 4, 4);
-   netTable->set_row_spacings(0);
-   netTable->set_col_spacings(0);
-   netTable->attach(*directConnectionRadiobutton, 0, 1, 0, 1, Gtk::EXPAND|Gtk::FILL, Gtk::FILL, 4, 4);
-   netTable->attach(*proxyRadiobutton, 0, 1, 1, 2, Gtk::EXPAND|Gtk::FILL, Gtk::FILL, 4, 4);
-   netTable->attach(*socksTable, 0, 1, 2, 3, Gtk::FILL, Gtk::EXPAND|Gtk::FILL, 0, 0);
-   netLabel->set_alignment(0.5,0.5);
-   netLabel->set_padding(0,0);
-   netLabel->set_justify(Gtk::JUSTIFY_LEFT);
-   netLabel->set_line_wrap(false);
-   netLabel->set_use_markup(false);
-   netLabel->set_selectable(false);
-   netLabel->set_ellipsize(Pango::ELLIPSIZE_NONE);
-   netLabel->set_width_chars(-1);
-   netLabel->set_angle(0);
-   netLabel->set_single_line_mode(false);
-   indexLabelsLabel->set_alignment(0,0.5);
-   indexLabelsLabel->set_padding(4,4);
-   indexLabelsLabel->set_justify(Gtk::JUSTIFY_LEFT);
-   indexLabelsLabel->set_line_wrap(true);
-   indexLabelsLabel->set_use_markup(false);
-   indexLabelsLabel->set_selectable(false);
-   indexLabelsLabel->set_ellipsize(Pango::ELLIPSIZE_NONE);
-   indexLabelsLabel->set_width_chars(-1);
-   indexLabelsLabel->set_angle(0);
-   indexLabelsLabel->set_single_line_mode(false);
-   labelsTreeview->set_flags(Gtk::CAN_FOCUS);
-   labelsTreeview->set_headers_visible(true);
-   labelsTreeview->set_rules_hint(false);
-   labelsTreeview->set_reorderable(false);
-   labelsTreeview->set_enable_search(true);
-   labelsScrolledwindow->set_flags(Gtk::CAN_FOCUS);
-   labelsScrolledwindow->set_border_width(4);
-   labelsScrolledwindow->set_shadow_type(Gtk::SHADOW_NONE);
-   labelsScrolledwindow->set_policy(Gtk::POLICY_AUTOMATIC, Gtk::POLICY_AUTOMATIC);
-   labelsScrolledwindow->property_window_placement().set_value(Gtk::CORNER_TOP_LEFT);
-   labelsScrolledwindow->add(*labelsTreeview);
-   image235->set_alignment(0.5,0.5);
-   image235->set_padding(0,0);
-   label35->set_alignment(0.5,0.5);
-   label35->set_padding(0,0);
-   label35->set_justify(Gtk::JUSTIFY_LEFT);
-   label35->set_line_wrap(false);
-   label35->set_use_markup(false);
-   label35->set_selectable(false);
-   label35->set_ellipsize(Pango::ELLIPSIZE_NONE);
-   label35->set_width_chars(-1);
-   label35->set_angle(0);
-   label35->set_single_line_mode(false);
-   hbox29->pack_start(*image235, Gtk::PACK_SHRINK, 0);
-   hbox29->pack_start(*label35, Gtk::PACK_SHRINK, 0);
-   alignment17->add(*hbox29);
-   addLabelButton->set_flags(Gtk::CAN_FOCUS);
-   addLabelButton->set_flags(Gtk::CAN_DEFAULT);
-   addLabelButton->set_border_width(4);
-   addLabelButton->set_relief(Gtk::RELIEF_NORMAL);
-   addLabelButton->add(*alignment17);
-   image236->set_alignment(0.5,0.5);
-   image236->set_padding(0,0);
-   label36->set_alignment(0.5,0.5);
-   label36->set_padding(0,0);
-   label36->set_justify(Gtk::JUSTIFY_LEFT);
-   label36->set_line_wrap(false);
-   label36->set_use_markup(false);
-   label36->set_selectable(false);
-   label36->set_ellipsize(Pango::ELLIPSIZE_NONE);
-   label36->set_width_chars(-1);
-   label36->set_angle(0);
-   label36->set_single_line_mode(false);
-   hbox30->pack_start(*image236, Gtk::PACK_SHRINK, 0);
-   hbox30->pack_start(*label36, Gtk::PACK_SHRINK, 0);
-   alignment18->add(*hbox30);
-   removeLabelButton->set_flags(Gtk::CAN_FOCUS);
-   removeLabelButton->set_flags(Gtk::CAN_DEFAULT);
-   removeLabelButton->set_border_width(4);
-   removeLabelButton->set_relief(Gtk::RELIEF_NORMAL);
-   removeLabelButton->add(*alignment18);
-   labelsVbuttonbox->pack_start(*addLabelButton);
-   labelsVbuttonbox->pack_start(*removeLabelButton);
-   labelsHbox->pack_start(*labelsScrolledwindow);
-   labelsHbox->pack_start(*labelsVbuttonbox, Gtk::PACK_SHRINK, 0);
-   labelsVbox->pack_start(*indexLabelsLabel, Gtk::PACK_SHRINK, 4);
-   labelsVbox->pack_start(*labelsHbox, Gtk::PACK_EXPAND_WIDGET, 4);
-   labelsLabel->set_alignment(0.5,0.5);
-   labelsLabel->set_padding(0,0);
-   labelsLabel->set_justify(Gtk::JUSTIFY_LEFT);
-   labelsLabel->set_line_wrap(false);
-   labelsLabel->set_use_markup(false);
-   labelsLabel->set_selectable(false);
-   labelsLabel->set_ellipsize(Pango::ELLIPSIZE_NONE);
-   labelsLabel->set_width_chars(-1);
-   labelsLabel->set_angle(0);
-   labelsLabel->set_single_line_mode(false);
-   directoriesLabel->set_alignment(0,0.5);
-   directoriesLabel->set_padding(4,4);
-   directoriesLabel->set_justify(Gtk::JUSTIFY_LEFT);
-   directoriesLabel->set_line_wrap(true);
-   directoriesLabel->set_use_markup(false);
-   directoriesLabel->set_selectable(false);
-   directoriesLabel->set_ellipsize(Pango::ELLIPSIZE_NONE);
-   directoriesLabel->set_width_chars(-1);
-   directoriesLabel->set_angle(0);
-   directoriesLabel->set_single_line_mode(false);
-   directoriesTreeview->set_flags(Gtk::CAN_FOCUS);
-   directoriesTreeview->set_headers_visible(true);
-   directoriesTreeview->set_rules_hint(false);
-   directoriesTreeview->set_reorderable(false);
-   directoriesTreeview->set_enable_search(true);
-   directoriesScrolledwindow->set_flags(Gtk::CAN_FOCUS);
-   directoriesScrolledwindow->set_border_width(4);
-   directoriesScrolledwindow->set_shadow_type(Gtk::SHADOW_NONE);
-   directoriesScrolledwindow->set_policy(Gtk::POLICY_AUTOMATIC, Gtk::POLICY_AUTOMATIC);
-   directoriesScrolledwindow->property_window_placement().set_value(Gtk::CORNER_TOP_LEFT);
-   directoriesScrolledwindow->add(*directoriesTreeview);
-   image609->set_alignment(0.5,0.5);
-   image609->set_padding(0,0);
-   label58->set_alignment(0.5,0.5);
-   label58->set_padding(0,0);
-   label58->set_justify(Gtk::JUSTIFY_LEFT);
-   label58->set_line_wrap(false);
-   label58->set_use_markup(false);
-   label58->set_selectable(false);
-   label58->set_ellipsize(Pango::ELLIPSIZE_NONE);
-   label58->set_width_chars(-1);
-   label58->set_angle(0);
-   label58->set_single_line_mode(false);
-   hbox54->pack_start(*image609, Gtk::PACK_SHRINK, 0);
-   hbox54->pack_start(*label58, Gtk::PACK_SHRINK, 0);
-   alignment35->add(*hbox54);
-   addDirectoryButton->set_flags(Gtk::CAN_FOCUS);
-   addDirectoryButton->set_flags(Gtk::CAN_DEFAULT);
-   addDirectoryButton->set_border_width(4);
-   addDirectoryButton->set_relief(Gtk::RELIEF_NORMAL);
-   addDirectoryButton->add(*alignment35);
-   removeDirectoryButton->set_flags(Gtk::CAN_FOCUS);
-   removeDirectoryButton->set_flags(Gtk::CAN_DEFAULT);
-   removeDirectoryButton->set_border_width(4);
-   removeDirectoryButton->set_relief(Gtk::RELIEF_NORMAL);
-   directoriesVbuttonbox->pack_start(*addDirectoryButton);
-   directoriesVbuttonbox->pack_start(*removeDirectoryButton);
-   directoriesHbox->pack_start(*directoriesScrolledwindow);
-   directoriesHbox->pack_start(*directoriesVbuttonbox, Gtk::PACK_SHRINK, 0);
-   patternsLabel->set_alignment(0,0.5);
-   patternsLabel->set_padding(4,4);
-   patternsLabel->set_justify(Gtk::JUSTIFY_LEFT);
-   patternsLabel->set_line_wrap(true);
-   patternsLabel->set_use_markup(false);
-   patternsLabel->set_selectable(false);
-   patternsLabel->set_ellipsize(Pango::ELLIPSIZE_NONE);
-   patternsLabel->set_width_chars(-1);
-   patternsLabel->set_angle(0);
-   patternsLabel->set_single_line_mode(false);
-   patternsTreeview->set_flags(Gtk::CAN_FOCUS);
-   patternsTreeview->set_headers_visible(true);
-   patternsTreeview->set_rules_hint(false);
-   patternsTreeview->set_reorderable(false);
-   patternsTreeview->set_enable_search(true);
-   patternsScrolledwindow->set_flags(Gtk::CAN_FOCUS);
-   patternsScrolledwindow->set_border_width(4);
-   patternsScrolledwindow->set_shadow_type(Gtk::SHADOW_NONE);
-   patternsScrolledwindow->set_policy(Gtk::POLICY_AUTOMATIC, Gtk::POLICY_AUTOMATIC);
-   patternsScrolledwindow->property_window_placement().set_value(Gtk::CORNER_TOP_LEFT);
-   patternsScrolledwindow->add(*patternsTreeview);
-   patternsVbox->pack_start(*patternsScrolledwindow);
-   patternsVbox->pack_start(*patternsCombobox, Gtk::PACK_SHRINK, 4);
-   image624->set_alignment(0.5,0.5);
-   image624->set_padding(0,0);
-   label60->set_alignment(0.5,0.5);
-   label60->set_padding(0,0);
-   label60->set_justify(Gtk::JUSTIFY_LEFT);
-   label60->set_line_wrap(false);
-   label60->set_use_markup(false);
-   label60->set_selectable(false);
-   label60->set_ellipsize(Pango::ELLIPSIZE_NONE);
-   label60->set_width_chars(-1);
-   label60->set_angle(0);
-   label60->set_single_line_mode(false);
-   hbox56->pack_start(*image624, Gtk::PACK_SHRINK, 0);
-   hbox56->pack_start(*label60, Gtk::PACK_SHRINK, 0);
-   alignment36->add(*hbox56);
-   addPatternButton->set_flags(Gtk::CAN_FOCUS);
-   addPatternButton->set_flags(Gtk::CAN_DEFAULT);
-   addPatternButton->set_border_width(4);
-   addPatternButton->set_relief(Gtk::RELIEF_NORMAL);
-   addPatternButton->add(*alignment36);
-   removePatternButton->set_flags(Gtk::CAN_FOCUS);
-   removePatternButton->set_flags(Gtk::CAN_DEFAULT);
-   removePatternButton->set_border_width(4);
-   removePatternButton->set_relief(Gtk::RELIEF_NORMAL);
-   resetPatternsButton->set_flags(Gtk::CAN_FOCUS);
-   resetPatternsButton->set_flags(Gtk::CAN_DEFAULT);
-   resetPatternsButton->set_border_width(4);
-   resetPatternsButton->set_relief(Gtk::RELIEF_NORMAL);
-   patternsVbuttonbox->pack_start(*addPatternButton);
-   patternsVbuttonbox->pack_start(*removePatternButton);
-   patternsVbuttonbox->pack_start(*resetPatternsButton);
-   patternsHbox->pack_start(*patternsVbox);
-   patternsHbox->pack_start(*patternsVbuttonbox, Gtk::PACK_SHRINK, 0);
-   indexingVbox->pack_start(*directoriesLabel, Gtk::PACK_SHRINK, 4);
-   indexingVbox->pack_start(*directoriesHbox, Gtk::PACK_EXPAND_WIDGET, 4);
-   indexingVbox->pack_start(*patternsLabel, Gtk::PACK_SHRINK, 4);
-   indexingVbox->pack_start(*patternsHbox, Gtk::PACK_EXPAND_WIDGET, 4);
-   indexingLabel->set_alignment(0.5,0.5);
-   indexingLabel->set_padding(0,0);
-   indexingLabel->set_justify(Gtk::JUSTIFY_LEFT);
-   indexingLabel->set_line_wrap(false);
-   indexingLabel->set_use_markup(false);
-   indexingLabel->set_selectable(false);
-   indexingLabel->set_ellipsize(Pango::ELLIPSIZE_NONE);
-   indexingLabel->set_width_chars(-1);
-   indexingLabel->set_angle(0);
-   indexingLabel->set_single_line_mode(false);
-   prefsNotebook->set_flags(Gtk::CAN_FOCUS);
-   prefsNotebook->set_show_tabs(true);
-   prefsNotebook->set_show_border(true);
-   prefsNotebook->set_tab_pos(Gtk::POS_TOP);
-   prefsNotebook->set_scrollable(false);
-   prefsNotebook->append_page(*generalTable, *generalLabel);
-   prefsNotebook->pages().back().set_tab_label_packing(false, true, Gtk::PACK_START);
-   prefsNotebook->append_page(*netTable, *netLabel);
-   prefsNotebook->pages().back().set_tab_label_packing(false, true, Gtk::PACK_START);
-   prefsNotebook->append_page(*labelsVbox, *labelsLabel);
-   prefsNotebook->pages().back().set_tab_label_packing(false, true, Gtk::PACK_START);
-   prefsNotebook->append_page(*indexingVbox, *indexingLabel);
-   prefsNotebook->pages().back().set_tab_label_packing(false, true, Gtk::PACK_START);
-   prefsDialog->get_vbox()->set_homogeneous(false);
-   prefsDialog->get_vbox()->set_spacing(0);
-   prefsDialog->get_vbox()->pack_start(*prefsNotebook);
-   prefsDialog->set_title(_("Preferences"));
-   prefsDialog->set_modal(false);
-   prefsDialog->property_window_position().set_value(Gtk::WIN_POS_NONE);
-   prefsDialog->set_resizable(true);
-   prefsDialog->property_destroy_with_parent().set_value(false);
-   prefsDialog->set_has_separator(true);
-   prefsDialog->add_action_widget(*prefsCancelbutton, -6);
-   prefsDialog->add_action_widget(*prefsOkbutton, -5);
-   prefsCancelbutton->show();
-   prefsOkbutton->show();
-   apiKeyLabel->show();
-   apiKeyEntry->show();
-   newResultsLabel->show();
-   queriesLabel->show();
-   enableCompletionCheckbutton->show();
-   newResultsColorbutton->show();
-   ignoreRobotsCheckbutton->show();
-   robotsLabel->show();
-   generalTable->show();
-   generalLabel->show();
-   directConnectionRadiobutton->show();
-   proxyRadiobutton->show();
-   proxyAddressLabel->show();
-   proxyAddressEntry->show();
-   proxyTypeLabel->show();
-   proxyPortLabel->show();
-   proxyPortSpinbutton->show();
-   proxyTypeCombobox->show();
-   socksTable->show();
-   netTable->show();
-   netLabel->show();
-   indexLabelsLabel->show();
-   labelsTreeview->show();
-   labelsScrolledwindow->show();
-   image235->show();
-   label35->show();
-   hbox29->show();
-   alignment17->show();
-   addLabelButton->show();
-   image236->show();
-   label36->show();
-   hbox30->show();
-   alignment18->show();
-   removeLabelButton->show();
-   labelsVbuttonbox->show();
-   labelsHbox->show();
-   labelsVbox->show();
-   labelsLabel->show();
-   directoriesLabel->show();
-   directoriesTreeview->show();
-   directoriesScrolledwindow->show();
-   image609->show();
-   label58->show();
-   hbox54->show();
-   alignment35->show();
-   addDirectoryButton->show();
-   removeDirectoryButton->show();
-   directoriesVbuttonbox->show();
-   directoriesHbox->show();
-   patternsLabel->show();
-   patternsTreeview->show();
-   patternsScrolledwindow->show();
-   patternsCombobox->show();
-   patternsVbox->show();
-   image624->show();
-   label60->show();
-   hbox56->show();
-   alignment36->show();
-   addPatternButton->show();
-   removePatternButton->show();
-   resetPatternsButton->show();
-   patternsVbuttonbox->show();
-   patternsHbox->show();
-   indexingVbox->show();
-   indexingLabel->show();
-   prefsNotebook->show();
-   prefsDialog->show();
-   prefsOkbutton->signal_clicked().connect(sigc::mem_fun(*this, &prefsDialog_glade::on_prefsOkbutton_clicked), false);
-   directConnectionRadiobutton->signal_toggled().connect(sigc::mem_fun(*this, &prefsDialog_glade::on_directConnectionRadiobutton_toggled), false);
-   addLabelButton->signal_clicked().connect(sigc::mem_fun(*this, &prefsDialog_glade::on_addLabelButton_clicked), false);
-   removeLabelButton->signal_clicked().connect(sigc::mem_fun(*this, &prefsDialog_glade::on_removeLabelButton_clicked), false);
-   addDirectoryButton->signal_clicked().connect(sigc::mem_fun(*this, &prefsDialog_glade::on_addDirectoryButton_clicked), false);
-   removeDirectoryButton->signal_clicked().connect(sigc::mem_fun(*this, &prefsDialog_glade::on_removeDirectoryButton_clicked), false);
-   patternsCombobox->signal_changed().connect(sigc::mem_fun(*this, &prefsDialog_glade::on_patternsCombobox_changed), false);
-   addPatternButton->signal_clicked().connect(sigc::mem_fun(*this, &prefsDialog_glade::on_addPatternButton_clicked), false);
-   removePatternButton->signal_clicked().connect(sigc::mem_fun(*this, &prefsDialog_glade::on_removePatternButton_clicked), false);
-   resetPatternsButton->signal_clicked().connect(sigc::mem_fun(*this, &prefsDialog_glade::on_resetPatternsButton_clicked), false);
-}
-
-prefsDialog_glade::~prefsDialog_glade()
-{  delete gmm_data;
-}

Deleted: trunk/UI/GTK2/src/prefsDialog_glade.hh
===================================================================
--- trunk/UI/GTK2/src/prefsDialog_glade.hh	2008-11-16 14:12:42 UTC (rev 1413)
+++ trunk/UI/GTK2/src/prefsDialog_glade.hh	2008-11-19 13:24:34 UTC (rev 1414)
@@ -1,96 +0,0 @@
-// generated 2008/7/13 20:38:58 SGT by fabrice at rexor.dyndns.org.(none)
-// using glademm V2.12.1
-//
-// DO NOT EDIT THIS FILE ! It was created using
-// glade-- /home/fabrice/Projects/MetaSE/pinot/UI/GTK2/metase-gtk2.glade
-// for gtk 2.12.11 and gtkmm 2.12.7
-//
-// Please modify the corresponding derived classes in ./src/prefsDialog.hh and./src/prefsDialog.cc
-
-#ifndef _PREFSDIALOG_GLADE_HH
-#  define _PREFSDIALOG_GLADE_HH
-
-
-#if !defined(GLADEMM_DATA)
-#define GLADEMM_DATA 
-#include <gtkmm/accelgroup.h>
-
-class GlademmData
-{  
-        
-        Glib::RefPtr<Gtk::AccelGroup> accgrp;
-public:
-        
-        GlademmData(Glib::RefPtr<Gtk::AccelGroup> ag) : accgrp(ag)
-        {  
-        }
-        
-        Glib::RefPtr<Gtk::AccelGroup>  getAccelGroup()
-        {  return accgrp;
-        }
-};
-#endif //GLADEMM_DATA
-
-#include <gtkmm/dialog.h>
-#include <gtkmm/button.h>
-#include <gtkmm/label.h>
-#include <gtkmm/entry.h>
-#include <gtkmm/checkbutton.h>
-#include <gtkmm/colorbutton.h>
-#include <gtkmm/table.h>
-#include <gtkmm/radiobutton.h>
-#include <gtkmm/spinbutton.h>
-#include <gtkmm/comboboxtext.h>
-#include <gtkmm/treeview.h>
-#include <gtkmm/notebook.h>
-
-class prefsDialog_glade : public Gtk::Dialog
-{  
-        
-        GlademmData *gmm_data;
-public:
-        class Gtk::Dialog * prefsDialog;
-protected:
-        class Gtk::Button * prefsCancelbutton;
-        class Gtk::Button * prefsOkbutton;
-        class Gtk::Label * apiKeyLabel;
-        class Gtk::Entry * apiKeyEntry;
-        class Gtk::CheckButton * enableCompletionCheckbutton;
-        class Gtk::ColorButton * newResultsColorbutton;
-        class Gtk::CheckButton * ignoreRobotsCheckbutton;
-        class Gtk::Label * robotsLabel;
-	class Gtk::Table * generalTable;
-        class Gtk::RadioButton * directConnectionRadiobutton;
-        class Gtk::RadioButton * proxyRadiobutton;
-        class Gtk::Entry * proxyAddressEntry;
-        class Gtk::SpinButton * proxyPortSpinbutton;
-        class Gtk::ComboBoxText * proxyTypeCombobox;
-        class Gtk::TreeView * labelsTreeview;
-        class Gtk::Button * addLabelButton;
-        class Gtk::Button * removeLabelButton;
-        class Gtk::TreeView * directoriesTreeview;
-        class Gtk::Button * addDirectoryButton;
-        class Gtk::Button * removeDirectoryButton;
-        class Gtk::TreeView * patternsTreeview;
-        class Gtk::ComboBoxText * patternsCombobox;
-        class Gtk::Button * addPatternButton;
-        class Gtk::Button * removePatternButton;
-        class Gtk::Button * resetPatternsButton;
-        class Gtk::Notebook * prefsNotebook;
-        
-        prefsDialog_glade();
-        
-        ~prefsDialog_glade();
-private:
-        virtual void on_prefsOkbutton_clicked() = 0;
-        virtual void on_directConnectionRadiobutton_toggled() = 0;
-        virtual void on_addLabelButton_clicked() = 0;
-        virtual void on_removeLabelButton_clicked() = 0;
-        virtual void on_addDirectoryButton_clicked() = 0;
-        virtual void on_removeDirectoryButton_clicked() = 0;
-        virtual void on_patternsCombobox_changed() = 0;
-        virtual void on_addPatternButton_clicked() = 0;
-        virtual void on_removePatternButton_clicked() = 0;
-        virtual void on_resetPatternsButton_clicked() = 0;
-};
-#endif

Added: trunk/UI/GTK2/src/prefsWindow.cc
===================================================================
--- trunk/UI/GTK2/src/prefsWindow.cc	2008-11-16 14:12:42 UTC (rev 1413)
+++ trunk/UI/GTK2/src/prefsWindow.cc	2008-11-19 13:24:34 UTC (rev 1414)
@@ -0,0 +1,967 @@
+/*
+ *  Copyright 2008 Fabrice Colin
+ *
+ *  This program is free software; you can redistribute it and/or modify
+ *  it under the terms of the GNU General Public License as published by
+ *  the Free Software Foundation; either version 2 of the License, or
+ *  (at your option) any later version.
+ *
+ *  This program is distributed in the hope that it will be useful,
+ *  but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ *  GNU General Public License for more details.
+ *
+ *  You should have received a copy of the GNU General Public License
+ *  along with this program; if not, write to the Free Software
+ *  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
+ */
+
+#include <stdlib.h>
+#include <iostream>
+#include <algorithm>
+#include <glibmm/convert.h>
+#include <gdkmm/color.h>
+#include <gtkmm/colorselection.h>
+#include <gtkmm/label.h>
+#include <gtkmm/entry.h>
+#include <gtkmm/menu.h>
+#include <gtkmm/cellrenderertext.h>
+#include <gtkmm/messagedialog.h>
+#include <gtkmm/main.h>
+
+#include "config.h"
+#include "NLS.h"
+#include "StringManip.h"
+#include "DBusIndex.h"
+#include "ModuleFactory.h"
+#include "PinotUtils.h"
+#include "prefsWindow.hh"
+
+using namespace std;
+using namespace Glib;
+using namespace Gdk;
+using namespace Gtk;
+
+class StartDaemonThread : public WorkerThread
+{
+	public:
+		StartDaemonThread() :
+			WorkerThread()
+		{
+		}
+		virtual ~StartDaemonThread()
+		{
+		}
+
+		virtual std::string getType(void) const
+		{
+			return "StartDaemonThread";
+		}
+
+	protected:
+		virtual void doWork(void)
+		{
+			// Save the settings
+			PinotSettings::getInstance().save();
+
+			// Ask the daemon to reload its configuration
+			// Let D-Bus activate the service if necessary
+			DBusIndex::reload();
+		}
+
+	private:
+		StartDaemonThread(const StartDaemonThread &other);
+		StartDaemonThread &operator=(const StartDaemonThread &other);
+
+};
+
+class GetLabelsThread : public WorkerThread
+{
+	public:
+		GetLabelsThread() :
+			WorkerThread()
+		{
+		}
+		virtual ~GetLabelsThread()
+		{
+		}
+
+		virtual std::string getType(void) const
+		{
+			return "GetLabelsThread";
+		}
+
+	protected:
+		virtual void doWork(void)
+		{
+			set<string> &labels = PinotSettings::getInstance().m_labels;
+
+			// Get labels directly from the daemon's index
+			IndexInterface *pDaemonIndex = PinotSettings::getInstance().getIndex(PinotSettings::getInstance().m_daemonIndexLocation);
+			if (pDaemonIndex != NULL)
+			{
+				set<string> indexLabels;
+
+				// Nothing might be found if we are upgrading from an older version
+				// and the daemon has not been run
+				if (pDaemonIndex->getLabels(indexLabels) == true)
+				{
+					labels.clear();
+
+					copy(indexLabels.begin(), indexLabels.end(),
+						inserter(labels, labels.begin()));
+				}
+#ifdef DEBUG
+				else cout << "GetLabelsThread::doWork: relying on configuration file" << endl;
+#endif
+
+				delete pDaemonIndex;
+			}
+		}
+
+	private:
+		GetLabelsThread(const GetLabelsThread &other);
+		GetLabelsThread &operator=(const GetLabelsThread &other);
+
+};
+
+prefsWindow::InternalState::InternalState(unsigned int maxIndexThreads, prefsWindow *pWindow) :
+        ThreadsManager(PinotSettings::getInstance().m_docsIndexLocation, maxIndexThreads)
+{
+        m_onThreadEndSignal.connect(sigc::mem_fun(*pWindow, &prefsWindow::on_thread_end));
+}
+
+prefsWindow::InternalState::~InternalState()
+{
+}
+
+prefsWindow::prefsWindow() :
+	prefsWindow_glade(),
+	m_settings(PinotSettings::getInstance()),
+	m_state(10, this)
+{
+	Color newColour;
+
+	newColour.set_red(m_settings.m_newResultsColourRed);
+	newColour.set_green(m_settings.m_newResultsColourGreen);
+	newColour.set_blue(m_settings.m_newResultsColourBlue);
+
+	// Initialize widgets
+	// Ignore robots directives
+	ignoreRobotsCheckbutton->set_active(m_settings.m_ignoreRobotsDirectives);
+	// Google API key
+	if (m_settings.m_googleAPIKey.empty() == false)
+	{
+		apiKeyEntry->set_text(m_settings.m_googleAPIKey);
+	}
+	// New results colour
+	newResultsColorbutton->set_color(newColour);
+	// Enable terms suggestion
+	enableCompletionCheckbutton->set_active(m_settings.m_suggestQueryTerms);
+
+	// Any plugin editable parameter ?
+	if (m_settings.m_editablePluginValues.empty() == false)
+	{
+		Glib::PropertyProxy<guint> columnsProp(generalTable->property_n_columns());
+		Glib::PropertyProxy<guint> rowsProp(generalTable->property_n_rows());
+		guint rowsCount = rowsProp.get_value();
+
+#ifdef DEBUG
+		cout << "prefsWindow: adding " << m_settings.m_editablePluginValues.size() << " more rows" << endl;
+#endif
+		generalTable->resize(rowsCount + m_settings.m_editablePluginValues.size(), columnsProp.get_value());
+
+		for (std::map<string, string>::const_iterator valueIter = m_settings.m_editablePluginValues.begin();
+			valueIter != m_settings.m_editablePluginValues.end(); ++valueIter)
+		{
+			++rowsCount;
+			attach_value_widgets(valueIter->first, valueIter->second, rowsCount);
+		}
+	}
+
+	populate_proxyTypeCombobox();
+	proxyRadiobutton->set_active(m_settings.m_proxyEnabled);
+	proxyAddressEntry->set_text(m_settings.m_proxyAddress);
+	proxyPortSpinbutton->set_value((double)m_settings.m_proxyPort);
+	int proxyType = 0;
+	if (m_settings.m_proxyType == "SOCKS4")
+	{
+		proxyType = 1;
+	}
+	else if (m_settings.m_proxyType == "SOCKS5")
+	{
+		proxyType = 2;
+	}
+	proxyTypeCombobox->set_active(proxyType);
+	on_directConnectionRadiobutton_toggled();
+
+	// Associate the columns model to the labels tree
+	m_refLabelsTree = ListStore::create(m_labelsColumns);
+	labelsTreeview->set_model(m_refLabelsTree);
+	TreeViewColumn *pColumn = new TreeViewColumn(_("Name"));
+	CellRendererText *pTextRenderer = new CellRendererText();
+	pTextRenderer->signal_edited().connect(sigc::mem_fun(*this, &prefsWindow::updateLabelRow));
+	pColumn->pack_start(*manage(pTextRenderer));
+	pColumn->set_cell_data_func(*pTextRenderer, sigc::mem_fun(*this, &prefsWindow::renderLabelNameColumn));
+	pColumn->add_attribute(pTextRenderer->property_text(), m_labelsColumns.m_name);
+	pColumn->set_resizable(true);
+	pColumn->set_sort_column(m_labelsColumns.m_name);
+	labelsTreeview->append_column(*manage(pColumn));
+	// Allow only single selection
+	labelsTreeview->get_selection()->set_mode(SELECTION_SINGLE);
+	// Prevent adding/removing labels until we have the list
+	addLabelButton->set_sensitive(false);
+	removeLabelButton->set_sensitive(false);
+
+	// Associate the columns model to the directories tree
+	m_refDirectoriesTree = ListStore::create(m_directoriesColumns);
+	directoriesTreeview->set_model(m_refDirectoriesTree);
+	directoriesTreeview->append_column_editable(_("Monitor"), m_directoriesColumns.m_monitor);
+	directoriesTreeview->append_column(_("Location"), m_directoriesColumns.m_location);
+	// Allow only single selection
+	directoriesTreeview->get_selection()->set_mode(SELECTION_SINGLE);
+	populate_directoriesTreeview();
+
+	// Associate the columns model to the file patterns tree
+	m_refPatternsTree = ListStore::create(m_patternsColumns);
+	patternsTreeview->set_model(m_refPatternsTree);
+	patternsTreeview->append_column_editable(_("Pattern"), m_patternsColumns.m_location);
+	// Allow only single selection
+	patternsTreeview->get_selection()->set_mode(SELECTION_SINGLE);
+	populate_patternsCombobox();
+	populate_patternsTreeview(m_settings.m_filePatternsList, m_settings.m_isBlackList);
+
+	// Hide the Google API entry field ?
+	if (ModuleFactory::isSupported("googleapi") == false)
+	{
+		apiKeyLabel->hide();
+		apiKeyEntry->hide();
+	}
+
+	// Show The Indexing tab on first run
+	if ((m_settings.isFirstRun() == true) &&
+		(prefsNotebook != NULL) &&
+		(prefsNotebook->get_n_pages() > 3))
+	{
+		prefsNotebook->set_current_page(3);
+	}
+
+	// Connect to threads' finished signal
+	m_state.connect();
+
+	// Get the labels
+	GetLabelsThread *pThread = new GetLabelsThread();
+	if (m_state.start_thread(pThread) == false)
+	{
+		delete pThread;
+
+		populate_labelsTreeview();
+	}
+}
+
+prefsWindow::~prefsWindow()
+{
+	m_state.disconnect();
+}
+
+void prefsWindow::updateLabelRow(const ustring &path_string, const ustring &text)
+{
+	Gtk::TreePath path(path_string);
+
+	// Get the row
+	TreeModel::iterator iter = m_refLabelsTree->get_iter(path);
+	if (iter)
+	{
+		TreeRow row = *iter;
+
+#ifdef DEBUG
+		cout << "prefsWindow::updateLabelRow: set label to " << text << endl;
+#endif
+		// Set the value of the name column
+		row.set_value(m_labelsColumns.m_name, (ustring)text);
+	}
+}
+
+void prefsWindow::renderLabelNameColumn(CellRenderer *pRenderer, const TreeModel::iterator &iter)
+{
+	TreeModel::Row row = *iter;
+
+	if (pRenderer == NULL)
+	{
+		return;
+	}
+
+	CellRendererText *pTextRenderer = dynamic_cast<CellRendererText*>(pRenderer);
+	if (pTextRenderer != NULL)
+	{
+		bool isNewLabel = false;
+
+		// Is this a new label ?
+		if (row[m_labelsColumns.m_enabled] == false)
+		{
+			isNewLabel = true;
+		}
+
+		// Set the editable property
+#ifdef GLIBMM_PROPERTIES_ENABLED
+		pTextRenderer->property_editable() = isNewLabel;
+#else
+		pTextRenderer->set_property("editable", isNewLabel);
+#endif
+	}
+}
+
+void prefsWindow::on_thread_end(WorkerThread *pThread)
+{
+	bool canQuit = false;
+
+	if (pThread == NULL)
+	{
+		return;
+	}
+
+	// Any thread still running ?
+	if (m_state.get_threads_count() > 0)
+	{
+		canQuit = true;
+	}
+
+	// What type of thread was it ?
+	string type = pThread->getType();
+	// Did the thread fail ?
+	string status = pThread->getStatus();
+	if (status.empty() == false)
+	{
+#ifdef DEBUG
+		cout << "prefsWindow::on_thread_end: " << status << endl;
+#endif
+		// FIXME: tell the user the thread failed
+	}
+	else if (type == "GetLabelsThread")
+	{
+		populate_labelsTreeview();
+	}
+	else if (type == "StartDaemonThread")
+	{
+	}
+	else if (type == "LabelUpdateThread")
+	{
+	}
+
+	// Delete the thread
+	delete pThread;
+
+	if (canQuit == false)
+	{
+		// We might be able to run a queued action
+		m_state.pop_queue();
+	}
+	else
+	{
+		on_prefsWindow_delete_event(NULL);
+	}
+}
+
+void prefsWindow::attach_value_widgets(const string &name, const string &value, guint rowNumber)
+{
+	Label *valueLabel = manage(new Label(name + ":"));
+	Entry *valueEntry = manage(new Entry());
+
+	// These settings are what Glade-- would use
+	valueLabel->set_alignment(0,0.5); 
+	valueLabel->set_padding(4,4);
+	valueLabel->set_justify(Gtk::JUSTIFY_LEFT); 
+	valueLabel->set_line_wrap(false);
+	valueLabel->set_use_markup(false);
+	valueLabel->set_selectable(false);
+	valueLabel->set_ellipsize(Pango::ELLIPSIZE_NONE);
+	valueLabel->set_width_chars(-1);
+	valueLabel->set_angle(0);
+	valueLabel->set_single_line_mode(false);
+
+	valueEntry->set_flags(Gtk::CAN_FOCUS);
+	valueEntry->set_visibility(true);
+	valueEntry->set_editable(true);
+	valueEntry->set_max_length(0);
+	valueEntry->set_has_frame(true);
+	valueEntry->set_activates_default(false);
+
+	valueEntry->set_text(to_utf8(value));
+
+	generalTable->attach(*valueLabel, 0, 1, rowNumber, rowNumber + 1, Gtk::FILL, Gtk::FILL, 0, 0);
+	generalTable->attach(*valueEntry, 1, 2, rowNumber, rowNumber + 1, Gtk::EXPAND|Gtk::FILL, Gtk::FILL, 4, 4);
+
+	m_editableValueEntries.push_back(valueEntry);
+
+	valueLabel->show();
+	valueEntry->show();
+}
+
+void prefsWindow::populate_proxyTypeCombobox()
+{
+	proxyTypeCombobox->append_text("HTTP");
+	proxyTypeCombobox->append_text("SOCKS v4");
+	proxyTypeCombobox->append_text("SOCKS v5");
+}
+
+void prefsWindow::populate_labelsTreeview()
+{
+	TreeModel::iterator iter;
+	TreeModel::Row row;
+	set<string> &labels = m_settings.m_labels;
+
+	// Now this can be enabled
+	addLabelButton->set_sensitive(true);
+
+	if (labels.empty() == true)
+	{
+		// This button will stay disabled until labels are added to the list
+		removeLabelButton->set_sensitive(false);
+		return;
+	}
+
+	// Populate the tree
+	for (set<string>::const_iterator labelIter = labels.begin();
+		labelIter != labels.end();
+		++labelIter)
+	{
+		// Create a new row
+		iter = m_refLabelsTree->append();
+		row = *iter;
+		// Set its name
+		row[m_labelsColumns.m_name] = *labelIter;
+		// This allows to differentiate existing labels from new labels the user may create
+		row[m_labelsColumns.m_enabled] = true;
+	}
+
+	removeLabelButton->set_sensitive(true);
+}
+
+void prefsWindow::save_labelsTreeview()
+{
+	set<string> &labels = m_settings.m_labels;
+
+	labels.clear();
+
+	// Go through the labels tree
+	TreeModel::Children children = m_refLabelsTree->children();
+	if (children.empty() == false)
+	{
+		TreeModel::Children::iterator iter = children.begin();
+		for (; iter != children.end(); ++iter)
+		{
+			TreeModel::Row row = *iter;
+			ustring labelName(row[m_labelsColumns.m_name]);
+
+			// Check user didn't recreate this label after having deleted it
+			set<string>::iterator labelIter = m_deletedLabels.find(from_utf8(labelName));
+			if (labelIter != m_deletedLabels.end())
+			{
+				m_deletedLabels.erase(labelIter);
+			}
+			// Is this a new label ?
+			if (row[m_labelsColumns.m_enabled] == false)
+			{
+				m_addedLabels.insert(from_utf8(labelName));
+			}
+
+#ifdef DEBUG
+			cout << "prefsWindow::save_labelsTreeview: " << labelName << endl;
+#endif
+			// Add this new label to the settings
+			labels.insert(labelName);
+		}
+	}
+}
+
+void prefsWindow::populate_directoriesTreeview()
+{
+	TreeModel::iterator iter;
+	TreeModel::Row row;
+	ustring dirsString;
+
+	if (m_settings.m_indexableLocations.empty() == true)
+	{
+		// This button will stay disabled until directories are added to the list
+		removeDirectoryButton->set_sensitive(false);
+		return;
+	}
+
+	// Populate the tree
+	for (set<PinotSettings::IndexableLocation>::iterator dirIter = m_settings.m_indexableLocations.begin();
+		dirIter != m_settings.m_indexableLocations.end();
+		++dirIter)
+	{
+		// Create a new row
+		iter = m_refDirectoriesTree->append();
+		row = *iter;
+		row[m_directoriesColumns.m_monitor] = dirIter->m_monitor;
+		row[m_directoriesColumns.m_location] = dirIter->m_name;
+		dirsString += dirIter->m_name + (dirIter->m_monitor == true ? "1" : "0") + "|";
+	}
+
+	m_directoriesHash = StringManip::hashString(dirsString);
+	removeDirectoryButton->set_sensitive(true);
+}
+
+bool prefsWindow::save_directoriesTreeview()
+{
+	string dirsString;
+
+	// Clear the current settings
+	m_settings.m_indexableLocations.clear();
+
+	// Go through the directories tree
+	TreeModel::Children children = m_refDirectoriesTree->children();
+	if (children.empty() == false)
+	{
+		TreeModel::Children::iterator iter = children.begin();
+		for (; iter != children.end(); ++iter)
+		{
+			TreeModel::Row row = *iter;
+			PinotSettings::IndexableLocation indexableLocation;
+
+			// Add this new directory to the settings
+			indexableLocation.m_monitor = row[m_directoriesColumns.m_monitor];
+			indexableLocation.m_name = row[m_directoriesColumns.m_location];
+
+			string dirLabel("file://");
+			dirLabel += from_utf8(indexableLocation.m_name);
+
+			// Check user didn't recreate this directory after having deleted it
+			set<string>::iterator dirIter = m_deletedDirectories.find(dirLabel);
+			if (dirIter != m_deletedDirectories.end())
+			{
+				m_deletedDirectories.erase(dirIter);
+			}
+
+#ifdef DEBUG
+			cout << "prefsWindow::save_directoriesTreeview: " << indexableLocation.m_name << endl;
+#endif
+			m_settings.m_indexableLocations.insert(indexableLocation);
+			dirsString += indexableLocation.m_name + (indexableLocation.m_monitor == true ? "1" : "0") + "|";
+		}
+	}
+
+	if (m_directoriesHash != StringManip::hashString(dirsString))
+	{
+#ifdef DEBUG
+		cout << "prefsWindow::save_directoriesTreeview: directories changed" << endl;
+#endif
+		return true;
+	}
+
+	return false;
+}
+
+void prefsWindow::populate_patternsCombobox()
+{
+	patternsCombobox->append_text(_("Exclude these patterns from indexing"));
+	patternsCombobox->append_text(_("Only index these patterns"));
+}
+
+void prefsWindow::populate_patternsTreeview(const set<ustring> &patternsList, bool isBlackList)
+{
+	TreeModel::iterator iter;
+	TreeModel::Row row;
+	ustring patternsString;
+
+	if (patternsList.empty() == true)
+	{
+		// This button will stay disabled until a ppatern is added to the list
+		removePatternButton->set_sensitive(false);
+		return;
+	}
+
+	// Populate the tree
+	for (set<ustring>::iterator patternIter = patternsList.begin();
+		patternIter != patternsList.end();
+		++patternIter)
+	{
+		ustring pattern(*patternIter);
+
+		// Create a new row
+		iter = m_refPatternsTree->append();
+		row = *iter;
+		// Set its name
+		row[m_patternsColumns.m_location] = pattern;
+		patternsString += pattern + "|";
+	}
+
+	removePatternButton->set_sensitive(true);
+
+	// Is it a black or white list ?
+	if (isBlackList == true)
+	{
+		patternsCombobox->set_active(0);
+		patternsString += "0";
+	}
+	else
+	{
+		patternsCombobox->set_active(1);
+		patternsString += "1";
+	}
+
+	m_patternsHash = StringManip::hashString(patternsString);
+}
+
+bool prefsWindow::save_patternsTreeview()
+{
+	ustring patternsString;
+
+	// Clear the current settings
+	m_settings.m_filePatternsList.clear();
+
+	// Go through the file patterns tree
+	TreeModel::Children children = m_refPatternsTree->children();
+	if (children.empty() == false)
+	{
+		TreeModel::Children::iterator iter = children.begin();
+		for (; iter != children.end(); ++iter)
+		{
+			TreeModel::Row row = *iter;
+			ustring pattern(row[m_patternsColumns.m_location]);
+
+			if (pattern.empty() == false)
+			{
+				m_settings.m_filePatternsList.insert(pattern);
+				patternsString += pattern + "|";
+			}
+		}
+	}
+	if (patternsCombobox->get_active_row_number() == 0)
+	{
+		m_settings.m_isBlackList = true;
+		patternsString += "0";
+	}
+	else
+	{
+		m_settings.m_isBlackList = false;
+		patternsString += "1";
+	}
+
+	if (m_patternsHash != StringManip::hashString(patternsString))
+	{
+#ifdef DEBUG
+		cout << "prefsWindow::save_patternsTreeview: patterns changed" << endl;
+#endif
+		return true;
+	}
+
+	return false;
+}
+
+void prefsWindow::on_prefsCancelbutton_clicked()
+{
+	on_prefsWindow_delete_event(NULL);
+}
+
+void prefsWindow::on_prefsOkbutton_clicked()
+{
+	bool startedThread = false;
+
+	// Disable the buttons
+	prefsCancelbutton->set_sensitive(false);
+	prefsOkbutton->set_sensitive(false);
+
+	// Synchronise widgets with settings
+	m_settings.m_ignoreRobotsDirectives = ignoreRobotsCheckbutton->get_active();
+	Color newColour = newResultsColorbutton->get_color();
+	m_settings.m_newResultsColourRed = newColour.get_red();
+	m_settings.m_newResultsColourGreen = newColour.get_green();
+	m_settings.m_newResultsColourBlue = newColour.get_blue();
+	m_settings.m_suggestQueryTerms = enableCompletionCheckbutton->get_active();
+	m_settings.m_googleAPIKey = apiKeyEntry->get_text();
+	// Any plugin editable parameter ?
+	if (m_settings.m_editablePluginValues.empty() == false)
+	{
+		std::map<string, string>::iterator valueIter = m_settings.m_editablePluginValues.begin();
+		vector<Entry *>::const_iterator entryIter = m_editableValueEntries.begin();
+		while ((valueIter != m_settings.m_editablePluginValues.end()) &&
+			(entryIter != m_editableValueEntries.end()))
+		{
+			ustring value((*entryIter)->get_text());
+
+			valueIter->second = from_utf8(value);
+
+			// Next
+			++valueIter;
+			++entryIter;
+		}
+	}
+
+	m_settings.m_proxyEnabled = proxyRadiobutton->get_active();
+	m_settings.m_proxyAddress = proxyAddressEntry->get_text();
+	m_settings.m_proxyPort = (unsigned int)proxyPortSpinbutton->get_value();
+	int proxyType = proxyTypeCombobox->get_active_row_number();
+	if (proxyType == 1)
+	{
+		m_settings.m_proxyType = "SOCKS4";
+	}
+	else if (proxyType == 2)
+	{
+		m_settings.m_proxyType = "SOCKS5";
+	}
+	else
+	{
+		m_settings.m_proxyType = "HTTP";
+	}
+
+	// Validate the current lists
+	save_labelsTreeview();
+	bool startForDirectories = save_directoriesTreeview();
+	bool startForPatterns = save_patternsTreeview();
+	if ((startForDirectories == true) ||
+		(startForPatterns == true))
+	{
+		StartDaemonThread *pThread = new StartDaemonThread();
+
+		if (m_state.start_thread(pThread) == false)
+		{
+			delete pThread;
+		}
+		else
+		{
+			startedThread = true;
+		}
+	}
+	if ((m_addedLabels.empty() == false) ||
+		(m_deletedLabels.empty() == false))
+	{
+		LabelUpdateThread *pThread = new LabelUpdateThread(m_addedLabels, m_deletedLabels);
+
+		if (m_state.start_thread(pThread) == false)
+		{
+			delete pThread;
+		}
+		else
+		{
+			startedThread = true;
+		}
+	}
+
+	if (startedThread == false)
+	{
+		on_prefsWindow_delete_event(NULL);
+	}
+	// FIXME: else, disable all buttons or provide some visual feedback, until threads are done
+}
+
+void prefsWindow::on_directConnectionRadiobutton_toggled()
+{
+	bool enabled = proxyRadiobutton->get_active();
+
+	proxyAddressEntry->set_sensitive(enabled);
+	proxyPortSpinbutton->set_sensitive(enabled);
+	proxyTypeCombobox->set_sensitive(enabled);
+}
+
+void prefsWindow::on_addLabelButton_clicked()
+{
+	// Now create a new entry in the labels list
+	TreeModel::iterator iter = m_refLabelsTree->append();
+	TreeModel::Row row = *iter;
+	row[m_labelsColumns.m_name] = to_utf8(_("New Label"));
+	// This marks the label as new
+	row[m_labelsColumns.m_enabled] = false;
+
+	// Enable this button
+	removeLabelButton->set_sensitive(true);
+}
+
+void prefsWindow::on_removeLabelButton_clicked()
+{
+	// Get the selected label in the list
+	TreeModel::iterator iter = labelsTreeview->get_selection()->get_selected();
+	if (iter)
+	{
+		// Unselect
+		labelsTreeview->get_selection()->unselect(iter);
+		// Select another row
+		TreeModel::Path labelPath = m_refLabelsTree->get_path(iter);
+		labelPath.next();
+		labelsTreeview->get_selection()->select(labelPath);
+		// Erase
+		TreeModel::Row row = *iter;
+		m_deletedLabels.insert(from_utf8(row[m_labelsColumns.m_name]));
+		m_refLabelsTree->erase(row);
+
+		TreeModel::Children children = m_refLabelsTree->children();
+		if (children.empty() == true)
+		{
+			// Disable this button
+			removeLabelButton->set_sensitive(false);
+		}
+	}
+}
+
+void prefsWindow::on_addDirectoryButton_clicked()
+{
+	ustring dirName;
+
+	TreeModel::Children children = m_refDirectoriesTree->children();
+	bool wasEmpty = children.empty();
+
+	if (select_file_name(_("Directory to index"), dirName, true, true) == true)
+	{
+#ifdef DEBUG
+		cout << "prefsWindow::on_addDirectoryButton_clicked: "
+			<< dirName << endl;
+#endif
+		// Create a new entry in the directories list
+		TreeModel::iterator iter = m_refDirectoriesTree->append();
+		TreeModel::Row row = *iter;
+	
+		row[m_directoriesColumns.m_monitor] = false;
+		row[m_directoriesColumns.m_location] = to_utf8(dirName);
+
+		if (wasEmpty == true)
+		{
+			// Enable this button
+			removeDirectoryButton->set_sensitive(true);
+		}
+	}
+}
+
+void prefsWindow::on_removeDirectoryButton_clicked()
+{
+	// Get the selected directory in the list
+	TreeModel::iterator iter = directoriesTreeview->get_selection()->get_selected();
+	if (iter)
+	{
+		string dirLabel("file://");
+
+		// Unselect
+		directoriesTreeview->get_selection()->unselect(iter);
+		// Select another row
+		TreeModel::Path dirPath = m_refDirectoriesTree->get_path(iter);
+		dirPath.next();
+		directoriesTreeview->get_selection()->select(dirPath);
+
+		// Erase
+		TreeModel::Row row = *iter;
+		dirLabel += from_utf8(row[m_directoriesColumns.m_location]);
+		m_deletedDirectories.insert(dirLabel);
+		m_refDirectoriesTree->erase(row);
+
+		TreeModel::Children children = m_refDirectoriesTree->children();
+		if (children.empty() == true)
+		{
+			// Disable this button
+			removeDirectoryButton->set_sensitive(false);
+		}
+	}
+}
+
+void prefsWindow::on_patternsCombobox_changed()
+{
+	int activeRow = patternsCombobox->get_active_row_number();
+
+	if (((activeRow == 0) && (m_settings.m_isBlackList == true)) ||
+		((activeRow > 0) && (m_settings.m_isBlackList == false)))
+	{
+		// No change
+		return;
+	}
+
+	// Unselect
+	patternsTreeview->get_selection()->unselect_all();
+	// Remove all patterns in order to make sure the user enters a new bunch
+	m_refPatternsTree->clear();
+}
+
+void prefsWindow::on_addPatternButton_clicked()
+{
+	TreeModel::Children children = m_refPatternsTree->children();
+	bool wasEmpty = children.empty();
+
+	// Create a new entry in the file patterns list
+	TreeModel::iterator iter = m_refPatternsTree->append();
+	TreeModel::Row row = *iter;
+
+	row[m_patternsColumns.m_location] = "";
+	row[m_patternsColumns.m_mTime] = time(NULL);
+
+	// Select and start editing the row
+	TreeViewColumn *pColumn = patternsTreeview->get_column(0);
+	if (pColumn != NULL)
+	{
+		TreeModel::Path patternPath = m_refPatternsTree->get_path(iter);
+		patternsTreeview->set_cursor(patternPath, *pColumn, true);
+	}
+
+	if (wasEmpty == true)
+	{
+		// Enable this button
+		removePatternButton->set_sensitive(true);
+	}
+}
+
+void prefsWindow::on_removePatternButton_clicked()
+{
+	// Get the selected file pattern in the list
+	TreeModel::iterator iter = patternsTreeview->get_selection()->get_selected();
+	if (iter)
+	{
+		// Unselect
+		patternsTreeview->get_selection()->unselect(iter);
+		// Select another row
+		TreeModel::Path patternPath = m_refPatternsTree->get_path(iter);
+		patternPath.next();
+		patternsTreeview->get_selection()->select(patternPath);
+
+		// Erase
+		TreeModel::Row row = *iter;
+		m_refPatternsTree->erase(row);
+
+		TreeModel::Children children = m_refPatternsTree->children();
+		if (children.empty() == true)
+		{
+			// Disable this button
+			removePatternButton->set_sensitive(false);
+		}
+	}
+}
+
+void prefsWindow::on_resetPatternsButton_clicked()
+{
+	set<ustring> defaultPatterns;
+	bool isBlackList = m_settings.getDefaultPatterns(defaultPatterns);
+
+	// Unselect
+	patternsTreeview->get_selection()->unselect_all();
+	// Remove all patterns
+	m_refPatternsTree->clear();
+
+	// Repopulate with defaults
+	populate_patternsTreeview(defaultPatterns, isBlackList);
+}
+
+bool prefsWindow::on_prefsWindow_delete_event(GdkEventAny *ev)
+{
+	// Any thread still running ?
+	if (m_state.get_threads_count() > 0)
+	{
+		ustring boxMsg(_("At least one task hasn't completed yet. Quit now ?"));
+		MessageDialog msgDialog(boxMsg, false, MESSAGE_QUESTION, BUTTONS_YES_NO);
+		msgDialog.set_title(_("Quit"));
+		msgDialog.set_transient_for(*this);
+		msgDialog.show();
+		int result = msgDialog.run();
+		if (result == RESPONSE_NO)
+		{
+			return true;
+		}
+
+		m_state.disconnect();
+		m_state.stop_threads();
+	}
+	else
+	{
+		m_state.disconnect();
+	}
+
+	Main::quit();
+	return false;
+}
+

Added: trunk/UI/GTK2/src/prefsWindow.hh
===================================================================
--- trunk/UI/GTK2/src/prefsWindow.hh	2008-11-16 14:12:42 UTC (rev 1413)
+++ trunk/UI/GTK2/src/prefsWindow.hh	2008-11-19 13:24:34 UTC (rev 1414)
@@ -0,0 +1,94 @@
+/*
+ *  Copyright 2008 Fabrice Colin
+ *
+ *  This program is free software; you can redistribute it and/or modify
+ *  it under the terms of the GNU General Public License as published by
+ *  the Free Software Foundation; either version 2 of the License, or
+ *  (at your option) any later version.
+ *
+ *  This program is distributed in the hope that it will be useful,
+ *  but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ *  GNU General Public License for more details.
+ *
+ *  You should have received a copy of the GNU General Public License
+ *  along with this program; if not, write to the Free Software
+ *  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
+ */
+
+#ifndef _PREFSWINDOW_HH
+#define _PREFSWINDOW_HH
+
+#include <string>
+#include <map>
+#include <set>
+#include <vector>
+#include <glibmm/refptr.h>
+#include <glibmm/ustring.h>
+#include <gtkmm/liststore.h>
+
+#include "ModelColumns.h"
+#include "PinotSettings.h"
+#include "WorkerThreads.h"
+#include "prefsWindow_glade.hh"
+
+class prefsWindow : public prefsWindow_glade
+{  
+public:
+	prefsWindow();
+	virtual ~prefsWindow();
+
+protected:
+	PinotSettings &m_settings;
+	Glib::RefPtr<Gtk::ListStore> m_refViewTree;
+	LabelModelColumns m_labelsColumns;
+	Glib::RefPtr<Gtk::ListStore> m_refLabelsTree;
+	IndexableModelColumns m_directoriesColumns;
+	Glib::RefPtr<Gtk::ListStore> m_refDirectoriesTree;
+	TimestampedModelColumns m_mailColumns;
+	TimestampedModelColumns m_patternsColumns;
+	Glib::RefPtr<Gtk::ListStore> m_refPatternsTree;
+	std::vector<Gtk::Entry *> m_editableValueEntries;
+	std::set<std::string> m_addedLabels;
+	std::set<std::string> m_deletedLabels;
+	std::set<std::string> m_deletedDirectories;
+	std::string m_directoriesHash;
+	std::string m_patternsHash;
+	class InternalState : public ThreadsManager
+	{
+	public:
+		InternalState(unsigned int maxIndexThreads,
+			prefsWindow *pWindow);
+		~InternalState();
+
+	} m_state;
+
+	virtual void on_prefsCancelbutton_clicked();
+	virtual void on_prefsOkbutton_clicked();
+	virtual void on_directConnectionRadiobutton_toggled();
+	virtual void on_addLabelButton_clicked();
+	virtual void on_removeLabelButton_clicked();
+	virtual void on_addDirectoryButton_clicked();
+	virtual void on_removeDirectoryButton_clicked();
+	virtual void on_patternsCombobox_changed();
+	virtual void on_addPatternButton_clicked();
+	virtual void on_removePatternButton_clicked();
+	virtual void on_resetPatternsButton_clicked();
+	virtual bool on_prefsWindow_delete_event(GdkEventAny *ev);
+
+	void on_thread_end(WorkerThread *pThread);
+	void updateLabelRow(const Glib::ustring &path_string, const Glib::ustring &text);
+	void renderLabelNameColumn(Gtk::CellRenderer *pRenderer, const Gtk::TreeModel::iterator &iter);
+	void attach_value_widgets(const std::string &name, const std::string &value, guint rowNumber);
+	void populate_proxyTypeCombobox();
+	void populate_labelsTreeview();
+	void save_labelsTreeview();
+	void populate_directoriesTreeview();
+	bool save_directoriesTreeview();
+	void populate_patternsCombobox();
+	void populate_patternsTreeview(const std::set<Glib::ustring> &patternsList, bool isBlackList);
+	bool save_patternsTreeview();
+
+};
+
+#endif

Added: trunk/UI/GTK2/src/prefsWindow_glade.cc
===================================================================
--- trunk/UI/GTK2/src/prefsWindow_glade.cc	2008-11-16 14:12:42 UTC (rev 1413)
+++ trunk/UI/GTK2/src/prefsWindow_glade.cc	2008-11-19 13:24:34 UTC (rev 1414)
@@ -0,0 +1,618 @@
+// generated 2008/11/18 23:24:22 SGT by fabrice at rexor.dyndns.org.(none)
+// using glademm V2.12.1
+//
+// DO NOT EDIT THIS FILE ! It was created using
+// glade-- /home/fabrice/Projects/MetaSE/pinot/UI/GTK2/metase-gtk2.glade
+// for gtk 2.12.12 and gtkmm 2.12.7
+//
+// Please modify the corresponding derived classes in ./src/prefsWindow.cc
+
+
+#if defined __GNUC__ && __GNUC__ < 3
+#error This program will crash if compiled with g++ 2.x
+// see the dynamic_cast bug in the gtkmm FAQ
+#endif //
+#include "config.h"
+/*
+ * Standard gettext macros.
+ */
+#ifdef ENABLE_NLS
+#  include <libintl.h>
+#  undef _
+#  define _(String) dgettext (GETTEXT_PACKAGE, String)
+#  ifdef gettext_noop
+#    define N_(String) gettext_noop (String)
+#  else
+#    define N_(String) (String)
+#  endif
+#endif
+#include <gtkmmconfig.h>
+#if GTKMM_MAJOR_VERSION==2 && GTKMM_MINOR_VERSION>2
+#include <sigc++/sigc++.h>
+#define GMM_GTKMM_22_24(a,b) b
+#else //gtkmm 2.2
+#define GMM_GTKMM_22_24(a,b) a
+#endif //
+#include "prefsWindow_glade.hh"
+#include <gdk/gdkkeysyms.h>
+#include <gtkmm/accelgroup.h>
+#include <gtkmm/buttonbox.h>
+#include <gtkmm/label.h>
+#include <gtkmm/radiobutton.h>
+#include <gtkmm/adjustment.h>
+#include <gtkmm/table.h>
+#include <gtkmm/scrolledwindow.h>
+#include <gtkmm/image.h>
+#include <gtkmm/box.h>
+#include <gtkmm/alignment.h>
+#ifndef ENABLE_NLS
+#  define textdomain(String) (String)
+#  define gettext(String) (String)
+#  define dgettext(Domain,Message) (Message)
+#  define dcgettext(Domain,Message,Type) (Message)
+#  define bindtextdomain(Domain,Directory) (Domain)
+#  define _(String) (String)
+#  define N_(String) (String)
+#endif
+
+
+prefsWindow_glade::prefsWindow_glade(
+) : Gtk::Window(Gtk::WINDOW_TOPLEVEL)
+{  
+   
+   Gtk::Window *prefsWindow = this;
+   gmm_data = new GlademmData(get_accel_group());
+   prefsCancelbutton = Gtk::manage(new class Gtk::Button(Gtk::StockID("gtk-cancel")));
+   prefsOkbutton = Gtk::manage(new class Gtk::Button(Gtk::StockID("gtk-ok")));
+   
+   Gtk::HButtonBox *hbuttonbox1 = Gtk::manage(new class Gtk::HButtonBox(Gtk::BUTTONBOX_END, 0));
+   apiKeyLabel = Gtk::manage(new class Gtk::Label(_("Google API key:")));
+   apiKeyEntry = Gtk::manage(new class Gtk::Entry());
+   
+   Gtk::Label *queriesLabel = Gtk::manage(new class Gtk::Label(_("Queries:")));
+   enableCompletionCheckbutton = Gtk::manage(new class Gtk::CheckButton(_("Enable search terms suggestion")));
+   newResultsColorbutton = Gtk::manage(new class Gtk::ColorButton());
+   ignoreRobotsCheckbutton = Gtk::manage(new class Gtk::CheckButton(_("Ignore robots.txt and Robots META tag")));
+   robotsLabels = Gtk::manage(new class Gtk::Label(_("HTTP crawling:")));
+   
+   Gtk::Label *newResultsLabel = Gtk::manage(new class Gtk::Label(_("New results:")));
+   generalTable = Gtk::manage(new class Gtk::Table(2, 2, false));
+   
+   Gtk::Label *label65 = Gtk::manage(new class Gtk::Label(_("General")));
+   Gtk::RadioButton::Group _RadioBGroup_directConnectionRadiobutton;
+   directConnectionRadiobutton = Gtk::manage(new class Gtk::RadioButton(_RadioBGroup_directConnectionRadiobutton, _("Direct connection to the Internet")));
+   proxyRadiobutton = Gtk::manage(new class Gtk::RadioButton(_RadioBGroup_directConnectionRadiobutton, _("Manual proxy configuration:")));
+   
+   Gtk::Label *proxyAddressLabel = Gtk::manage(new class Gtk::Label(_("Address:")));
+   proxyAddressEntry = Gtk::manage(new class Gtk::Entry());
+   
+   Gtk::Label *proxyTypeLabel = Gtk::manage(new class Gtk::Label(_("Type:")));
+   Gtk::Label *proxyPortLabel = Gtk::manage(new class Gtk::Label(_("Port:")));
+   Gtk::Adjustment *proxyPortSpinbutton_adj = Gtk::manage(new class Gtk::Adjustment(80, 1, 65535, 1, 10, 10));
+   proxyPortSpinbutton = Gtk::manage(new class Gtk::SpinButton(*proxyPortSpinbutton_adj, 1, 0));
+   proxyTypeCombobox = Gtk::manage(new class Gtk::ComboBoxText());
+   
+   Gtk::Table *table3 = Gtk::manage(new class Gtk::Table(2, 2, false));
+   Gtk::Table *table2 = Gtk::manage(new class Gtk::Table(2, 2, false));
+   Gtk::Label *label69 = Gtk::manage(new class Gtk::Label(_("Network")));
+   Gtk::Label *indexLabelsLabel = Gtk::manage(new class Gtk::Label(_("Labels are used to classify indexed documents:")));
+   labelsTreeview = Gtk::manage(new class Gtk::TreeView());
+   
+   Gtk::ScrolledWindow *scrolledwindow1 = Gtk::manage(new class Gtk::ScrolledWindow());
+   Gtk::Image *image725 = Gtk::manage(new class Gtk::Image(Gtk::StockID("gtk-add"), Gtk::IconSize(4)));
+   Gtk::Label *label71 = Gtk::manage(new class Gtk::Label(_("Add")));
+   Gtk::HBox *hbox58 = Gtk::manage(new class Gtk::HBox(false, 2));
+   Gtk::Alignment *alignment37 = Gtk::manage(new class Gtk::Alignment(0.5, 0.5, 0, 0));
+   addLabelButton = Gtk::manage(new class Gtk::Button());
+   
+   Gtk::Image *image726 = Gtk::manage(new class Gtk::Image(Gtk::StockID("gtk-remove"), Gtk::IconSize(4)));
+   Gtk::Label *label72 = Gtk::manage(new class Gtk::Label(_("Remove")));
+   Gtk::HBox *hbox59 = Gtk::manage(new class Gtk::HBox(false, 2));
+   Gtk::Alignment *alignment38 = Gtk::manage(new class Gtk::Alignment(0.5, 0.5, 0, 0));
+   removeLabelButton = Gtk::manage(new class Gtk::Button());
+   
+   Gtk::VButtonBox *vbuttonbox1 = Gtk::manage(new class Gtk::VButtonBox(Gtk::BUTTONBOX_START, 0));
+   Gtk::HBox *hbox57 = Gtk::manage(new class Gtk::HBox(false, 0));
+   Gtk::VBox *vbox2 = Gtk::manage(new class Gtk::VBox(false, 0));
+   Gtk::Label *label73 = Gtk::manage(new class Gtk::Label(_("Labels")));
+   Gtk::Label *directoriesLabel = Gtk::manage(new class Gtk::Label(_("These directories will be indexed and optionally monitored for changes:")));
+   directoriesTreeview = Gtk::manage(new class Gtk::TreeView());
+   
+   Gtk::ScrolledWindow *scrolledwindow2 = Gtk::manage(new class Gtk::ScrolledWindow());
+   Gtk::Image *image727 = Gtk::manage(new class Gtk::Image(Gtk::StockID("gtk-add"), Gtk::IconSize(4)));
+   Gtk::Label *label75 = Gtk::manage(new class Gtk::Label(_("Add")));
+   Gtk::HBox *hbox61 = Gtk::manage(new class Gtk::HBox(false, 2));
+   Gtk::Alignment *alignment39 = Gtk::manage(new class Gtk::Alignment(0.5, 0.5, 0, 0));
+   addDirectoryButton = Gtk::manage(new class Gtk::Button());
+   removeDirectoryButton = Gtk::manage(new class Gtk::Button(Gtk::StockID("gtk-remove")));
+   
+   Gtk::VButtonBox *vbuttonbox2 = Gtk::manage(new class Gtk::VButtonBox(Gtk::BUTTONBOX_START, 0));
+   Gtk::HBox *hbox60 = Gtk::manage(new class Gtk::HBox(false, 0));
+   Gtk::Label *label76 = Gtk::manage(new class Gtk::Label(_("File patterns:")));
+   patternsTreeview = Gtk::manage(new class Gtk::TreeView());
+   
+   Gtk::ScrolledWindow *scrolledwindow3 = Gtk::manage(new class Gtk::ScrolledWindow());
+   patternsCombobox = Gtk::manage(new class Gtk::ComboBoxText());
+   
+   Gtk::VBox *vbox4 = Gtk::manage(new class Gtk::VBox(false, 0));
+   Gtk::Image *image728 = Gtk::manage(new class Gtk::Image(Gtk::StockID("gtk-add"), Gtk::IconSize(4)));
+   Gtk::Label *label77 = Gtk::manage(new class Gtk::Label(_("Add")));
+   Gtk::HBox *hbox63 = Gtk::manage(new class Gtk::HBox(false, 2));
+   Gtk::Alignment *alignment40 = Gtk::manage(new class Gtk::Alignment(0.5, 0.5, 0, 0));
+   addPatternButton = Gtk::manage(new class Gtk::Button());
+   removePatternButton = Gtk::manage(new class Gtk::Button(Gtk::StockID("gtk-remove")));
+   resetPatternsButton = Gtk::manage(new class Gtk::Button(_("Reset")));
+   
+   Gtk::VButtonBox *vbuttonbox3 = Gtk::manage(new class Gtk::VButtonBox(Gtk::BUTTONBOX_START, 0));
+   Gtk::HBox *hbox62 = Gtk::manage(new class Gtk::HBox(false, 0));
+   Gtk::VBox *vbox3 = Gtk::manage(new class Gtk::VBox(false, 0));
+   Gtk::Label *label78 = Gtk::manage(new class Gtk::Label(_("Indexing")));
+   prefsNotebook = Gtk::manage(new class Gtk::Notebook());
+   
+   Gtk::VBox *vbox1 = Gtk::manage(new class Gtk::VBox(false, 0));
+   prefsCancelbutton->set_flags(Gtk::CAN_FOCUS);
+   prefsCancelbutton->set_flags(Gtk::CAN_DEFAULT);
+   prefsCancelbutton->set_border_width(4);
+   prefsCancelbutton->set_relief(Gtk::RELIEF_NORMAL);
+   prefsOkbutton->set_flags(Gtk::CAN_FOCUS);
+   prefsOkbutton->set_flags(Gtk::CAN_DEFAULT);
+   prefsOkbutton->set_border_width(4);
+   prefsOkbutton->set_relief(Gtk::RELIEF_NORMAL);
+   hbuttonbox1->property_layout_style().set_value(Gtk::BUTTONBOX_END);
+   hbuttonbox1->pack_start(*prefsCancelbutton);
+   hbuttonbox1->pack_start(*prefsOkbutton);
+   apiKeyLabel->set_alignment(0,0.5);
+   apiKeyLabel->set_padding(4,4);
+   apiKeyLabel->set_justify(Gtk::JUSTIFY_LEFT);
+   apiKeyLabel->set_line_wrap(false);
+   apiKeyLabel->set_use_markup(false);
+   apiKeyLabel->set_selectable(false);
+   apiKeyLabel->set_ellipsize(Pango::ELLIPSIZE_NONE);
+   apiKeyLabel->set_width_chars(-1);
+   apiKeyLabel->set_angle(0);
+   apiKeyLabel->set_single_line_mode(false);
+   apiKeyEntry->set_flags(Gtk::CAN_FOCUS);
+   apiKeyEntry->set_visibility(true);
+   apiKeyEntry->set_editable(true);
+   apiKeyEntry->set_max_length(0);
+   apiKeyEntry->set_text("");
+   apiKeyEntry->set_has_frame(true);
+   apiKeyEntry->set_activates_default(false);
+   queriesLabel->set_alignment(0,0.5);
+   queriesLabel->set_padding(4,4);
+   queriesLabel->set_justify(Gtk::JUSTIFY_LEFT);
+   queriesLabel->set_line_wrap(false);
+   queriesLabel->set_use_markup(false);
+   queriesLabel->set_selectable(false);
+   queriesLabel->set_ellipsize(Pango::ELLIPSIZE_NONE);
+   queriesLabel->set_width_chars(-1);
+   queriesLabel->set_angle(0);
+   queriesLabel->set_single_line_mode(false);
+   enableCompletionCheckbutton->set_flags(Gtk::CAN_FOCUS);
+   enableCompletionCheckbutton->set_relief(Gtk::RELIEF_NORMAL);
+   enableCompletionCheckbutton->set_mode(true);
+   enableCompletionCheckbutton->set_active(false);
+   newResultsColorbutton->set_flags(Gtk::CAN_FOCUS);
+   ignoreRobotsCheckbutton->set_flags(Gtk::CAN_FOCUS);
+   ignoreRobotsCheckbutton->set_relief(Gtk::RELIEF_NORMAL);
+   ignoreRobotsCheckbutton->set_mode(true);
+   ignoreRobotsCheckbutton->set_active(false);
+   robotsLabels->set_alignment(0,0.5);
+   robotsLabels->set_padding(4,4);
+   robotsLabels->set_justify(Gtk::JUSTIFY_LEFT);
+   robotsLabels->set_line_wrap(false);
+   robotsLabels->set_use_markup(false);
+   robotsLabels->set_selectable(false);
+   robotsLabels->set_ellipsize(Pango::ELLIPSIZE_NONE);
+   robotsLabels->set_width_chars(-1);
+   robotsLabels->set_angle(0);
+   robotsLabels->set_single_line_mode(false);
+   newResultsLabel->set_alignment(0,0.5);
+   newResultsLabel->set_padding(4,4);
+   newResultsLabel->set_justify(Gtk::JUSTIFY_LEFT);
+   newResultsLabel->set_line_wrap(false);
+   newResultsLabel->set_use_markup(false);
+   newResultsLabel->set_selectable(false);
+   newResultsLabel->set_ellipsize(Pango::ELLIPSIZE_NONE);
+   newResultsLabel->set_width_chars(-1);
+   newResultsLabel->set_angle(0);
+   newResultsLabel->set_single_line_mode(false);
+   generalTable->set_row_spacings(0);
+   generalTable->set_col_spacings(0);
+   generalTable->attach(*apiKeyLabel, 0, 1, 3, 4, Gtk::FILL, Gtk::FILL, 0, 0);
+   generalTable->attach(*apiKeyEntry, 1, 2, 3, 4, Gtk::EXPAND|Gtk::FILL, Gtk::FILL, 4, 4);
+   generalTable->attach(*queriesLabel, 0, 1, 2, 3, Gtk::FILL, Gtk::FILL, 0, 0);
+   generalTable->attach(*enableCompletionCheckbutton, 1, 2, 2, 3, Gtk::EXPAND|Gtk::FILL, Gtk::FILL, 4, 4);
+   generalTable->attach(*newResultsColorbutton, 1, 2, 1, 2, Gtk::EXPAND|Gtk::FILL, Gtk::FILL, 4, 4);
+   generalTable->attach(*ignoreRobotsCheckbutton, 1, 2, 0, 1, Gtk::EXPAND|Gtk::FILL, Gtk::FILL, 4, 4);
+   generalTable->attach(*robotsLabels, 0, 1, 0, 1, Gtk::FILL, Gtk::AttachOptions(), 0, 0);
+   generalTable->attach(*newResultsLabel, 0, 1, 1, 2, Gtk::FILL, Gtk::FILL, 0, 0);
+   label65->set_alignment(0.5,0.5);
+   label65->set_padding(0,0);
+   label65->set_justify(Gtk::JUSTIFY_LEFT);
+   label65->set_line_wrap(false);
+   label65->set_use_markup(false);
+   label65->set_selectable(false);
+   label65->set_ellipsize(Pango::ELLIPSIZE_NONE);
+   label65->set_width_chars(-1);
+   label65->set_angle(0);
+   label65->set_single_line_mode(false);
+   directConnectionRadiobutton->set_flags(Gtk::CAN_FOCUS);
+   directConnectionRadiobutton->set_relief(Gtk::RELIEF_NORMAL);
+   directConnectionRadiobutton->set_mode(true);
+   directConnectionRadiobutton->set_active(true);
+   proxyRadiobutton->set_flags(Gtk::CAN_FOCUS);
+   proxyRadiobutton->set_relief(Gtk::RELIEF_NORMAL);
+   proxyRadiobutton->set_mode(true);
+   proxyRadiobutton->set_active(false);
+   proxyAddressLabel->set_alignment(0,0.5);
+   proxyAddressLabel->set_padding(0,0);
+   proxyAddressLabel->set_justify(Gtk::JUSTIFY_LEFT);
+   proxyAddressLabel->set_line_wrap(false);
+   proxyAddressLabel->set_use_markup(false);
+   proxyAddressLabel->set_selectable(false);
+   proxyAddressLabel->set_ellipsize(Pango::ELLIPSIZE_NONE);
+   proxyAddressLabel->set_width_chars(-1);
+   proxyAddressLabel->set_angle(0);
+   proxyAddressLabel->set_single_line_mode(false);
+   proxyAddressEntry->set_flags(Gtk::CAN_FOCUS);
+   proxyAddressEntry->set_visibility(true);
+   proxyAddressEntry->set_editable(true);
+   proxyAddressEntry->set_max_length(0);
+   proxyAddressEntry->set_text("");
+   proxyAddressEntry->set_has_frame(true);
+   proxyAddressEntry->set_activates_default(false);
+   proxyTypeLabel->set_alignment(0,0.5);
+   proxyTypeLabel->set_padding(0,0);
+   proxyTypeLabel->set_justify(Gtk::JUSTIFY_LEFT);
+   proxyTypeLabel->set_line_wrap(false);
+   proxyTypeLabel->set_use_markup(false);
+   proxyTypeLabel->set_selectable(false);
+   proxyTypeLabel->set_ellipsize(Pango::ELLIPSIZE_NONE);
+   proxyTypeLabel->set_width_chars(-1);
+   proxyTypeLabel->set_angle(0);
+   proxyTypeLabel->set_single_line_mode(false);
+   proxyPortLabel->set_alignment(0,0.5);
+   proxyPortLabel->set_padding(0,0);
+   proxyPortLabel->set_justify(Gtk::JUSTIFY_LEFT);
+   proxyPortLabel->set_line_wrap(false);
+   proxyPortLabel->set_use_markup(false);
+   proxyPortLabel->set_selectable(false);
+   proxyPortLabel->set_ellipsize(Pango::ELLIPSIZE_NONE);
+   proxyPortLabel->set_width_chars(-1);
+   proxyPortLabel->set_angle(0);
+   proxyPortLabel->set_single_line_mode(false);
+   proxyPortSpinbutton->set_flags(Gtk::CAN_FOCUS);
+   proxyPortSpinbutton->set_update_policy(Gtk::UPDATE_ALWAYS);
+   proxyPortSpinbutton->set_numeric(false);
+   proxyPortSpinbutton->set_digits(0);
+   proxyPortSpinbutton->set_wrap(false);
+   table3->set_row_spacings(0);
+   table3->set_col_spacings(0);
+   table3->attach(*proxyAddressLabel, 0, 1, 1, 2, Gtk::FILL, Gtk::FILL, 4, 4);
+   table3->attach(*proxyAddressEntry, 1, 2, 1, 2, Gtk::EXPAND|Gtk::FILL, Gtk::FILL, 4, 4);
+   table3->attach(*proxyTypeLabel, 0, 1, 0, 1, Gtk::FILL, Gtk::FILL, 4, 4);
+   table3->attach(*proxyPortLabel, 0, 1, 2, 3, Gtk::FILL, Gtk::FILL, 4, 4);
+   table3->attach(*proxyPortSpinbutton, 1, 2, 2, 3, Gtk::EXPAND|Gtk::FILL, Gtk::AttachOptions(), 4, 4);
+   table3->attach(*proxyTypeCombobox, 1, 2, 0, 1, Gtk::EXPAND|Gtk::FILL, Gtk::AttachOptions(), 4, 4);
+   table2->set_row_spacings(0);
+   table2->set_col_spacings(0);
+   table2->attach(*directConnectionRadiobutton, 0, 1, 0, 1, Gtk::EXPAND|Gtk::FILL, Gtk::FILL, 4, 4);
+   table2->attach(*proxyRadiobutton, 0, 1, 1, 2, Gtk::EXPAND|Gtk::FILL, Gtk::FILL, 4, 4);
+   table2->attach(*table3, 0, 1, 2, 3, Gtk::FILL, Gtk::EXPAND|Gtk::FILL, 0, 0);
+   label69->set_alignment(0.5,0.5);
+   label69->set_padding(0,0);
+   label69->set_justify(Gtk::JUSTIFY_LEFT);
+   label69->set_line_wrap(false);
+   label69->set_use_markup(false);
+   label69->set_selectable(false);
+   label69->set_ellipsize(Pango::ELLIPSIZE_NONE);
+   label69->set_width_chars(-1);
+   label69->set_angle(0);
+   label69->set_single_line_mode(false);
+   indexLabelsLabel->set_alignment(0,0.5);
+   indexLabelsLabel->set_padding(4,4);
+   indexLabelsLabel->set_justify(Gtk::JUSTIFY_LEFT);
+   indexLabelsLabel->set_line_wrap(true);
+   indexLabelsLabel->set_use_markup(false);
+   indexLabelsLabel->set_selectable(false);
+   indexLabelsLabel->set_ellipsize(Pango::ELLIPSIZE_NONE);
+   indexLabelsLabel->set_width_chars(-1);
+   indexLabelsLabel->set_angle(0);
+   indexLabelsLabel->set_single_line_mode(false);
+   labelsTreeview->set_flags(Gtk::CAN_FOCUS);
+   labelsTreeview->set_headers_visible(true);
+   labelsTreeview->set_rules_hint(false);
+   labelsTreeview->set_reorderable(false);
+   labelsTreeview->set_enable_search(true);
+   scrolledwindow1->set_flags(Gtk::CAN_FOCUS);
+   scrolledwindow1->set_border_width(4);
+   scrolledwindow1->set_shadow_type(Gtk::SHADOW_NONE);
+   scrolledwindow1->set_policy(Gtk::POLICY_AUTOMATIC, Gtk::POLICY_AUTOMATIC);
+   scrolledwindow1->property_window_placement().set_value(Gtk::CORNER_TOP_LEFT);
+   scrolledwindow1->add(*labelsTreeview);
+   image725->set_alignment(0.5,0.5);
+   image725->set_padding(0,0);
+   label71->set_alignment(0.5,0.5);
+   label71->set_padding(0,0);
+   label71->set_justify(Gtk::JUSTIFY_LEFT);
+   label71->set_line_wrap(false);
+   label71->set_use_markup(false);
+   label71->set_selectable(false);
+   label71->set_ellipsize(Pango::ELLIPSIZE_NONE);
+   label71->set_width_chars(-1);
+   label71->set_angle(0);
+   label71->set_single_line_mode(false);
+   hbox58->pack_start(*image725, Gtk::PACK_SHRINK, 0);
+   hbox58->pack_start(*label71, Gtk::PACK_SHRINK, 0);
+   alignment37->add(*hbox58);
+   addLabelButton->set_flags(Gtk::CAN_FOCUS);
+   addLabelButton->set_flags(Gtk::CAN_DEFAULT);
+   addLabelButton->set_border_width(4);
+   addLabelButton->set_relief(Gtk::RELIEF_NORMAL);
+   addLabelButton->add(*alignment37);
+   image726->set_alignment(0.5,0.5);
+   image726->set_padding(0,0);
+   label72->set_alignment(0.5,0.5);
+   label72->set_padding(0,0);
+   label72->set_justify(Gtk::JUSTIFY_LEFT);
+   label72->set_line_wrap(false);
+   label72->set_use_markup(false);
+   label72->set_selectable(false);
+   label72->set_ellipsize(Pango::ELLIPSIZE_NONE);
+   label72->set_width_chars(-1);
+   label72->set_angle(0);
+   label72->set_single_line_mode(false);
+   hbox59->pack_start(*image726, Gtk::PACK_SHRINK, 0);
+   hbox59->pack_start(*label72, Gtk::PACK_SHRINK, 0);
+   alignment38->add(*hbox59);
+   removeLabelButton->set_flags(Gtk::CAN_FOCUS);
+   removeLabelButton->set_flags(Gtk::CAN_DEFAULT);
+   removeLabelButton->set_border_width(4);
+   removeLabelButton->set_relief(Gtk::RELIEF_NORMAL);
+   removeLabelButton->add(*alignment38);
+   vbuttonbox1->pack_start(*addLabelButton);
+   vbuttonbox1->pack_start(*removeLabelButton);
+   hbox57->pack_start(*scrolledwindow1);
+   hbox57->pack_start(*vbuttonbox1, Gtk::PACK_SHRINK, 0);
+   vbox2->pack_start(*indexLabelsLabel, Gtk::PACK_SHRINK, 4);
+   vbox2->pack_start(*hbox57, Gtk::PACK_EXPAND_WIDGET, 4);
+   label73->set_alignment(0.5,0.5);
+   label73->set_padding(0,0);
+   label73->set_justify(Gtk::JUSTIFY_LEFT);
+   label73->set_line_wrap(false);
+   label73->set_use_markup(false);
+   label73->set_selectable(false);
+   label73->set_ellipsize(Pango::ELLIPSIZE_NONE);
+   label73->set_width_chars(-1);
+   label73->set_angle(0);
+   label73->set_single_line_mode(false);
+   directoriesLabel->set_alignment(0,0.5);
+   directoriesLabel->set_padding(4,4);
+   directoriesLabel->set_justify(Gtk::JUSTIFY_LEFT);
+   directoriesLabel->set_line_wrap(true);
+   directoriesLabel->set_use_markup(false);
+   directoriesLabel->set_selectable(false);
+   directoriesLabel->set_ellipsize(Pango::ELLIPSIZE_NONE);
+   directoriesLabel->set_width_chars(-1);
+   directoriesLabel->set_angle(0);
+   directoriesLabel->set_single_line_mode(false);
+   directoriesTreeview->set_flags(Gtk::CAN_FOCUS);
+   directoriesTreeview->set_headers_visible(true);
+   directoriesTreeview->set_rules_hint(false);
+   directoriesTreeview->set_reorderable(false);
+   directoriesTreeview->set_enable_search(true);
+   scrolledwindow2->set_flags(Gtk::CAN_FOCUS);
+   scrolledwindow2->set_border_width(4);
+   scrolledwindow2->set_shadow_type(Gtk::SHADOW_NONE);
+   scrolledwindow2->set_policy(Gtk::POLICY_AUTOMATIC, Gtk::POLICY_AUTOMATIC);
+   scrolledwindow2->property_window_placement().set_value(Gtk::CORNER_TOP_LEFT);
+   scrolledwindow2->add(*directoriesTreeview);
+   image727->set_alignment(0.5,0.5);
+   image727->set_padding(0,0);
+   label75->set_alignment(0.5,0.5);
+   label75->set_padding(0,0);
+   label75->set_justify(Gtk::JUSTIFY_LEFT);
+   label75->set_line_wrap(false);
+   label75->set_use_markup(false);
+   label75->set_selectable(false);
+   label75->set_ellipsize(Pango::ELLIPSIZE_NONE);
+   label75->set_width_chars(-1);
+   label75->set_angle(0);
+   label75->set_single_line_mode(false);
+   hbox61->pack_start(*image727, Gtk::PACK_SHRINK, 0);
+   hbox61->pack_start(*label75, Gtk::PACK_SHRINK, 0);
+   alignment39->add(*hbox61);
+   addDirectoryButton->set_flags(Gtk::CAN_FOCUS);
+   addDirectoryButton->set_flags(Gtk::CAN_DEFAULT);
+   addDirectoryButton->set_border_width(4);
+   addDirectoryButton->set_relief(Gtk::RELIEF_NORMAL);
+   addDirectoryButton->add(*alignment39);
+   removeDirectoryButton->set_flags(Gtk::CAN_FOCUS);
+   removeDirectoryButton->set_flags(Gtk::CAN_DEFAULT);
+   removeDirectoryButton->set_border_width(4);
+   removeDirectoryButton->set_relief(Gtk::RELIEF_NORMAL);
+   vbuttonbox2->pack_start(*addDirectoryButton);
+   vbuttonbox2->pack_start(*removeDirectoryButton);
+   hbox60->pack_start(*scrolledwindow2);
+   hbox60->pack_start(*vbuttonbox2, Gtk::PACK_SHRINK, 0);
+   label76->set_alignment(0,0.5);
+   label76->set_padding(4,4);
+   label76->set_justify(Gtk::JUSTIFY_LEFT);
+   label76->set_line_wrap(true);
+   label76->set_use_markup(false);
+   label76->set_selectable(false);
+   label76->set_ellipsize(Pango::ELLIPSIZE_NONE);
+   label76->set_width_chars(-1);
+   label76->set_angle(0);
+   label76->set_single_line_mode(false);
+   patternsTreeview->set_flags(Gtk::CAN_FOCUS);
+   patternsTreeview->set_headers_visible(true);
+   patternsTreeview->set_rules_hint(false);
+   patternsTreeview->set_reorderable(false);
+   patternsTreeview->set_enable_search(true);
+   scrolledwindow3->set_flags(Gtk::CAN_FOCUS);
+   scrolledwindow3->set_border_width(4);
+   scrolledwindow3->set_shadow_type(Gtk::SHADOW_NONE);
+   scrolledwindow3->set_policy(Gtk::POLICY_AUTOMATIC, Gtk::POLICY_AUTOMATIC);
+   scrolledwindow3->property_window_placement().set_value(Gtk::CORNER_TOP_LEFT);
+   scrolledwindow3->add(*patternsTreeview);
+   vbox4->pack_start(*scrolledwindow3);
+   vbox4->pack_start(*patternsCombobox, Gtk::PACK_SHRINK, 4);
+   image728->set_alignment(0.5,0.5);
+   image728->set_padding(0,0);
+   label77->set_alignment(0.5,0.5);
+   label77->set_padding(0,0);
+   label77->set_justify(Gtk::JUSTIFY_LEFT);
+   label77->set_line_wrap(false);
+   label77->set_use_markup(false);
+   label77->set_selectable(false);
+   label77->set_ellipsize(Pango::ELLIPSIZE_NONE);
+   label77->set_width_chars(-1);
+   label77->set_angle(0);
+   label77->set_single_line_mode(false);
+   hbox63->pack_start(*image728, Gtk::PACK_SHRINK, 0);
+   hbox63->pack_start(*label77, Gtk::PACK_SHRINK, 0);
+   alignment40->add(*hbox63);
+   addPatternButton->set_flags(Gtk::CAN_FOCUS);
+   addPatternButton->set_flags(Gtk::CAN_DEFAULT);
+   addPatternButton->set_border_width(4);
+   addPatternButton->set_relief(Gtk::RELIEF_NORMAL);
+   addPatternButton->add(*alignment40);
+   removePatternButton->set_flags(Gtk::CAN_FOCUS);
+   removePatternButton->set_flags(Gtk::CAN_DEFAULT);
+   removePatternButton->set_border_width(4);
+   removePatternButton->set_relief(Gtk::RELIEF_NORMAL);
+   resetPatternsButton->set_flags(Gtk::CAN_FOCUS);
+   resetPatternsButton->set_flags(Gtk::CAN_DEFAULT);
+   resetPatternsButton->set_border_width(4);
+   resetPatternsButton->set_relief(Gtk::RELIEF_NORMAL);
+   vbuttonbox3->pack_start(*addPatternButton);
+   vbuttonbox3->pack_start(*removePatternButton);
+   vbuttonbox3->pack_start(*resetPatternsButton);
+   hbox62->pack_start(*vbox4);
+   hbox62->pack_start(*vbuttonbox3, Gtk::PACK_SHRINK, 0);
+   vbox3->pack_start(*directoriesLabel, Gtk::PACK_SHRINK, 4);
+   vbox3->pack_start(*hbox60, Gtk::PACK_EXPAND_WIDGET, 4);
+   vbox3->pack_start(*label76, Gtk::PACK_SHRINK, 4);
+   vbox3->pack_start(*hbox62, Gtk::PACK_EXPAND_WIDGET, 4);
+   label78->set_alignment(0.5,0.5);
+   label78->set_padding(0,0);
+   label78->set_justify(Gtk::JUSTIFY_LEFT);
+   label78->set_line_wrap(false);
+   label78->set_use_markup(false);
+   label78->set_selectable(false);
+   label78->set_ellipsize(Pango::ELLIPSIZE_NONE);
+   label78->set_width_chars(-1);
+   label78->set_angle(0);
+   label78->set_single_line_mode(false);
+   prefsNotebook->set_flags(Gtk::CAN_FOCUS);
+   prefsNotebook->set_show_tabs(true);
+   prefsNotebook->set_show_border(true);
+   prefsNotebook->set_tab_pos(Gtk::POS_TOP);
+   prefsNotebook->set_scrollable(false);
+   prefsNotebook->append_page(*generalTable, *label65);
+   prefsNotebook->pages().back().set_tab_label_packing(false, true, Gtk::PACK_START);
+   prefsNotebook->append_page(*table2, *label69);
+   prefsNotebook->pages().back().set_tab_label_packing(false, true, Gtk::PACK_START);
+   prefsNotebook->append_page(*vbox2, *label73);
+   prefsNotebook->pages().back().set_tab_label_packing(false, true, Gtk::PACK_START);
+   prefsNotebook->append_page(*vbox3, *label78);
+   prefsNotebook->pages().back().set_tab_label_packing(false, true, Gtk::PACK_START);
+   vbox1->set_border_width(4);
+   vbox1->pack_start(*prefsNotebook);
+   vbox1->pack_start(*hbuttonbox1, Gtk::PACK_SHRINK, 0);
+   prefsWindow->set_title(_("Pinot Preferences"));
+   prefsWindow->set_modal(false);
+   prefsWindow->property_window_position().set_value(Gtk::WIN_POS_CENTER);
+   prefsWindow->set_resizable(true);
+   prefsWindow->property_destroy_with_parent().set_value(false);
+   prefsWindow->add(*vbox1);
+   prefsCancelbutton->show();
+   prefsOkbutton->show();
+   hbuttonbox1->show();
+   apiKeyLabel->show();
+   apiKeyEntry->show();
+   queriesLabel->show();
+   enableCompletionCheckbutton->show();
+   newResultsColorbutton->show();
+   ignoreRobotsCheckbutton->show();
+   robotsLabels->show();
+   newResultsLabel->show();
+   generalTable->show();
+   label65->show();
+   directConnectionRadiobutton->show();
+   proxyRadiobutton->show();
+   proxyAddressLabel->show();
+   proxyAddressEntry->show();
+   proxyTypeLabel->show();
+   proxyPortLabel->show();
+   proxyPortSpinbutton->show();
+   proxyTypeCombobox->show();
+   table3->show();
+   table2->show();
+   label69->show();
+   indexLabelsLabel->show();
+   labelsTreeview->show();
+   scrolledwindow1->show();
+   image725->show();
+   label71->show();
+   hbox58->show();
+   alignment37->show();
+   addLabelButton->show();
+   image726->show();
+   label72->show();
+   hbox59->show();
+   alignment38->show();
+   removeLabelButton->show();
+   vbuttonbox1->show();
+   hbox57->show();
+   vbox2->show();
+   label73->show();
+   directoriesLabel->show();
+   directoriesTreeview->show();
+   scrolledwindow2->show();
+   image727->show();
+   label75->show();
+   hbox61->show();
+   alignment39->show();
+   addDirectoryButton->show();
+   removeDirectoryButton->show();
+   vbuttonbox2->show();
+   hbox60->show();
+   label76->show();
+   patternsTreeview->show();
+   scrolledwindow3->show();
+   patternsCombobox->show();
+   vbox4->show();
+   image728->show();
+   label77->show();
+   hbox63->show();
+   alignment40->show();
+   addPatternButton->show();
+   removePatternButton->show();
+   resetPatternsButton->show();
+   vbuttonbox3->show();
+   hbox62->show();
+   vbox3->show();
+   label78->show();
+   prefsNotebook->show();
+   vbox1->show();
+   prefsWindow->show();
+   prefsCancelbutton->signal_clicked().connect(sigc::mem_fun(*this, &prefsWindow_glade::on_prefsCancelbutton_clicked), false);
+   prefsOkbutton->signal_clicked().connect(sigc::mem_fun(*this, &prefsWindow_glade::on_prefsOkbutton_clicked), false);
+   directConnectionRadiobutton->signal_toggled().connect(sigc::mem_fun(*this, &prefsWindow_glade::on_directConnectionRadiobutton_toggled), false);
+   addLabelButton->signal_clicked().connect(sigc::mem_fun(*this, &prefsWindow_glade::on_addLabelButton_clicked), false);
+   removeLabelButton->signal_clicked().connect(sigc::mem_fun(*this, &prefsWindow_glade::on_removeLabelButton_clicked), false);
+   addDirectoryButton->signal_clicked().connect(sigc::mem_fun(*this, &prefsWindow_glade::on_addDirectoryButton_clicked), false);
+   removeDirectoryButton->signal_clicked().connect(sigc::mem_fun(*this, &prefsWindow_glade::on_removeDirectoryButton_clicked), false);
+   patternsCombobox->signal_changed().connect(sigc::mem_fun(*this, &prefsWindow_glade::on_patternsCombobox_changed), false);
+   addPatternButton->signal_clicked().connect(sigc::mem_fun(*this, &prefsWindow_glade::on_addPatternButton_clicked), false);
+   removePatternButton->signal_clicked().connect(sigc::mem_fun(*this, &prefsWindow_glade::on_removePatternButton_clicked), false);
+   resetPatternsButton->signal_clicked().connect(sigc::mem_fun(*this, &prefsWindow_glade::on_resetPatternsButton_clicked), false);
+   prefsWindow->signal_delete_event().connect(sigc::mem_fun(*this, &prefsWindow_glade::on_prefsWindow_delete_event), false);
+}
+
+prefsWindow_glade::~prefsWindow_glade()
+{  delete gmm_data;
+}

Added: trunk/UI/GTK2/src/prefsWindow_glade.hh
===================================================================
--- trunk/UI/GTK2/src/prefsWindow_glade.hh	2008-11-16 14:12:42 UTC (rev 1413)
+++ trunk/UI/GTK2/src/prefsWindow_glade.hh	2008-11-19 13:24:34 UTC (rev 1414)
@@ -0,0 +1,95 @@
+// generated 2008/11/18 23:24:22 SGT by fabrice at rexor.dyndns.org.(none)
+// using glademm V2.12.1
+//
+// DO NOT EDIT THIS FILE ! It was created using
+// glade-- /home/fabrice/Projects/MetaSE/pinot/UI/GTK2/metase-gtk2.glade
+// for gtk 2.12.12 and gtkmm 2.12.7
+//
+// Please modify the corresponding derived classes in ./src/prefsWindow.hh and./src/prefsWindow.cc
+
+#ifndef _PREFSWINDOW_GLADE_HH
+#  define _PREFSWINDOW_GLADE_HH
+
+
+#if !defined(GLADEMM_DATA)
+#define GLADEMM_DATA 
+#include <gtkmm/accelgroup.h>
+
+class GlademmData
+{  
+        
+        Glib::RefPtr<Gtk::AccelGroup> accgrp;
+public:
+        
+        GlademmData(Glib::RefPtr<Gtk::AccelGroup> ag) : accgrp(ag)
+        {  
+        }
+        
+        Glib::RefPtr<Gtk::AccelGroup>  getAccelGroup()
+        {  return accgrp;
+        }
+};
+#endif //GLADEMM_DATA
+
+#include <gtkmm/window.h>
+#include <gtkmm/button.h>
+#include <gtkmm/label.h>
+#include <gtkmm/entry.h>
+#include <gtkmm/colorbutton.h>
+#include <gtkmm/table.h>
+#include <gtkmm/radiobutton.h>
+#include <gtkmm/spinbutton.h>
+#include <gtkmm/comboboxtext.h>
+#include <gtkmm/treeview.h>
+#include <gtkmm/notebook.h>
+
+class prefsWindow_glade : public Gtk::Window
+{  
+        
+        GlademmData *gmm_data;
+protected:
+        class Gtk::Button * prefsCancelbutton;
+        class Gtk::Button * prefsOkbutton;
+        class Gtk::Label * apiKeyLabel;
+        class Gtk::Entry * apiKeyEntry;
+        class Gtk::CheckButton * enableCompletionCheckbutton;
+        class Gtk::ColorButton * newResultsColorbutton;
+        class Gtk::CheckButton * ignoreRobotsCheckbutton;
+        class Gtk::Label * robotsLabels;
+        class Gtk::Table * generalTable;
+        class Gtk::RadioButton * directConnectionRadiobutton;
+        class Gtk::RadioButton * proxyRadiobutton;
+        class Gtk::Entry * proxyAddressEntry;
+        class Gtk::SpinButton * proxyPortSpinbutton;
+        class Gtk::ComboBoxText * proxyTypeCombobox;
+        class Gtk::TreeView * labelsTreeview;
+        class Gtk::Button * addLabelButton;
+        class Gtk::Button * removeLabelButton;
+        class Gtk::TreeView * directoriesTreeview;
+        class Gtk::Button * addDirectoryButton;
+        class Gtk::Button * removeDirectoryButton;
+        class Gtk::TreeView * patternsTreeview;
+        class Gtk::ComboBoxText * patternsCombobox;
+        class Gtk::Button * addPatternButton;
+        class Gtk::Button * removePatternButton;
+        class Gtk::Button * resetPatternsButton;
+        class Gtk::Notebook * prefsNotebook;
+        
+        prefsWindow_glade();
+        
+        ~prefsWindow_glade();
+private:
+        virtual void on_prefsCancelbutton_clicked() = 0;
+        virtual void on_prefsOkbutton_clicked() = 0;
+        virtual void on_directConnectionRadiobutton_toggled() = 0;
+        virtual void on_addLabelButton_clicked() = 0;
+        virtual void on_removeLabelButton_clicked() = 0;
+        virtual void on_addDirectoryButton_clicked() = 0;
+        virtual void on_removeDirectoryButton_clicked() = 0;
+        virtual void on_patternsCombobox_changed() = 0;
+        virtual void on_addPatternButton_clicked() = 0;
+        virtual void on_removePatternButton_clicked() = 0;
+        virtual void on_resetPatternsButton_clicked() = 0;
+        virtual bool on_prefsWindow_delete_event(GdkEventAny *ev) = 0;
+};
+#endif



From fabricecolin at mail.berlios.de  Wed Nov 19 14:56:05 2008
From: fabricecolin at mail.berlios.de (fabricecolin at mail.berlios.de)
Date: Wed, 19 Nov 2008 14:56:05 +0100
Subject: [Pinot-svn] r1415 - trunk/UI/GTK2/src
Message-ID: <200811191356.mAJDu5ED013745@sheep.berlios.de>

Author: fabricecolin
Date: 2008-11-19 14:55:52 +0100 (Wed, 19 Nov 2008)
New Revision: 1415

Modified:
   trunk/UI/GTK2/src/Makefile.am
   trunk/UI/GTK2/src/WorkerThreads.cpp
   trunk/UI/GTK2/src/WorkerThreads.h
   trunk/UI/GTK2/src/mainWindow.cc
   trunk/UI/GTK2/src/mainWindow.hh
   trunk/UI/GTK2/src/pinot.cc
Log:
Replaced prefsDialog with prefsWindow.
Using the new option -p/--preferences, or starting the program as pinot-prefs,
makes the UI open prefsWindow and exit.
When the Session, Preferences menu is selected, pinot runs pinot-prefs.


Modified: trunk/UI/GTK2/src/Makefile.am
===================================================================
--- trunk/UI/GTK2/src/Makefile.am	2008-11-19 13:24:34 UTC (rev 1414)
+++ trunk/UI/GTK2/src/Makefile.am	2008-11-19 13:55:52 UTC (rev 1415)
@@ -9,8 +9,8 @@
 	launcherDialog_glade.hh \
 	mainWindow_glade.hh \
 	mainWindow.hh \
-	prefsDialog_glade.hh \
-	prefsDialog.hh \
+	prefsWindow_glade.hh \
+	prefsWindow.hh \
 	propertiesDialog_glade.hh \
 	propertiesDialog.hh \
 	queryDialog_glade.hh \
@@ -40,8 +40,8 @@
 	launcherDialog_glade.cc \
 	mainWindow_glade.cc \
 	mainWindow.cc \
-	prefsDialog_glade.cc \
-	prefsDialog.cc \
+	prefsWindow_glade.cc \
+	prefsWindow.cc \
 	propertiesDialog_glade.cc \
 	propertiesDialog.cc \
 	queryDialog_glade.cc \

Modified: trunk/UI/GTK2/src/WorkerThreads.cpp
===================================================================
--- trunk/UI/GTK2/src/WorkerThreads.cpp	2008-11-19 13:24:34 UTC (rev 1414)
+++ trunk/UI/GTK2/src/WorkerThreads.cpp	2008-11-19 13:55:52 UTC (rev 1415)
@@ -47,7 +47,6 @@
 #include "QueryHistory.h"
 #include "DownloaderFactory.h"
 #include "FilterWrapper.h"
-#include "DBusIndex.h"
 #include "ModuleFactory.h"
 #include "WebEngine.h"
 #include "PinotSettings.h"
@@ -1971,27 +1970,6 @@
 	}
 }
 
-StartDaemonThread::StartDaemonThread() :
-	WorkerThread()
-{
-}
-
-StartDaemonThread::~StartDaemonThread()
-{
-}
-
-string StartDaemonThread::getType(void) const
-{
-	return "StartDaemonThread";
-}
-
-void StartDaemonThread::doWork(void)
-{
-	// Ask the daemon to reload its configuration
-	// Let D-Bus activate the service if necessary
-	DBusIndex::reload();
-}
-
 MonitorThread::MonitorThread(MonitorInterface *pMonitor, MonitorHandler *pHandler,
 	bool checkHistory) :
 	WorkerThread(),

Modified: trunk/UI/GTK2/src/WorkerThreads.h
===================================================================
--- trunk/UI/GTK2/src/WorkerThreads.h	2008-11-19 13:24:34 UTC (rev 1414)
+++ trunk/UI/GTK2/src/WorkerThreads.h	2008-11-19 13:55:52 UTC (rev 1415)
@@ -473,24 +473,6 @@
 
 };
 
-class StartDaemonThread : public WorkerThread
-{
-	public:
-		// Start the daemon
-		StartDaemonThread();
-		virtual ~StartDaemonThread();
-
-		virtual std::string getType(void) const;
-
-	protected:
-		virtual void doWork(void);
-
-	private:
-		StartDaemonThread(const StartDaemonThread &other);
-		StartDaemonThread &operator=(const StartDaemonThread &other);
-
-};
-
 class MonitorThread : public WorkerThread
 {
 	public:

Modified: trunk/UI/GTK2/src/mainWindow.cc
===================================================================
--- trunk/UI/GTK2/src/mainWindow.cc	2008-11-19 13:24:34 UTC (rev 1414)
+++ trunk/UI/GTK2/src/mainWindow.cc	2008-11-19 13:55:52 UTC (rev 1415)
@@ -53,7 +53,6 @@
 #include "indexDialog.hh"
 #include "launcherDialog.hh"
 #include "propertiesDialog.hh"
-#include "prefsDialog.hh"
 #include "queryDialog.hh"
 #include "statisticsDialog.hh"
 
@@ -1722,12 +1721,6 @@
 			}
 		}
 	}
-	else if (type == "StartDaemonThread")
-	{
-#ifdef DEBUG
-		cout << "mainWindow::on_thread_end: started daemon" << endl;
-#endif
-	}
 
 	// Delete the thread
 	delete pThread;;
@@ -1827,30 +1820,10 @@
 //
 void mainWindow::on_configure_activate()
 {
-	prefsDialog prefsBox;
-	prefsBox.show();
-	if (prefsBox.run() != RESPONSE_OK)
-	{
-		return;
-	}
-#ifdef DEBUG
-	cout << "mainWindow::on_configure_activate: settings changed" << endl;
-#endif
+	MIMEAction prefsAction("pinot-prefs", "pinot-prefs");
+	vector<string> arguments;
 
-	// Is starting the daemon necessary ?
-	if (prefsBox.startDaemon() == true)
-	{
-		start_thread(new StartDaemonThread());
-	}
-
-	// Any labels to add, delete or rename ?
-	const set<string> &labelsToAdd = prefsBox.getLabelsToAdd();
-	const set<string> &labelsToDelete = prefsBox.getLabelsToDelete();
-	if ((labelsToAdd.empty() == false) ||
-		(labelsToDelete.empty() == false))
-	{
-		start_thread(new LabelUpdateThread(labelsToAdd, labelsToDelete));
-	}
+	CommandLine::runAsync(prefsAction, arguments);
 }
 
 //

Modified: trunk/UI/GTK2/src/mainWindow.hh
===================================================================
--- trunk/UI/GTK2/src/mainWindow.hh	2008-11-19 13:24:34 UTC (rev 1414)
+++ trunk/UI/GTK2/src/mainWindow.hh	2008-11-19 13:55:52 UTC (rev 1415)
@@ -1,5 +1,5 @@
 /*
- *  Copyright 2005,2006 Fabrice Colin
+ *  Copyright 2005-2008 Fabrice Colin
  *
  *  This program is free software; you can redistribute it and/or modify
  *  it under the terms of the GNU General Public License as published by

Modified: trunk/UI/GTK2/src/pinot.cc
===================================================================
--- trunk/UI/GTK2/src/pinot.cc	2008-11-19 13:24:34 UTC (rev 1414)
+++ trunk/UI/GTK2/src/pinot.cc	2008-11-19 13:55:52 UTC (rev 1415)
@@ -1,5 +1,5 @@
 /*
- *  Copyright 2005,2006 Fabrice Colin
+ *  Copyright 2005-2008 Fabrice Colin
  *
  *  This program is free software; you can redistribute it and/or modify
  *  it under the terms of the GNU General Public License as published by
@@ -52,6 +52,7 @@
 #include "DownloaderInterface.h"
 #include "PinotSettings.h"
 #include "mainWindow.hh"
+#include "prefsWindow.hh"
 
 using namespace std;
 
@@ -60,6 +61,7 @@
 static streambuf *g_cerrBuf = NULL;
 static struct option g_longOptions[] = {
 	{"help", 0, 0, 'h'},
+	{"preferences", 0, 0, 'p'},
 	{"version", 0, 0, 'v'},
 	{0, 0, 0, 0}
 };
@@ -108,10 +110,10 @@
 	Glib::ustring errorMsg;
 	struct sigaction newAction;
 	int longOptionIndex = 0;
-	bool warnAboutVersion = false;
+	bool warnAboutVersion = false, prefsMode = false;
 
 	// Look at the options
-	int optionChar = getopt_long(argc, argv, "hv", g_longOptions, &longOptionIndex);
+	int optionChar = getopt_long(argc, argv, "hpv", g_longOptions, &longOptionIndex);
 	while (optionChar != -1)
 	{
 		switch (optionChar)
@@ -122,9 +124,13 @@
 					<< "Usage: pinot [OPTIONS]\n\n"
 					<< "Options:\n"
 					<< "  -h, --help		display this help and exit\n"
+					<< "  -p, --preferences		show preferences and exit\n"
 					<< "  -v, --version		output version information and exit\n"
 					<< "\nReport bugs to " << PACKAGE_BUGREPORT << endl;
 				return EXIT_SUCCESS;
+			case 'p':
+				prefsMode = true;
+				break;
 			case 'v':
 				cout << "pinot - " << PACKAGE_STRING << "\n\n" 
 					<< "This is free software.  You may redistribute copies of it under the terms of\n"
@@ -136,9 +142,16 @@
 		}
 
 		// Next option
-		optionChar = getopt_long(argc, argv, "hv", g_longOptions, &longOptionIndex);
+		optionChar = getopt_long(argc, argv, "hpv", g_longOptions, &longOptionIndex);
 	}
 
+	string programName(argv[0]);
+	if ((programName.length() >= 11) &&
+		(programName.substr(programName.length() - 11) == "pinot-prefs"))
+	{
+		prefsMode = true;
+	}
+
 #if defined(ENABLE_NLS)
 	bindtextdomain(GETTEXT_PACKAGE, PACKAGE_LOCALE_DIR);
 	bind_textdomain_codeset(GETTEXT_PACKAGE, "UTF-8");
@@ -158,7 +171,14 @@
 	dbus_g_thread_init();
 
 	Gtk::Main m(&argc, &argv);
-	Glib::set_application_name("Pinot GTK2 UI");
+	if (prefsMode == false)
+	{
+		Glib::set_application_name("Pinot GTK2 UI");
+	}
+	else
+	{
+		Glib::set_application_name("Pinot Preferences");
+	}
 
 	// This should make Xapian use Flint rather than Quartz
 	Glib::setenv("XAPIAN_PREFER_FLINT", "1");
@@ -265,9 +285,9 @@
 	sigaction(SIGQUIT, &newAction, NULL);
 	sigaction(SIGTERM, &newAction, NULL);
 
-	// Open this index read-write
+	// Open this index read-write, unless we are in preferences mode
 	bool wasObsoleteFormat = false;
-	if (ModuleFactory::openOrCreateIndex(settings.m_defaultBackend, settings.m_docsIndexLocation, wasObsoleteFormat, false) == false)
+	if (ModuleFactory::openOrCreateIndex(settings.m_defaultBackend, settings.m_docsIndexLocation, wasObsoleteFormat, prefsMode) == false)
 	{
 		errorMsg = _("Couldn't open index");
 		errorMsg += " ";
@@ -343,13 +363,21 @@
 		// Set an icon for all windows
 		Gtk::Window::set_default_icon_from_file(prefixDir + "/share/icons/hicolor/48x48/apps/pinot.png");
 
-		// Create and open the main dialog box
-		mainWindow mainBox;
-		if (errorMsg.empty() == false)
+		// Create and open the window
+		if (prefsMode == false)
+		{ 
+			mainWindow mainBox;
+			if (errorMsg.empty() == false)
+			{
+				mainBox.set_status(errorMsg);
+			}
+			m.run(mainBox);
+		}
+		else
 		{
-			mainBox.set_status(errorMsg);
+			prefsWindow prefsBox;
+			m.run(prefsBox);
 		}
-		m.run(mainBox);
 	}
 	catch (const Glib::Exception &e)
 	{



From fabricecolin at mail.berlios.de  Wed Nov 19 14:58:15 2008
From: fabricecolin at mail.berlios.de (fabricecolin at mail.berlios.de)
Date: Wed, 19 Nov 2008 14:58:15 +0100
Subject: [Pinot-svn] r1416 - in trunk: . po
Message-ID: <200811191358.mAJDwFWH013868@sheep.berlios.de>

Author: fabricecolin
Date: 2008-11-19 14:58:01 +0100 (Wed, 19 Nov 2008)
New Revision: 1416

Modified:
   trunk/Makefile.am
   trunk/pinot.spec.in
   trunk/po/POTFILES.in
Log:
Set pinot-prefs as a symlink to pinot, install scripts/bash/*.sh.
POTFILES looks for the prefsWindow source.


Modified: trunk/Makefile.am
===================================================================
--- trunk/Makefile.am	2008-11-19 13:55:52 UTC (rev 1415)
+++ trunk/Makefile.am	2008-11-19 13:58:01 UTC (rev 1416)
@@ -15,8 +15,7 @@
 	UI/icons/32x32/pinot.png UI/icons/24x24/pinot.png \
 	UI/icons/22x22/pinot.png UI/icons/16x16/pinot.png \
 	UI/GTK2/metase-gtk2.glade UI/GTK2/metase-gtk2.gladep \
-	scripts/bash/pinot-enum-index.sh \
-	scripts/python/pinot-live.py scripts/python/pinot-module.py
+	scripts/bash/*.sh scripts/python/*.py
 
 man_MANS = IndexSearch/pinot-index.1 IndexSearch/pinot-label.1 \
 	IndexSearch/pinot-search.1 UI/GTK2/src/pinot.1 UI/GTK2/src/pinot-dbus-daemon.1
@@ -29,6 +28,7 @@
 	@help2man --no-info --name "D-Bus search and index daemon" UI/GTK2/src/pinot-dbus-daemon         >UI/GTK2/src/pinot-dbus-daemon.1
 
 install-data-local:
+	@ln -s $(bindir)/pinot $(DESTDIR)$(bindir)/pinot-prefs
 	@mkdir -p $(DESTDIR)$(sysconfdir)/pinot
 	$(INSTALL_DATA) $(srcdir)/Tokenize/filters/external-filters.xml $(DESTDIR)$(sysconfdir)/pinot/external-filters.xml
 	$(INSTALL_DATA) $(srcdir)/globalconfig.xml $(DESTDIR)$(sysconfdir)/pinot/globalconfig.xml
@@ -69,6 +69,7 @@
 	$(INSTALL_DATA) $(srcdir)/scripts/python/pinot-live.py $(DESTDIR)$(libdir)/deskbar-applet/handlers/
 	@mkdir -p $(DESTDIR)$(libdir)/deskbar-applet/modules-2.20-compatible/
 	$(INSTALL_DATA) $(srcdir)/scripts/python/pinot-module.py $(DESTDIR)$(libdir)/deskbar-applet/modules-2.20-compatible/
+	$(INSTALL_DATA) $(srcdir)/scripts/bash/*.sh $(DESTDIR)$(datadir)/pinot/
 
 uninstall-local:
 	@rm -rf $(DESTDIR)$(sysconfdir)/pinot

Modified: trunk/pinot.spec.in
===================================================================
--- trunk/pinot.spec.in	2008-11-19 13:55:52 UTC (rev 1415)
+++ trunk/pinot.spec.in	2008-11-19 13:58:01 UTC (rev 1416)
@@ -92,6 +92,7 @@
 %{_bindir}/pinot-dbus-daemon
 %{_bindir}/pinot-index
 %{_bindir}/pinot-label
+%{_bindir}/pinot-prefs
 %{_bindir}/pinot-search
 %{_libdir}/pinot/filters/libexifimagefilter.so*
 %{_libdir}/pinot/filters/libexternalfilter.so*

Modified: trunk/po/POTFILES.in
===================================================================
--- trunk/po/POTFILES.in	2008-11-19 13:55:52 UTC (rev 1415)
+++ trunk/po/POTFILES.in	2008-11-19 13:58:01 UTC (rev 1416)
@@ -19,8 +19,8 @@
 UI/GTK2/src/pinot-dbus-daemon.cc
 UI/GTK2/src/PinotSettings.cpp
 UI/GTK2/src/PinotUtils.cpp
-UI/GTK2/src/prefsDialog.cc
-UI/GTK2/src/prefsDialog_glade.cc
+UI/GTK2/src/prefsWindow.cc
+UI/GTK2/src/prefsWindow_glade.cc
 UI/GTK2/src/propertiesDialog.cc
 UI/GTK2/src/propertiesDialog_glade.cc
 UI/GTK2/src/queryDialog.cc



From fabricecolin at mail.berlios.de  Wed Nov 19 15:40:45 2008
From: fabricecolin at mail.berlios.de (fabricecolin at mail.berlios.de)
Date: Wed, 19 Nov 2008 15:40:45 +0100
Subject: [Pinot-svn] r1417 - trunk/UI/GTK2/src
Message-ID: <200811191440.mAJEejul017979@sheep.berlios.de>

Author: fabricecolin
Date: 2008-11-19 15:40:31 +0100 (Wed, 19 Nov 2008)
New Revision: 1417

Modified:
   trunk/UI/GTK2/src/pinot.cc
   trunk/UI/GTK2/src/prefsWindow.cc
Log:
Log messages to pinot-prefs.log.
Fixed exit after starting the daemon and/or setting labels.


Modified: trunk/UI/GTK2/src/pinot.cc
===================================================================
--- trunk/UI/GTK2/src/pinot.cc	2008-11-19 13:58:01 UTC (rev 1416)
+++ trunk/UI/GTK2/src/pinot.cc	2008-11-19 14:40:31 UTC (rev 1417)
@@ -229,7 +229,14 @@
 	{
 		// Redirect cout and cerr to a file
 		string logFileName = confDirectory;
-		logFileName += "/pinot.log";
+		if (prefsMode == false)
+		{
+			logFileName += "/pinot.log";
+		}
+		else
+		{
+			logFileName += "/pinot-prefs.log";
+		}
 		g_outputFile.open(logFileName.c_str());
 		g_coutBuf = cout.rdbuf();
 		g_cerrBuf = cerr.rdbuf();

Modified: trunk/UI/GTK2/src/prefsWindow.cc
===================================================================
--- trunk/UI/GTK2/src/prefsWindow.cc	2008-11-19 13:58:01 UTC (rev 1416)
+++ trunk/UI/GTK2/src/prefsWindow.cc	2008-11-19 14:40:31 UTC (rev 1417)
@@ -321,10 +321,7 @@
 	}
 
 	// Any thread still running ?
-	if (m_state.get_threads_count() > 0)
-	{
-		canQuit = true;
-	}
+	unsigned int threadsCount = m_state.get_threads_count();
 
 	// What type of thread was it ?
 	string type = pThread->getType();
@@ -341,12 +338,14 @@
 	{
 		populate_labelsTreeview();
 	}
-	else if (type == "StartDaemonThread")
+	else if ((type == "StartDaemonThread") ||
+		(type == "LabelUpdateThread"))
 	{
+		if (threadsCount == 0)
+		{
+			canQuit = true;
+		}
 	}
-	else if (type == "LabelUpdateThread")
-	{
-	}
 
 	// Delete the thread
 	delete pThread;
@@ -358,6 +357,9 @@
 	}
 	else
 	{
+#ifdef DEBUG
+		cout << "prefsWindow::on_thread_end: quitting" << endl;
+#endif
 		on_prefsWindow_delete_event(NULL);
 	}
 }



From fabricecolin at mail.berlios.de  Sat Nov 22 06:53:44 2008
From: fabricecolin at mail.berlios.de (fabricecolin at mail.berlios.de)
Date: Sat, 22 Nov 2008 06:53:44 +0100
Subject: [Pinot-svn] r1418 - trunk/UI/GTK2/src
Message-ID: <200811220553.mAM5ri7c024836@sheep.berlios.de>

Author: fabricecolin
Date: 2008-11-22 06:53:32 +0100 (Sat, 22 Nov 2008)
New Revision: 1418

Modified:
   trunk/UI/GTK2/src/PinotSettings.cpp
   trunk/UI/GTK2/src/PinotSettings.h
Log:
Split the configuration file in two, one part being updated by preferences, and
the other by the UI.
The load() method now handles everything, including engines and their editable
values.


Modified: trunk/UI/GTK2/src/PinotSettings.cpp
===================================================================
--- trunk/UI/GTK2/src/PinotSettings.cpp	2008-11-19 14:40:31 UTC (rev 1417)
+++ trunk/UI/GTK2/src/PinotSettings.cpp	2008-11-22 05:53:32 UTC (rev 1418)
@@ -138,7 +138,7 @@
 	m_daemonIndexLocation = directoryName;
 	m_daemonIndexLocation += "/daemon";
 
-	// This is not set in the configuration file
+	// This is not set in the settings files
 	char *pEnvVar = getenv("PINOT_MINIMUM_DISK_SPACE");
 	if ((pEnvVar != NULL) &&
 		(strlen(pEnvVar) > 0))
@@ -199,11 +199,19 @@
 	return directoryName;
 }
 
-string PinotSettings::getConfigurationFileName(void)
+string PinotSettings::getFileName(bool prefsOrUI)
 {
-	string configFileName = getConfigurationDirectory();
-	configFileName += "/config.xml";
+	string configFileName(getConfigurationDirectory());
 
+	if (prefsOrUI == true)
+	{
+		configFileName += "/prefs.xml";
+	}
+	else
+	{
+		configFileName += "/ui.xml";
+	}
+
 	return configFileName;
 }
 
@@ -303,19 +311,60 @@
 	m_labels.clear();
 }
 
-bool PinotSettings::loadGlobal(const string &fileName)
+bool PinotSettings::load(LoadWhat what)
 {
-	if (loadConfiguration(fileName, true) == false)
+	string fileName;
+
+	if ((what == LOAD_ALL) ||
+		(what == LOAD_GLOBAL))
 	{
-		return false;
+		fileName = string(SYSCONFDIR) + "/pinot/globalconfig.xml";
+
+		if (loadConfiguration(fileName, true) == false)
+		{
+			return false;
+		}
+
+		if (what == LOAD_GLOBAL)
+		{
+			// Stop here
+			return true;
+		}
 	}
 
-	return true;
-}
+	// Load settings ?
+	if (m_firstRun == false)
+	{
+		if ((loadConfiguration(getFileName(true), false) == false) ||
+			(loadConfiguration(getFileName(false), false) == false))
+		{
+			fileName = getConfigurationDirectory() + "/config.xml";
 
+			// We may have to migrate away from a pre-0.90 configuration
+			clear();
+			if (loadConfiguration(fileName, false) == true)
+			{
+				// Save settings now to the new format
+				save(SAVE_PREFS);
+				save(SAVE_CONFIG);
 
-bool PinotSettings::load(void)
-{
+				cout << "Migrated settings to 0.90 format" << endl;
+			}
+			else
+			{
+				m_firstRun = true;
+			}
+		}
+
+	}
+
+	if (what == LOAD_ALL)
+	{
+		// Load search engines
+		loadSearchEngines(string(PREFIX) + "/share/pinot/engines");
+		loadSearchEngines(getConfigurationDirectory() + "/engines");
+	}
+
 	map<ModuleProperties, bool> engines;
 	string currentUserChannelName(_("Current User"));
 
@@ -344,13 +393,6 @@
 		}
 	}
 
-	// Load the configuration file
-	string fileName = getConfigurationFileName();
-	if (m_firstRun == false)
-	{
-		loadConfiguration(fileName, false);
-	}
-
 	// Internal indices
 	addIndex(_("My Web Pages"), m_docsIndexLocation);
 	addIndex(_("My Documents"), m_daemonIndexLocation);
@@ -401,6 +443,77 @@
 	return true;
 }
 
+bool PinotSettings::loadSearchEngines(const string &directoryName)
+{
+	if (directoryName.empty() == true)
+	{
+		return true;
+	}
+
+	DIR *pDir = opendir(directoryName.c_str());
+	if (pDir == NULL)
+	{
+		return false;
+	}
+
+	// Iterate through this directory's entries
+	struct dirent *pDirEntry = readdir(pDir);
+	while (pDirEntry != NULL)
+	{
+		char *pEntryName = pDirEntry->d_name;
+		if (pEntryName != NULL)
+		{
+			struct stat fileStat;
+			string location = directoryName;
+			location += "/";
+			location += pEntryName;
+
+			// Is that a file ?
+			if ((stat(location.c_str(), &fileStat) == 0) &&
+				(S_ISREG(fileStat.st_mode)))
+			{
+				SearchPluginProperties properties;
+
+				if ((PluginWebEngine::getDetails(location, properties) == true) &&
+					(properties.m_name.empty() == false) &&
+					(properties.m_longName.empty() == false))
+				{
+					m_engineIds[1 << m_engines.size()] = properties.m_longName;
+					if (properties.m_channel.empty() == true)
+					{
+						properties.m_channel = _("Unclassified");
+					}
+					// SearchPluginProperties derives ModuleProperties
+					m_engines.insert(properties);
+					m_engineChannels.insert(pair<string, bool>(properties.m_channel, true));
+
+					// Any editable parameters in this plugin ?
+					for (map<string, string>::const_iterator editableIter = properties.m_editableParameters.begin();
+						editableIter != properties.m_editableParameters.end(); ++editableIter)
+					{
+						// This may have been created when loading settings
+						if (m_editablePluginValues.find(editableIter->second) == m_editablePluginValues.end())
+						{
+							m_editablePluginValues[editableIter->second] = "";
+						}
+					}
+#ifdef DEBUG
+					cout << "PinotSettings::loadSearchEngines: " << properties.m_name
+						<< ", " << properties.m_longName << ", " << properties.m_option
+						<< " has " << properties.m_editableParameters.size() << " editable values" << endl;
+#endif
+				}
+			}
+		}
+
+		// Next entry
+		pDirEntry = readdir(pDir);
+	}
+	closedir(pDir);
+
+	return true;
+}
+
 bool PinotSettings::loadConfiguration(const std::string &fileName, bool isGlobal)
 {
 	struct stat fileStat;
@@ -409,17 +522,13 @@
 	if ((stat(fileName.c_str(), &fileStat) != 0) ||
 		(!S_ISREG(fileStat.st_mode)))
 	{
-		cerr << "Couldn't open configuration file " << fileName << endl;
-		if (isGlobal == false)
-		{
-			m_firstRun = true;
-		}
+		cerr << "Couldn't open settings file " << fileName << endl;
 		return false;
 	}
 
 	try
 	{
-		// Parse the configuration file
+		// Parse the settings file
 		DomParser parser;
 		parser.set_substitute_entities(true);
 		parser.parse_file(fileName);
@@ -561,7 +670,7 @@
 	}
 	catch (const std::exception& ex)
 	{
-		cerr << "Couldn't parse configuration file: "
+		cerr << "Couldn't parse settings file: "
 			<< ex.what() << endl;
 		success = false;
 	}
@@ -1226,11 +1335,7 @@
 		}
 	}
 
-	map<string, string>::iterator valueIter = m_editablePluginValues.find(name);
-	if (valueIter != m_editablePluginValues.end())
-	{
-		valueIter->second = value;
-	}
+	m_editablePluginValues[name] = value;
 
 	return true;
 }
@@ -1304,79 +1409,18 @@
 	return true;
 }
 
-bool PinotSettings::loadSearchEngines(const string &directoryName)
+bool PinotSettings::save(SaveWhat what)
 {
-	if (directoryName.empty() == true)
-	{
-		return true;
-	}
+	Element *pRootElem = NULL;
+	Element *pElem = NULL;
+	char numStr[64];
+	bool prefsOrUI = true;
 
-	DIR *pDir = opendir(directoryName.c_str());
-	if (pDir == NULL)
+	if (what == SAVE_CONFIG)
 	{
-		return false;
+		prefsOrUI = false;
 	}
 
-	// Iterate through this directory's entries
-	struct dirent *pDirEntry = readdir(pDir);
-	while (pDirEntry != NULL)
-	{
-		char *pEntryName = pDirEntry->d_name;
-		if (pEntryName != NULL)
-		{
-			struct stat fileStat;
-			string location = directoryName;
-			location += "/";
-			location += pEntryName;
-
-			// Is that a file ?
-			if ((stat(location.c_str(), &fileStat) == 0) &&
-				(S_ISREG(fileStat.st_mode)))
-			{
-				SearchPluginProperties properties;
-
-				if ((PluginWebEngine::getDetails(location, properties) == true) &&
-					(properties.m_name.empty() == false) &&
-					(properties.m_longName.empty() == false))
-				{
-					m_engineIds[1 << m_engines.size()] = properties.m_longName;
-					if (properties.m_channel.empty() == true)
-					{
-						properties.m_channel = _("Unclassified");
-					}
-					// SearchPluginProperties derives ModuleProperties
-					m_engines.insert(properties);
-					m_engineChannels.insert(pair<string, bool>(properties.m_channel, true));
-
-					// Any editable parameters in this plugin ?
-					for (map<string, string>::const_iterator editableIter = properties.m_editableParameters.begin();
-						editableIter != properties.m_editableParameters.end(); ++editableIter)
-					{
-						m_editablePluginValues[editableIter->second] = "";
-					}
-#ifdef DEBUG
-					cout << "PinotSettings::loadSearchEngines: " << properties.m_name
-						<< ", " << properties.m_longName << ", " << properties.m_option
-						<< " has " << properties.m_editableParameters.size() << " editable values" << endl;
-#endif
-				}
-			}
-		}
-
-		// Next entry
-		pDirEntry = readdir(pDir);
-	}
-	closedir(pDir);
-
-	return true;
-}
-
-bool PinotSettings::save(void)
-{
-	Element *pRootElem = NULL;
-	Element *pElem = NULL;
-	char numStr[64];
-
 	try
 	{
 		xmlpp::Document doc("1.0");
@@ -1389,177 +1433,183 @@
 		}
 		// ...with text children nodes
 		addChildElement(pRootElem, "version", VERSION);
-		addChildElement(pRootElem, "warnaboutversion", (m_warnAboutVersion ? "YES" : "NO"));
-		addChildElement(pRootElem, "backend", m_defaultBackend);
-		addChildElement(pRootElem, "googleapikey", m_googleAPIKey);
-		// User interface position and size
-		pElem = pRootElem->add_child("ui");
-		if (pElem == NULL)
+		if (what == SAVE_CONFIG)
 		{
-			return false;
-		}
-		snprintf(numStr, 64, "%d", m_xPos);
-		addChildElement(pElem, "xpos", numStr);
-		snprintf(numStr, 64, "%d", m_yPos);
-		addChildElement(pElem, "ypos", numStr);
-		snprintf(numStr, 64, "%d", m_width);
-		addChildElement(pElem, "width", numStr);
-		snprintf(numStr, 64, "%d", m_height);
-		addChildElement(pElem, "height", numStr);
-		snprintf(numStr, 64, "%d", m_panePos);
-		addChildElement(pElem, "panepos", numStr);
-		addChildElement(pElem, "expandqueries", (m_expandQueries ? "YES" : "NO"));
-		addChildElement(pElem, "showengines", (m_showEngines ? "YES" : "NO"));
-		// User-defined indexes
-		for (map<string, string>::iterator indexIter = m_indexNames.begin(); indexIter != m_indexNames.end(); ++indexIter)
-		{
-			string indexName = indexIter->first;
-
-			if (isInternalIndex(indexName) == true)
-			{
-				continue;
-			}
-
-			pElem = pRootElem->add_child("extraindex");
+			addChildElement(pRootElem, "warnaboutversion", (m_warnAboutVersion ? "YES" : "NO"));
+			addChildElement(pRootElem, "backend", m_defaultBackend);
+			addChildElement(pRootElem, "googleapikey", m_googleAPIKey);
+			// User interface position and size
+			pElem = pRootElem->add_child("ui");
 			if (pElem == NULL)
 			{
 				return false;
 			}
-			addChildElement(pElem, "name", indexIter->first);
-			addChildElement(pElem, "location", indexIter->second);
-		}
-		// Engine channels
-		for (map<string, bool>::iterator channelIter = m_engineChannels.begin();
-			channelIter != m_engineChannels.end(); ++channelIter)
-		{
-			// Only save those whose group was collapsed
-			if (channelIter->second == false)
+			snprintf(numStr, 64, "%d", m_xPos);
+			addChildElement(pElem, "xpos", numStr);
+			snprintf(numStr, 64, "%d", m_yPos);
+			addChildElement(pElem, "ypos", numStr);
+			snprintf(numStr, 64, "%d", m_width);
+			addChildElement(pElem, "width", numStr);
+			snprintf(numStr, 64, "%d", m_height);
+			addChildElement(pElem, "height", numStr);
+			snprintf(numStr, 64, "%d", m_panePos);
+			addChildElement(pElem, "panepos", numStr);
+			addChildElement(pElem, "expandqueries", (m_expandQueries ? "YES" : "NO"));
+			addChildElement(pElem, "showengines", (m_showEngines ? "YES" : "NO"));
+			// User-defined indexes
+			for (map<string, string>::iterator indexIter = m_indexNames.begin(); indexIter != m_indexNames.end(); ++indexIter)
 			{
-				pElem = pRootElem->add_child("channel");
+				string indexName = indexIter->first;
+
+				if (isInternalIndex(indexName) == true)
+				{
+					continue;
+				}
+
+				pElem = pRootElem->add_child("extraindex");
 				if (pElem == NULL)
 				{
 					return false;
 				}
-				addChildElement(pElem, "name", channelIter->first);
+				addChildElement(pElem, "name", indexIter->first);
+				addChildElement(pElem, "location", indexIter->second);
 			}
-		}
-		// User-defined queries
-		for (map<string, QueryProperties>::iterator queryIter = m_queries.begin();
-			queryIter != m_queries.end(); ++queryIter)
-		{
-			pElem = pRootElem->add_child("storedquery");
-			if (pElem == NULL)
+			// Engine channels
+			for (map<string, bool>::iterator channelIter = m_engineChannels.begin();
+				channelIter != m_engineChannels.end(); ++channelIter)
 			{
-				return false;
+				// Only save those whose group was collapsed
+				if (channelIter->second == false)
+				{
+					pElem = pRootElem->add_child("channel");
+					if (pElem == NULL)
+					{
+						return false;
+					}
+					addChildElement(pElem, "name", channelIter->first);
+				}
 			}
+			// User-defined queries
+			for (map<string, QueryProperties>::iterator queryIter = m_queries.begin();
+				queryIter != m_queries.end(); ++queryIter)
+			{
+				pElem = pRootElem->add_child("storedquery");
+				if (pElem == NULL)
+				{
+					return false;
+				}
 
-			addChildElement(pElem, "name", queryIter->first);
-			addChildElement(pElem, "sortorder", (queryIter->second.getSortOrder() == QueryProperties::DATE ? "DATE" : "RELEVANCE"));
-			addChildElement(pElem, "text", queryIter->second.getFreeQuery());
-			addChildElement(pElem, "stemlanguage", Languages::toEnglish(queryIter->second.getStemmingLanguage()));
-			snprintf(numStr, 64, "%u", queryIter->second.getMaximumResultsCount());
-			addChildElement(pElem, "maxresults", numStr);
-			QueryProperties::IndexWhat indexResults = queryIter->second.getIndexResults();
-			if (indexResults == QueryProperties::NEW_RESULTS)
-			{
-				addChildElement(pElem, "index", "NEW");
+				addChildElement(pElem, "name", queryIter->first);
+				addChildElement(pElem, "sortorder", (queryIter->second.getSortOrder() == QueryProperties::DATE ? "DATE" : "RELEVANCE"));
+				addChildElement(pElem, "text", queryIter->second.getFreeQuery());
+				addChildElement(pElem, "stemlanguage", Languages::toEnglish(queryIter->second.getStemmingLanguage()));
+				snprintf(numStr, 64, "%u", queryIter->second.getMaximumResultsCount());
+				addChildElement(pElem, "maxresults", numStr);
+				QueryProperties::IndexWhat indexResults = queryIter->second.getIndexResults();
+				if (indexResults == QueryProperties::NEW_RESULTS)
+				{
+					addChildElement(pElem, "index", "NEW");
+				}
+				else if (indexResults == QueryProperties::ALL_RESULTS)
+				{
+					addChildElement(pElem, "index", "ALL");
+				}
+				else
+				{
+					addChildElement(pElem, "index", "NONE");
+				}
+				addChildElement(pElem, "label", queryIter->second.getLabelName());
+				addChildElement(pElem, "modified", (queryIter->second.getModified() ? "YES" : "NO"));
 			}
-			else if (indexResults == QueryProperties::ALL_RESULTS)
+		}
+		if (what == SAVE_PREFS)
+		{
+			// Labels
+			for (set<string>::iterator labelIter = m_labels.begin(); labelIter != m_labels.end(); ++labelIter)
 			{
-				addChildElement(pElem, "index", "ALL");
+				pElem = pRootElem->add_child("label");
+				if (pElem == NULL)
+				{
+					return false;
+				}
+				addChildElement(pElem, "name", *labelIter);
 			}
-			else
-			{
-				addChildElement(pElem, "index", "NONE");
-			}
-			addChildElement(pElem, "label", queryIter->second.getLabelName());
-			addChildElement(pElem, "modified", (queryIter->second.getModified() ? "YES" : "NO"));
-		}
-		// Labels
-		for (set<string>::iterator labelIter = m_labels.begin(); labelIter != m_labels.end(); ++labelIter)
-		{
-			pElem = pRootElem->add_child("label");
+			// Ignore robots directives
+			addChildElement(pRootElem, "robots", (m_ignoreRobotsDirectives ? "IGNORE" : "OBEY"));
+			// Enable terms suggestion
+			addChildElement(pRootElem, "suggestterms", (m_suggestQueryTerms ? "YES" : "NO"));
+			// New results colour
+			pElem = pRootElem->add_child("newresults");
 			if (pElem == NULL)
 			{
 				return false;
 			}
-			addChildElement(pElem, "name", *labelIter);
-		}
-		// Ignore robots directives
-		addChildElement(pRootElem, "robots", (m_ignoreRobotsDirectives ? "IGNORE" : "OBEY"));
-		// Enable terms suggestion
-		addChildElement(pRootElem, "suggestterms", (m_suggestQueryTerms ? "YES" : "NO"));
-		// New results colour
-		pElem = pRootElem->add_child("newresults");
-		if (pElem == NULL)
-		{
-			return false;
-		}
-		snprintf(numStr, 64, "%u", m_newResultsColourRed);
-		addChildElement(pElem, "red", numStr);
-		snprintf(numStr, 64, "%u", m_newResultsColourGreen);
-		addChildElement(pElem, "green", numStr);
-		snprintf(numStr, 64, "%u", m_newResultsColourBlue);
-		addChildElement(pElem, "blue", numStr);
-		// Proxy
-		pElem = pRootElem->add_child("proxy");
-		if (pElem == NULL)
-		{
-			return false;
-		}
-		addChildElement(pElem, "address", m_proxyAddress);
-		snprintf(numStr, 64, "%u", m_proxyPort);
-		addChildElement(pElem, "port", numStr);
-		addChildElement(pElem, "type", m_proxyType);
-		addChildElement(pElem, "enable", (m_proxyEnabled ? "YES" : "NO"));
-		// Locations to index 
-		for (set<IndexableLocation>::iterator locationIter = m_indexableLocations.begin();
-			locationIter != m_indexableLocations.end(); ++locationIter)
-		{
-			pElem = pRootElem->add_child("indexable");
+			snprintf(numStr, 64, "%u", m_newResultsColourRed);
+			addChildElement(pElem, "red", numStr);
+			snprintf(numStr, 64, "%u", m_newResultsColourGreen);
+			addChildElement(pElem, "green", numStr);
+			snprintf(numStr, 64, "%u", m_newResultsColourBlue);
+			addChildElement(pElem, "blue", numStr);
+			// Proxy
+			pElem = pRootElem->add_child("proxy");
 			if (pElem == NULL)
 			{
 				return false;
 			}
-			addChildElement(pElem, "name", locationIter->m_name);
-			addChildElement(pElem, "monitor", (locationIter->m_monitor ? "YES" : "NO"));
-		}
-		// File patterns
-		pElem = pRootElem->add_child("patterns");
-		if (pElem == NULL)
-		{
-			return false;
-		}
-		for (set<ustring>::iterator patternIter = m_filePatternsList.begin();
-			patternIter != m_filePatternsList.end() ; ++patternIter)
-		{
-			addChildElement(pElem, "pattern", *patternIter);
-		}
-		addChildElement(pElem, "forbid", (m_isBlackList ? "YES" : "NO"));
-		// Values of editable plugin parameters
-		for (map<string, string>::iterator editableIter = m_editablePluginValues.begin();
-			editableIter != m_editablePluginValues.end() ; ++editableIter)
-		{
-			if (editableIter->second.empty() == true)
+			addChildElement(pElem, "address", m_proxyAddress);
+			snprintf(numStr, 64, "%u", m_proxyPort);
+			addChildElement(pElem, "port", numStr);
+			addChildElement(pElem, "type", m_proxyType);
+			addChildElement(pElem, "enable", (m_proxyEnabled ? "YES" : "NO"));
+			// Locations to index 
+			for (set<IndexableLocation>::iterator locationIter = m_indexableLocations.begin();
+				locationIter != m_indexableLocations.end(); ++locationIter)
 			{
-				continue;
+				pElem = pRootElem->add_child("indexable");
+				if (pElem == NULL)
+				{
+					return false;
+				}
+				addChildElement(pElem, "name", locationIter->m_name);
+				addChildElement(pElem, "monitor", (locationIter->m_monitor ? "YES" : "NO"));
 			}
-
-			pElem = pRootElem->add_child("pluginparameters");
+			// File patterns
+			pElem = pRootElem->add_child("patterns");
 			if (pElem == NULL)
 			{
 				return false;
 			}
-			addChildElement(pElem, "name", editableIter->first);
-			addChildElement(pElem, "value", editableIter->second);
+			for (set<ustring>::iterator patternIter = m_filePatternsList.begin();
+				patternIter != m_filePatternsList.end() ; ++patternIter)
+			{
+				addChildElement(pElem, "pattern", *patternIter);
+			}
+			addChildElement(pElem, "forbid", (m_isBlackList ? "YES" : "NO"));
+			// Values of editable plugin parameters
+			for (map<string, string>::iterator editableIter = m_editablePluginValues.begin();
+				editableIter != m_editablePluginValues.end() ; ++editableIter)
+			{
+				if (editableIter->second.empty() == true)
+				{
+					continue;
+				}
+
+				pElem = pRootElem->add_child("pluginparameters");
+				if (pElem == NULL)
+				{
+					return false;
+				}
+				addChildElement(pElem, "name", editableIter->first);
+				addChildElement(pElem, "value", editableIter->second);
+			}
 		}
 
 		// Save to file
-		doc.write_to_file_formatted(getConfigurationFileName());
+		doc.write_to_file_formatted(getFileName(prefsOrUI));
 	}
 	catch (const std::exception& ex)
 	{
-		cerr << "Couldn't save configuration file: "
+		cerr << "Couldn't save settings file: "
 			<< ex.what() << endl;
 		return false;
 	}

Modified: trunk/UI/GTK2/src/PinotSettings.h
===================================================================
--- trunk/UI/GTK2/src/PinotSettings.h	2008-11-19 14:40:31 UTC (rev 1417)
+++ trunk/UI/GTK2/src/PinotSettings.h	2008-11-22 05:53:32 UTC (rev 1418)
@@ -37,6 +37,10 @@
 	public:
 		~PinotSettings();
 
+		typedef enum { LOAD_ALL = 0, LOAD_GLOBAL, LOAD_LOCAL } LoadWhat;
+
+		typedef enum { SAVE_PREFS = 0, SAVE_CONFIG } SaveWhat;
+
 		static PinotSettings &getInstance(void);
 
 		static bool enableClientMode(bool enable);
@@ -45,7 +49,7 @@
 
 		static std::string getConfigurationDirectory(void);
 
-		static std::string getConfigurationFileName(void);
+		static std::string getFileName(bool prefsOrUI);
 
 		static std::string getCurrentUserName(void);
 
@@ -57,14 +61,10 @@
 
 		void clear(void);
 
-		bool loadGlobal(const std::string &fileName);
+		bool load(LoadWhat what);
 
-		bool load(void);
+		bool save(SaveWhat what);
 
-		bool loadSearchEngines(const std::string &directoryName);
-
-		bool save(void);
-
 		/// Returns the indexes map, keyed by name.
 		const std::map<std::string, std::string> &getIndexes(void) const;
 
@@ -214,6 +214,7 @@
 		std::map<std::string, QueryProperties> m_queries;
 
 		PinotSettings();
+		bool loadSearchEngines(const std::string &directoryName);
 		bool loadConfiguration(const std::string &fileName, bool isGlobal);
 		bool loadUi(const xmlpp::Element *pElem);
 		bool loadIndexes(const xmlpp::Element *pElem);



From fabricecolin at mail.berlios.de  Sat Nov 22 06:59:02 2008
From: fabricecolin at mail.berlios.de (fabricecolin at mail.berlios.de)
Date: Sat, 22 Nov 2008 06:59:02 +0100
Subject: [Pinot-svn] r1419 - trunk/UI/GTK2/src
Message-ID: <200811220559.mAM5x2U0030057@sheep.berlios.de>

Author: fabricecolin
Date: 2008-11-22 06:58:42 +0100 (Sat, 22 Nov 2008)
New Revision: 1419

Modified:
   trunk/UI/GTK2/src/DaemonState.cpp
   trunk/UI/GTK2/src/mainWindow.cc
   trunk/UI/GTK2/src/pinot-dbus-daemon.cc
   trunk/UI/GTK2/src/pinot.cc
   trunk/UI/GTK2/src/prefsWindow.cc
Log:
Use the new PinotSettings::load() to load all settings.
In pinot, each window is responsible for saving its own settings when closing.
The main window saves its part before opening the preferences window as the
daemon may subsequently reload all the settings.


Modified: trunk/UI/GTK2/src/DaemonState.cpp
===================================================================
--- trunk/UI/GTK2/src/DaemonState.cpp	2008-11-22 05:53:32 UTC (rev 1418)
+++ trunk/UI/GTK2/src/DaemonState.cpp	2008-11-22 05:58:42 UTC (rev 1419)
@@ -760,8 +760,7 @@
 		// Reload
 		PinotSettings &settings = PinotSettings::getInstance();
 		settings.clear();
-		settings.loadGlobal(string(SYSCONFDIR) + "/pinot/globalconfig.xml");
-		settings.load();
+		settings.load(PinotSettings::LOAD_ALL);
 		m_reload = false;
 #ifdef DEBUG
 		cout << "DaemonState::on_thread_end: reloading" << endl;

Modified: trunk/UI/GTK2/src/mainWindow.cc
===================================================================
--- trunk/UI/GTK2/src/mainWindow.cc	2008-11-22 05:53:32 UTC (rev 1418)
+++ trunk/UI/GTK2/src/mainWindow.cc	2008-11-22 05:58:42 UTC (rev 1419)
@@ -296,6 +296,9 @@
 
 	// Save queries
 	save_queryTreeview();
+
+	// Save the settings
+	m_settings.save(PinotSettings::SAVE_CONFIG);
 }
 
 //
@@ -1823,6 +1826,9 @@
 	MIMEAction prefsAction("pinot-prefs", "pinot-prefs");
 	vector<string> arguments;
 
+	// Save the settings first as any change in preferences will make the daemon reload the whole thing
+	m_settings.save(PinotSettings::SAVE_CONFIG);
+
 	CommandLine::runAsync(prefsAction, arguments);
 }
 

Modified: trunk/UI/GTK2/src/pinot-dbus-daemon.cc
===================================================================
--- trunk/UI/GTK2/src/pinot-dbus-daemon.cc	2008-11-22 05:53:32 UTC (rev 1418)
+++ trunk/UI/GTK2/src/pinot-dbus-daemon.cc	2008-11-22 05:58:42 UTC (rev 1419)
@@ -271,7 +271,6 @@
 
 int main(int argc, char **argv)
 {
-	string prefixDir(PREFIX);
 	struct sigaction newAction;
 	int longOptionIndex = 0, priority = 15;
 	bool resetHistory = false;
@@ -459,12 +458,8 @@
 	Languages::setIntlName(14, _("Swedish"));
 	Languages::setIntlName(15, _("Turkish"));
 
-	// Load search engines
-	settings.loadSearchEngines(prefixDir + "/share/pinot/engines");
-	settings.loadSearchEngines(confDirectory + "/engines");
 	// Load the settings
-	settings.loadGlobal(string(SYSCONFDIR) + "/pinot/globalconfig.xml");
-	settings.load();
+	settings.load(PinotSettings::LOAD_ALL);
 
 	// Catch interrupts
 	sigemptyset(&newAction.sa_mask);

Modified: trunk/UI/GTK2/src/pinot.cc
===================================================================
--- trunk/UI/GTK2/src/pinot.cc	2008-11-22 05:53:32 UTC (rev 1418)
+++ trunk/UI/GTK2/src/pinot.cc	2008-11-22 05:58:42 UTC (rev 1419)
@@ -70,13 +70,6 @@
 {
 	cout << "Exiting..." << endl;
 
-	// Save the settings
-	PinotSettings &settings = PinotSettings::getInstance();
-	if (settings.save() == false)
-	{
-		cerr << "Couldn't save configuration file" << endl;
-	}
-
 	// Close everything
 	ModuleFactory::unloadModules();
 	Dijon::FilterFactory::unloadFilters();
@@ -277,12 +270,8 @@
 	Languages::setIntlName(14, _("Swedish"));
 	Languages::setIntlName(15, _("Turkish"));
 
-	// Load search engines
-	settings.loadSearchEngines(prefixDir + "/share/pinot/engines");
-	settings.loadSearchEngines(confDirectory + "/engines");
 	// Load the settings
-	settings.loadGlobal(string(SYSCONFDIR) + "/pinot/globalconfig.xml");
-	settings.load();
+	settings.load(PinotSettings::LOAD_ALL);
 
 	// Catch interrupts
 	sigemptyset(&newAction.sa_mask);
@@ -337,33 +326,36 @@
 
 	atexit(closeAll);
 
-	IndexInterface *pIndex = settings.getIndex(settings.m_docsIndexLocation);
-	if (pIndex != NULL)
+	if (prefsMode == false)
 	{
-		string indexVersion(pIndex->getMetadata("version"));
-
-		// What version is the index at ?
-		if (indexVersion.empty() == true)
+		IndexInterface *pIndex = settings.getIndex(settings.m_docsIndexLocation);
+		if (pIndex != NULL)
 		{
-			indexVersion = "0.0";
-		}
-		// Is an upgrade necessary ?
-		if ((indexVersion < PINOT_INDEX_MIN_VERSION) &&
-			(pIndex->getDocumentsCount() > 0))
-		{
-			warnAboutVersion = true;
-		}
+			string indexVersion(pIndex->getMetadata("version"));
+
+			// What version is the index at ?
+			if (indexVersion.empty() == true)
+			{
+				indexVersion = "0.0";
+			}
+			// Is an upgrade necessary ?
+			if ((indexVersion < PINOT_INDEX_MIN_VERSION) &&
+				(pIndex->getDocumentsCount() > 0))
+			{
+				warnAboutVersion = true;
+			}
 #ifdef DEBUG
-		cout << "My Web Pages was set to version " << indexVersion << endl;
+			cout << "My Web Pages was set to version " << indexVersion << endl;
 #endif
-		pIndex->setMetadata("version", VERSION);
+			pIndex->setMetadata("version", VERSION);
 
-		delete pIndex;
+			delete pIndex;
+		}
+		if (warnAboutVersion == true)
+		{
+			settings.m_warnAboutVersion = warnAboutVersion;
+		}
 	}
-	if (warnAboutVersion == true)
-	{
-		settings.m_warnAboutVersion = warnAboutVersion;
-	}
 
 	try
 	{

Modified: trunk/UI/GTK2/src/prefsWindow.cc
===================================================================
--- trunk/UI/GTK2/src/prefsWindow.cc	2008-11-22 05:53:32 UTC (rev 1418)
+++ trunk/UI/GTK2/src/prefsWindow.cc	2008-11-22 05:58:42 UTC (rev 1419)
@@ -62,7 +62,7 @@
 		virtual void doWork(void)
 		{
 			// Save the settings
-			PinotSettings::getInstance().save();
+			PinotSettings::getInstance().save(PinotSettings::SAVE_PREFS);
 
 			// Ask the daemon to reload its configuration
 			// Let D-Bus activate the service if necessary



From fabricecolin at mail.berlios.de  Sun Nov 30 11:05:38 2008
From: fabricecolin at mail.berlios.de (fabricecolin at mail.berlios.de)
Date: Sun, 30 Nov 2008 11:05:38 +0100
Subject: [Pinot-svn] r1420 - trunk/UI/GTK2/src
Message-ID: <200811301005.mAUA5cB9023253@sheep.berlios.de>

Author: fabricecolin
Date: 2008-11-30 11:05:33 +0100 (Sun, 30 Nov 2008)
New Revision: 1420

Modified:
   trunk/UI/GTK2/src/PinotSettings.cpp
Log:
Larger default blacklist.
In loadEngineChannels(), create entries in m_engineChannels if necessary.


Modified: trunk/UI/GTK2/src/PinotSettings.cpp
===================================================================
--- trunk/UI/GTK2/src/PinotSettings.cpp	2008-11-22 05:58:42 UTC (rev 1419)
+++ trunk/UI/GTK2/src/PinotSettings.cpp	2008-11-30 10:05:33 UTC (rev 1420)
@@ -826,6 +826,10 @@
 			{
 				channelIter->second = false;
 			}
+			else
+			{
+				m_engineChannels.insert(pair<string, bool>(nodeContent, false));
+			}
 		}
 	}
 
@@ -1910,27 +1914,41 @@
 	defaultPatterns.insert("*.a");
 	defaultPatterns.insert("*.asf");
 	defaultPatterns.insert("*.avi");
+	defaultPatterns.insert("*.aux");
 	defaultPatterns.insert("*CVS");
 	defaultPatterns.insert("*.cap");
 	defaultPatterns.insert("*.divx");
 	defaultPatterns.insert("*.flv");
 	defaultPatterns.insert("*.gif");
+	defaultPatterns.insert("*.git");
+	defaultPatterns.insert("*.gmo");
 	defaultPatterns.insert("*.iso");
 	defaultPatterns.insert("*.la");
 	defaultPatterns.insert("*.lha");
+	defaultPatterns.insert("*.lo");
+	defaultPatterns.insert("*.loT");
+	defaultPatterns.insert("*.m4");
 	defaultPatterns.insert("*.mov");
 	defaultPatterns.insert("*.msf");
 	defaultPatterns.insert("*.mpeg");
 	defaultPatterns.insert("*.mpg");
 	defaultPatterns.insert("*.mo");
 	defaultPatterns.insert("*.o");
+	defaultPatterns.insert("*.omf");
+	defaultPatterns.insert("*.orig");
+	defaultPatterns.insert("*.part");
+	defaultPatterns.insert("*.pc");
 	defaultPatterns.insert("*.png");
+	defaultPatterns.insert("*.po");
 	defaultPatterns.insert("*.rar");
+	defaultPatterns.insert("*.rej");
 	defaultPatterns.insert("*.sh");
 	defaultPatterns.insert("*.so");
 	defaultPatterns.insert("*.svn");
 	defaultPatterns.insert("*.tiff");
+	defaultPatterns.insert("*.tmp");
 	defaultPatterns.insert("*.torrent");
+	defaultPatterns.insert("*.vm*");
 	defaultPatterns.insert("*.wmv");
 	defaultPatterns.insert("*.xbm");
 	defaultPatterns.insert("*.xpm");



From fabricecolin at mail.berlios.de  Sun Nov 30 11:07:54 2008
From: fabricecolin at mail.berlios.de (fabricecolin at mail.berlios.de)
Date: Sun, 30 Nov 2008 11:07:54 +0100
Subject: [Pinot-svn] r1421 - trunk/UI/GTK2/src
Message-ID: <200811301007.mAUA7s6H023400@sheep.berlios.de>

Author: fabricecolin
Date: 2008-11-30 11:07:50 +0100 (Sun, 30 Nov 2008)
New Revision: 1421

Modified:
   trunk/UI/GTK2/src/ResultsTree.cpp
Log:
If a group is empty, add a "No results" child.


Modified: trunk/UI/GTK2/src/ResultsTree.cpp
===================================================================
--- trunk/UI/GTK2/src/ResultsTree.cpp	2008-11-30 10:05:33 UTC (rev 1420)
+++ trunk/UI/GTK2/src/ResultsTree.cpp	2008-11-30 10:07:50 UTC (rev 1421)
@@ -375,55 +375,53 @@
 	if ((path_currently_selected == false) &&
 		(m_groupMode != FLAT))
 	{
-		// Clear the extract
+		// Is this an actual result ?
+		ResultsModelColumns::RowType type = row[m_resultsColumns.m_resultType];
+		if (type != ResultsModelColumns::ROW_RESULT)
+		{
+			return true;
+		}
+
 		RefPtr<TextBuffer> refBuffer = m_extractTextView->get_buffer();
 		if (refBuffer)
 		{
+			ustring extract(findResultsExtract(row));
+			TextBuffer::iterator bufferPos = refBuffer->begin();
+			ustring::size_type textPos = 0, boldPos = extract.find("<b>");
+
+			// Clear the extract
 			refBuffer->set_text("");
-		}
 
-		// Is this an actual result ?
-		ResultsModelColumns::RowType type = row[m_resultsColumns.m_resultType];
-		if (type == ResultsModelColumns::ROW_RESULT)
-		{
 #ifdef DEBUG
 			cout << "ResultsTree::onSelectionSelect: extract for " << row[m_resultsColumns.m_text] << endl;
 #endif
-			RefPtr<TextBuffer> refBuffer = m_extractTextView->get_buffer();
-			if (refBuffer)
+			if (boldPos == ustring::npos)
 			{
-				ustring extract(findResultsExtract(row));
-				TextBuffer::iterator bufferPos = refBuffer->begin();
-				ustring::size_type textPos = 0, boldPos = extract.find("<b>");
+				refBuffer->set_text(extract);
+			}
+			else
+			{
+				while (boldPos != ustring::npos)
+				{
+					bufferPos = refBuffer->insert(bufferPos, extract.substr(textPos, boldPos - textPos));
 
-				if (boldPos == ustring::npos)
-				{
-					refBuffer->set_text(extract);
-				}
-				else
-				{
-					while (boldPos != ustring::npos)
+					textPos = boldPos + 3;
+					boldPos = extract.find("</b>", textPos);
+					if (boldPos == ustring::npos)
 					{
-						bufferPos = refBuffer->insert(bufferPos, extract.substr(textPos, boldPos - textPos));
-
-						textPos = boldPos + 3;
-						boldPos = extract.find("</b>", textPos);
-						if (boldPos == ustring::npos)
-						{
-							continue;
-						}
-						bufferPos = refBuffer->insert_with_tag(bufferPos, extract.substr(textPos, boldPos - textPos), "bold");
-
-						// Next
-						textPos = boldPos + 4;
-						boldPos = extract.find("<b>", textPos);
+						continue;
 					}
+					bufferPos = refBuffer->insert_with_tag(bufferPos, extract.substr(textPos, boldPos - textPos), "bold");
 
-					if (textPos + 1 < extract.length())
-					{
-						bufferPos = refBuffer->insert(bufferPos, extract.substr(textPos, boldPos - textPos));
-					}
+					// Next
+					textPos = boldPos + 4;
+					boldPos = extract.find("<b>", textPos);
 				}
+
+				if (textPos + 1 < extract.length())
+				{
+					bufferPos = refBuffer->insert(bufferPos, extract.substr(textPos, boldPos - textPos));
+				}
 			}
 		}
 	}
@@ -754,8 +752,9 @@
 		cout << "ResultsTree::setGroupMode: looking at " << row[m_resultsColumns.m_text] << endl;
 #endif
 		ResultsModelColumns::RowType type = row[m_resultsColumns.m_resultType];
-		// Skip new type rows
-		if (type == newType)
+		// Skip new type and other rows
+		if ((type == newType) ||
+			(type == ResultsModelColumns::ROW_OTHER))
 		{
 			iter++;
 			continue;
@@ -770,6 +769,18 @@
 			TreeModel::iterator groupIter, newIter;
 			bool success = false;
 
+			type = childRow[m_resultsColumns.m_resultType];
+			if (type == ResultsModelColumns::ROW_OTHER)
+			{
+				TreeModel::Children::iterator nextChildIter = childIter;
+				++nextChildIter;
+
+				// Erase this row
+				m_refStore->erase(childIter);
+				childIter = nextChildIter;
+				continue;
+			}
+
 			// We will need the URL and engines columns in all cases
 			string url(from_utf8(childRow[m_resultsColumns.m_url]));
 			unsigned int engineIds = childRow[m_resultsColumns.m_engines];
@@ -1517,6 +1528,16 @@
 
 		averageScore = (int)(averageScore / groupChildren.size());
 	}
+	else
+	{
+		TreeModel::Row groupRow = *groupIter;
+		TreeModel::iterator childIter = m_refStore->append(groupRow.children());
+		TreeModel::Row childRow = *childIter;
+
+		updateRow(childRow, _("No results"), "", 0, 0, 0,
+			0, TimeConverter::toTimestamp(time(NULL)), "", ResultsModelColumns::ROW_OTHER,
+			false, false, 0);
+	}
 	groupRow[m_resultsColumns.m_score] = averageScore;
 
 #ifdef DEBUG



From fabricecolin at mail.berlios.de  Sun Nov 30 11:10:06 2008
From: fabricecolin at mail.berlios.de (fabricecolin at mail.berlios.de)
Date: Sun, 30 Nov 2008 11:10:06 +0100
Subject: [Pinot-svn] r1422 - trunk
Message-ID: <200811301010.mAUAA6iZ023607@sheep.berlios.de>

Author: fabricecolin
Date: 2008-11-30 11:09:54 +0100 (Sun, 30 Nov 2008)
New Revision: 1422

Added:
   trunk/pinot-prefs.desktop
Modified:
   trunk/Makefile.am
   trunk/pinot-dbus-daemon.desktop
   trunk/pinot.desktop
Log:
Intall pinot-prefs.desktop, which creates a menu entry in system preferences.
ALl .desktop files have "Encoding=UTF-8".


Modified: trunk/Makefile.am
===================================================================
--- trunk/Makefile.am	2008-11-30 10:07:50 UTC (rev 1421)
+++ trunk/Makefile.am	2008-11-30 10:09:54 UTC (rev 1422)
@@ -5,7 +5,7 @@
 EXTRA_DIST = AUTHORS ChangeLog ChangeLog-dijon FAQ NEWS README TODO \
 	Tokenize/filters/external-filters.xml globalconfig.xml \
 	textcat_conf.txt textcat3_conf.txt \
-	pinot.desktop pinot-dbus-daemon.desktop pinot.spec \
+	pinot*.desktop pinot.spec \
 	IndexSearch/Plugins/*src IndexSearch/Plugins/*.xml \
 	IndexSearch/pinot-index.1 IndexSearch/pinot-label.1 \
 	IndexSearch/pinot-search.1 UI/GTK2/src/pinot.1 \
@@ -63,6 +63,7 @@
 	$(INSTALL_DATA) $(srcdir)/UI/icons/16x16/pinot.png $(DESTDIR)$(datadir)/icons/hicolor/16x16/apps/pinot.png
 	@mkdir -p $(DESTDIR)$(datadir)/applications
 	@desktop-file-install --vendor="" --dir=$(DESTDIR)$(datadir)/applications $(srcdir)/pinot.desktop
+	@desktop-file-install --vendor="" --dir=$(DESTDIR)$(datadir)/applications $(srcdir)/pinot-prefs.desktop
 	@mkdir -p $(DESTDIR)${sysconfdir}/xdg/autostart
 	@desktop-file-install --vendor="" --dir=$(DESTDIR)${sysconfdir}/xdg/autostart $(srcdir)/pinot-dbus-daemon.desktop
 	@mkdir -p $(DESTDIR)$(libdir)/deskbar-applet/handlers/

Modified: trunk/pinot-dbus-daemon.desktop
===================================================================
--- trunk/pinot-dbus-daemon.desktop	2008-11-30 10:07:50 UTC (rev 1421)
+++ trunk/pinot-dbus-daemon.desktop	2008-11-30 10:09:54 UTC (rev 1422)
@@ -1,4 +1,5 @@
 [Desktop Entry]
+Encoding=UTF-8
 Name=Pinot
 Comment=Search your documents
 Exec=pinot-dbus-daemon

Added: trunk/pinot-prefs.desktop
===================================================================
--- trunk/pinot-prefs.desktop	2008-11-30 10:07:50 UTC (rev 1421)
+++ trunk/pinot-prefs.desktop	2008-11-30 10:09:54 UTC (rev 1422)
@@ -0,0 +1,10 @@
+[Desktop Entry]
+Encoding=UTF-8
+Name=File Indexing and Search
+Comment=Configure Pinot to index your files
+Exec=pinot-prefs
+StartupNotify=true
+Icon=pinot
+Terminal=false
+Type=Application
+Categories=Settings;

Modified: trunk/pinot.desktop
===================================================================
--- trunk/pinot.desktop	2008-11-30 10:07:50 UTC (rev 1421)
+++ trunk/pinot.desktop	2008-11-30 10:09:54 UTC (rev 1422)
@@ -1,4 +1,5 @@
 [Desktop Entry]
+Encoding=UTF-8
 Name=Pinot Metasearch Tool
 Name[de]=Pinot Werkzeug zur Metasuche
 Name[es]=Herramienta metabuscador Pinot



