From fabricecolin at mail.berlios.de  Sun May 24 05:57:02 2009
From: fabricecolin at mail.berlios.de (fabricecolin at mail.berlios.de)
Date: Sun, 24 May 2009 05:57:02 +0200
Subject: [Pinot-svn] r1631 - trunk/Tokenize
Message-ID: <200905240357.n4O3v2aZ028726@sheep.berlios.de>

Author: fabricecolin
Date: 2009-05-24 05:56:53 +0200 (Sun, 24 May 2009)
New Revision: 1631

Modified:
   trunk/Tokenize/FilterUtils.cpp
   trunk/Tokenize/TextConverter.cpp
   trunk/Tokenize/TextConverter.h
Log:
TextConverter now dstring-enabled.


Modified: trunk/Tokenize/FilterUtils.cpp
===================================================================
--- trunk/Tokenize/FilterUtils.cpp	2009-04-21 13:28:44 UTC (rev 1630)
+++ trunk/Tokenize/FilterUtils.cpp	2009-05-24 03:56:53 UTC (rev 1631)
@@ -402,7 +402,7 @@
 
 		if (doc.getType().substr(0, 10) == "text/plain")
 		{
-			string utf8Data(converter.toUTF8(content.c_str(), content.length(), charset));
+			dstring utf8Data(converter.toUTF8(content, charset));
 
 			if (converter.getErrorsCount() > 0)
 			{
@@ -419,9 +419,11 @@
 	if ((contentIter != metaData.end()) &&
 		(contentIter->second.empty() == false))
 	{
-		string utf8Data(converter.toUTF8(contentIter->second, charset));
+		dstring title(contentIter->second.c_str(), contentIter->second.length());
 
-		doc.setTitle(utf8Data);
+		dstring utf8Data(converter.toUTF8(title, charset));
+
+		doc.setTitle(string(utf8Data.c_str(), utf8Data.length()));
 	}
 
 	// If the document is big'ish, try and reclaim memory

Modified: trunk/Tokenize/TextConverter.cpp
===================================================================
--- trunk/Tokenize/TextConverter.cpp	2009-04-21 13:28:44 UTC (rev 1630)
+++ trunk/Tokenize/TextConverter.cpp	2009-05-24 03:56:53 UTC (rev 1631)
@@ -42,28 +42,19 @@
 {
 }
 
-string TextConverter::toUTF8(const string &text, string &charset)
+dstring TextConverter::toUTF8(const dstring &text, string &charset)
 {
-	unsigned int textLen = (unsigned int)text.length();
-
-	// Call overload
-	return toUTF8(text.c_str(), textLen, charset);
-}
-
-string TextConverter::toUTF8(const char *pText, unsigned int textLen, string &charset)
-{
 	string textCharset(StringManip::toLowerCase(charset));
 	char outputBuffer[8192];
-	char *pInput = const_cast<char *>(pText);
+	char *pInput = const_cast<char *>(text.c_str());
 
 	m_conversionErrors = 0;
 
-	if ((pText == NULL) ||
-		(textLen == 0) ||
+	if ((text.empty() == true) ||
 		(textCharset == "utf-8"))
 	{
 		// No conversion necessary
-		return string(pText, textLen);
+		return text;
 	}
 
 	if (textCharset.empty() == true)
@@ -71,14 +62,14 @@
 		if (m_utf8Locale == true)
 		{
 			// The current locale uses UTF-8
-			return string(pText, textLen);
+			return text;
 		}
 
 		textCharset = m_localeCharset;
 	}
 
-	string outputText;
-	gsize inputSize = (gsize)textLen;
+	dstring outputText;
+	gsize inputSize = (gsize)text.length();
 	bool invalidSequence = false;
 
 	try
@@ -99,12 +90,12 @@
 					// Conversion was only partially successful
 					++m_conversionErrors;
 #ifdef DEBUG
-					cout << "TextConverter::toUTF8: invalid sequence at " << pInput - pText << endl;
+					cout << "TextConverter::toUTF8: invalid sequence" << endl;
 #endif
 					if (m_conversionErrors >= m_maxErrors)
 					{
 						// Give up
-						return string(pText, textLen);
+						return text;
 					}
 					converter.reset();
 
@@ -125,7 +116,7 @@
 #ifdef DEBUG
 					cout << "TextConverter::toUTF8: unknown error " << errorCode << endl;
 #endif
-					return string(pText, textLen);
+					return text;
 				}
 			}
 			else
@@ -156,9 +147,8 @@
 #ifdef DEBUG
 			cout << "TextConverter::toUTF8: trying with charset " << fixedCharset << endl;
 #endif
-
 			textCharset = fixedCharset;
-			outputText = toUTF8(pText, textLen, fixedCharset);
+			outputText = toUTF8(text, fixedCharset);
 		}
 	}
 	catch (...)

Modified: trunk/Tokenize/TextConverter.h
===================================================================
--- trunk/Tokenize/TextConverter.h	2009-04-21 13:28:44 UTC (rev 1630)
+++ trunk/Tokenize/TextConverter.h	2009-05-24 03:56:53 UTC (rev 1631)
@@ -21,6 +21,7 @@
 
 #include <string>
 
+#include "Memory.h"
 #include "Visibility.h"
 
 class PINOT_EXPORT TextConverter
@@ -30,11 +31,8 @@
 		virtual ~TextConverter();
 
 		/// Converts to UTF-8.
-		std::string toUTF8(const std::string &text, std::string &charset);
+		dstring toUTF8(const dstring &text, std::string &charset);
 
-		/// Converts to UTF-8.
-		std::string toUTF8(const char *pText, unsigned int textLen, std::string &charset);
-
 		/// Gets the number of conversion errors for the previous toUTF8() call.
 		unsigned int getErrorsCount(void) const;
 



From fabricecolin at mail.berlios.de  Sun May 24 06:24:09 2009
From: fabricecolin at mail.berlios.de (fabricecolin at mail.berlios.de)
Date: Sun, 24 May 2009 06:24:09 +0200
Subject: [Pinot-svn] r1632 - trunk/UI/GTK2/src
Message-ID: <200905240424.n4O4O9lD000168@sheep.berlios.de>

Author: fabricecolin
Date: 2009-05-24 06:24:04 +0200 (Sun, 24 May 2009)
New Revision: 1632

Modified:
   trunk/UI/GTK2/src/mainWindow.cc
Log:
Show properties of external indices' documents read-only.


Modified: trunk/UI/GTK2/src/mainWindow.cc
===================================================================
--- trunk/UI/GTK2/src/mainWindow.cc	2009-05-24 03:56:53 UTC (rev 1631)
+++ trunk/UI/GTK2/src/mainWindow.cc	2009-05-24 04:24:04 UTC (rev 1632)
@@ -838,18 +838,13 @@
 	}
 
 	bool isDocumentsIndex = true;
-	bool editDocuments = true;
 
 	if (indexName != _("My Web Pages"))
 	{
 		isDocumentsIndex = false;
-		if (indexName != _("My Documents"))
-		{
-			editDocuments = false;
-		}
 	}
 
-	on_document_changed(resultsList, isDocumentsIndex, editDocuments, false);
+	on_document_changed(resultsList, isDocumentsIndex, true, false);
 }
 
 void mainWindow::on_document_changed(vector<DocumentInfo> &resultsList,
@@ -2392,7 +2387,7 @@
 	set<unsigned int> docIds;
 	string indexName;
 	int width, height;
-	bool docsIndex = false, daemonIndex = false;
+	bool docsIndex = false, daemonIndex = false, readOnlyProps = false;
 
 #ifdef DEBUG
 	cout << "mainWindow::on_properties_activate: called" << endl;
@@ -2405,7 +2400,7 @@
 		pResultsTree = pIndexPage->getTree();
 	}
 
-	// Allow this only for internal indexes
+	// Is this an internal index ?
 	if (indexName == _("My Web Pages"))
 	{
 		docsIndex = true;
@@ -2416,7 +2411,7 @@
 	}
 	else
 	{
-		return;
+		readOnlyProps = true;
 	}
 
 	PinotSettings::IndexProperties indexProps(m_settings.getIndexPropertiesByName(indexName));
@@ -2440,14 +2435,12 @@
 		return;
 	}
 
-	// Let the user set the labels
 	get_size(width, height);
 	propertiesDialog propertiesBox(indexProps.m_location, documentsList);
 	propertiesBox.setHeight(height / 2);
 	propertiesBox.show();
-	// What labels will this show ?
-	const set<string> &labels = propertiesBox.getLabels();
-	if (propertiesBox.run() != RESPONSE_OK)
+	if ((propertiesBox.run() != RESPONSE_OK) ||
+		(readOnlyProps == true))
 	{
 		return;
 	}
@@ -2473,6 +2466,7 @@
 	{
 		LabelUpdateThread *pThread = NULL;
 		set<unsigned int> empty;
+		const set<string> &labels = propertiesBox.getLabels();
 
 		// Apply the labels en masse
 		if (docsIndex == true)



From fabricecolin at mail.berlios.de  Sun May 24 06:25:46 2009
From: fabricecolin at mail.berlios.de (fabricecolin at mail.berlios.de)
Date: Sun, 24 May 2009 06:25:46 +0200
Subject: [Pinot-svn] r1633 - trunk/Utils
Message-ID: <200905240425.n4O4PkBT000251@sheep.berlios.de>

Author: fabricecolin
Date: 2009-05-24 06:25:39 +0200 (Sun, 24 May 2009)
New Revision: 1633

Modified:
   trunk/Utils/Document.cpp
Log:
Set the close-on-exec flag, either on open() or after open() with fcntl().


Modified: trunk/Utils/Document.cpp
===================================================================
--- trunk/Utils/Document.cpp	2009-05-24 04:24:04 UTC (rev 1632)
+++ trunk/Utils/Document.cpp	2009-05-24 04:25:39 UTC (rev 1633)
@@ -161,10 +161,9 @@
 bool Document::setDataFromFile(const string &fileName)
 {
 	struct stat fileStat;
-#ifndef O_NOATIME
 	int openFlags = O_RDONLY;
-#else
-	int openFlags = O_RDONLY|O_NOATIME;
+#ifdef O_CLOEXEC
+	openFlags = openFlags|O_CLOEXEC;
 #endif
 
 	if (fileName.empty() == true)
@@ -193,13 +192,17 @@
 	}
 
 	// Open the file in read-only mode
+#ifdef O_NOATIME
+	int fd = open(fileName.c_str(), openFlags|O_NOATIME);
+#else
 	int fd = open(fileName.c_str(), openFlags);
+#endif
 #ifdef O_NOATIME
 	if ((fd < 0) &&
 		(errno == EPERM))
 	{
 		// Try again
-		fd = open(fileName.c_str(), O_RDONLY);
+		fd = open(fileName.c_str(), openFlags);
 	}
 #endif
 	if (fd < 0)
@@ -207,6 +210,10 @@
 		cerr << "Document::setDataFromFile: " << fileName << " couldn't be opened" << endl;
 		return false;
 	}
+#ifndef O_CLOEXEC
+	int fdFlags = fcntl(fd, F_GETFD);
+	fcntl(fd, F_SETFD, fdFlags|FD_CLOEXEC);
+#endif
 
 	// Discard existing data
 	resetData();



From fabricecolin at mail.berlios.de  Sun May 24 06:27:07 2009
From: fabricecolin at mail.berlios.de (fabricecolin at mail.berlios.de)
Date: Sun, 24 May 2009 06:27:07 +0200
Subject: [Pinot-svn] r1634 - trunk/IndexSearch
Message-ID: <200905240427.n4O4R7kR000282@sheep.berlios.de>

Author: fabricecolin
Date: 2009-05-24 06:26:59 +0200 (Sun, 24 May 2009)
New Revision: 1634

Modified:
   trunk/IndexSearch/DBusIndex.cpp
   trunk/IndexSearch/DBusIndex.h
Log:
Added defines for the D-Bus service name and object path.


Modified: trunk/IndexSearch/DBusIndex.cpp
===================================================================
--- trunk/IndexSearch/DBusIndex.cpp	2009-05-24 04:25:39 UTC (rev 1633)
+++ trunk/IndexSearch/DBusIndex.cpp	2009-05-24 04:26:59 UTC (rev 1634)
@@ -58,8 +58,8 @@
 		return NULL;
 	}
 
-	return dbus_g_proxy_new_for_name(pBus,
-		"de.berlios.Pinot", "/de/berlios/Pinot", "de.berlios.Pinot");
+	return dbus_g_proxy_new_for_name(pBus, PINOT_DBUS_SERVICE_NAME,
+		PINOT_DBUS_OBJECT_PATH, PINOT_DBUS_SERVICE_NAME);
 }
 
 DBusIndex::DBusIndex(IndexInterface *pROIndex) :
@@ -1029,8 +1029,8 @@
 	}
 
 	// FIXME: AFAIK we can't use DBusGProxy with message iterators
-	DBusMessage *pMsg = dbus_message_new_method_call("de.berlios.Pinot",
-		"/de/berlios/Pinot", "de.berlios.Pinot", "SetDocumentInfo");
+	DBusMessage *pMsg = dbus_message_new_method_call(PINOT_DBUS_SERVICE_NAME,
+		PINOT_DBUS_OBJECT_PATH, PINOT_DBUS_SERVICE_NAME, "SetDocumentInfo");
 	if (pMsg == NULL)
 	{
 		cerr << "DBusIndex::updateDocumentInfo: couldn't call method" << endl;

Modified: trunk/IndexSearch/DBusIndex.h
===================================================================
--- trunk/IndexSearch/DBusIndex.h	2009-05-24 04:25:39 UTC (rev 1633)
+++ trunk/IndexSearch/DBusIndex.h	2009-05-24 04:26:59 UTC (rev 1634)
@@ -1,5 +1,5 @@
 /*
- *  Copyright 2007-2008 Fabrice Colin
+ *  Copyright 2007-2009 Fabrice Colin
  *
  *  This program is free software; you can redistribute it and/or modify
  *  it under the terms of the GNU General Public License as published by
@@ -35,6 +35,9 @@
 
 #include "IndexInterface.h"
 
+#define PINOT_DBUS_SERVICE_NAME "de.berlios.Pinot"
+#define PINOT_DBUS_OBJECT_PATH "/de/berlios/Pinot"
+
 /// Allows to write to the daemon index via D-Bus. 
 class DBusIndex : public IndexInterface
 {



From fabricecolin at mail.berlios.de  Sun May 24 11:25:20 2009
From: fabricecolin at mail.berlios.de (fabricecolin at mail.berlios.de)
Date: Sun, 24 May 2009 11:25:20 +0200
Subject: [Pinot-svn] r1635 - trunk
Message-ID: <200905240925.n4O9PKtG032097@sheep.berlios.de>

Author: fabricecolin
Date: 2009-05-24 11:25:15 +0200 (Sun, 24 May 2009)
New Revision: 1635

Modified:
   trunk/configure.in
Log:
Set _FILE_OFFSET_BITS=64.


Modified: trunk/configure.in
===================================================================
--- trunk/configure.in	2009-05-24 04:26:59 UTC (rev 1634)
+++ trunk/configure.in	2009-05-24 09:25:15 UTC (rev 1635)
@@ -389,7 +389,7 @@
 AC_MSG_RESULT($gio_can_sniff)
 
 dnl Other libraries
-MISC_CFLAGS="$PTHREAD_CFLAGS $VISIB_CFLAGS"
+MISC_CFLAGS="$PTHREAD_CFLAGS $VISIB_CFLAGS -D_FILE_OFFSET_BITS=64"
 MISC_LIBS="$PTHREAD_LIBS"
 AC_SUBST(MISC_CFLAGS)
 AC_SUBST(MISC_LIBS)



From fabricecolin at mail.berlios.de  Sat May 30 06:13:31 2009
From: fabricecolin at mail.berlios.de (fabricecolin at mail.berlios.de)
Date: Sat, 30 May 2009 06:13:31 +0200
Subject: [Pinot-svn] r1636 - trunk/Core
Message-ID: <200905300413.n4U4DVFQ023414@sheep.berlios.de>

Author: fabricecolin
Date: 2009-05-30 06:13:19 +0200 (Sat, 30 May 2009)
New Revision: 1636

Modified:
   trunk/Core/DaemonState.cpp
   trunk/Core/DaemonState.h
   trunk/Core/ServerThreads.cpp
   trunk/Core/ServerThreads.h
   trunk/Core/pinot-dbus-daemon.cpp
   trunk/Core/pinot-dbus-daemon.xml
Log:
Send the signal IndexFlushed when the index is flushed.
Synced with changes to DBusIndex. Some cleanup.


Modified: trunk/Core/DaemonState.cpp
===================================================================
--- trunk/Core/DaemonState.cpp	2009-05-24 09:25:15 UTC (rev 1635)
+++ trunk/Core/DaemonState.cpp	2009-05-30 04:13:19 UTC (rev 1636)
@@ -194,8 +194,11 @@
 		m_pReply = NULL;
 	}
 
+	string fullName(PINOT_DBUS_SERVICE_NAME);
+	fullName += ".";
+	fullName += name;
 	m_pReply = dbus_message_new_error(m_pRequest,
-		name.c_str(), message.c_str());
+		fullName.c_str(), message.c_str());
         if (m_pReply != NULL)
         {
                 return true;
@@ -263,7 +266,7 @@
 			// The document ID isn't needed here
 			if (DBusIndex::documentInfoToDBus(&subIter, 0, *resultIter) == false)
 			{
-				newErrorReply("de.berlios.Pinot.Query", "Unknown error");
+				newErrorReply("Query", "Unknown error");
 				return false;
 			}
 		}
@@ -781,10 +784,7 @@
 		IndexInterface *pIndex = PinotSettings::getInstance().getIndex(PinotSettings::getInstance().m_daemonIndexLocation);
 		if (pIndex != NULL)
 		{
-#ifdef DEBUG
-			cout << "DaemonState::on_thread_end: flushing" << endl;
-#endif
-			pIndex->flush();
+			DBusServletThread::flushIndexAndSignal(pIndex);
 
 			delete pIndex;
 		}

Modified: trunk/Core/DaemonState.h
===================================================================
--- trunk/Core/DaemonState.h	2009-05-24 09:25:15 UTC (rev 1635)
+++ trunk/Core/DaemonState.h	2009-05-30 04:13:19 UTC (rev 1636)
@@ -23,19 +23,11 @@
 #include <string>
 #include <queue>
 #include <set>
-#ifdef HAVE_DBUS
-extern "C"
-{
-#if DBUS_VERSION < 1000000
-#define DBUS_API_SUBJECT_TO_CHANGE
-#endif
-#include <dbus/dbus.h>
-#include <dbus/dbus-glib.h>
-#include <dbus/dbus-glib-lowlevel.h>
-}
-#endif
 #include <sigc++/sigc++.h>
 
+#ifdef HAVE_DBUS
+#include "DBusIndex.h"
+#endif
 #include "MonitorInterface.h"
 #include "MonitorHandler.h"
 #include "PinotSettings.h"

Modified: trunk/Core/ServerThreads.cpp
===================================================================
--- trunk/Core/ServerThreads.cpp	2009-05-24 09:25:15 UTC (rev 1635)
+++ trunk/Core/ServerThreads.cpp	2009-05-30 04:13:19 UTC (rev 1636)
@@ -36,9 +36,6 @@
 #include "Timer.h"
 #include "Url.h"
 #include "MetaDataBackup.h"
-#ifdef HAVE_DBUS
-#include "DBusIndex.h"
-#endif
 #include "ModuleFactory.h"
 #include "DaemonState.h"
 #include "PinotSettings.h"
@@ -395,6 +392,8 @@
 }
 
 #ifdef HAVE_DBUS
+DBusGConnection *DBusServletThread::m_pBus = NULL;
+
 DBusServletThread::DBusServletThread(DaemonState *pServer, DBusServletInfo *pInfo) :
 	WorkerThread(),
 	m_pServer(pServer),
@@ -407,6 +406,44 @@
 {
 }
 
+void DBusServletThread::flushIndexAndSignal(IndexInterface *pIndex)
+{
+	if (pIndex == NULL)
+	{
+		return;
+	}
+#ifdef DEBUG
+	cout << "DBusServletThread::flushIndexAndSignal: flushing" << endl;
+#endif
+
+	// Flush
+	pIndex->flush();
+
+	// Signal
+	if (m_pBus != NULL)
+	{
+		DBusMessage *pMessage = dbus_message_new_signal(PINOT_DBUS_OBJECT_PATH,
+			PINOT_DBUS_SERVICE_NAME, "IndexFlushed");
+		unsigned int docsCount = pIndex->getDocumentsCount();
+
+		dbus_message_append_args(pMessage,
+			DBUS_TYPE_UINT32, &docsCount,
+			DBUS_TYPE_INVALID);
+		DBusConnection *pConnection = dbus_g_connection_get_connection(m_pBus);
+		if (pConnection != NULL)
+		{
+			dbus_connection_send(pConnection, pMessage, NULL);
+#ifdef DEBUG
+			cout << "DBusServletThread::flushIndexAndSignal: sent signal IndexFlushed " << docsCount << endl;
+#endif
+		}
+		dbus_message_unref(pMessage);
+	}
+#ifdef DEBUG
+	else cout << "DBusServletThread::flushIndexAndSignal: no bus" << endl;
+#endif
+}
+
 string DBusServletThread::getType(void) const
 {
 	return "DBusServletThread";
@@ -458,7 +495,7 @@
 	}
 #endif
 
-	if (dbus_message_is_method_call(m_pServletInfo->m_pRequest, "de.berlios.Pinot", "GetStatistics") == TRUE)
+	if (dbus_message_is_method_call(m_pServletInfo->m_pRequest, PINOT_DBUS_SERVICE_NAME, "GetStatistics") == TRUE)
 	{
 		CrawlHistory crawlHistory(settings.getHistoryDatabaseName());
 		unsigned int crawledFilesCount = crawlHistory.getItemsCount(CrawlHistory::CRAWLED);
@@ -497,7 +534,7 @@
 				DBUS_TYPE_INVALID);
 		}
 	}
-	else if (dbus_message_is_method_call(m_pServletInfo->m_pRequest, "de.berlios.Pinot", "Reload") == TRUE)
+	else if (dbus_message_is_method_call(m_pServletInfo->m_pRequest, PINOT_DBUS_SERVICE_NAME, "Reload") == TRUE)
 	{
 		if (dbus_message_get_args(m_pServletInfo->m_pRequest, &error,
 			DBUS_TYPE_INVALID) == TRUE)
@@ -518,7 +555,7 @@
 			}
 		}
 	}
-	else if (dbus_message_is_method_call(m_pServletInfo->m_pRequest, "de.berlios.Pinot", "Stop") == TRUE)
+	else if (dbus_message_is_method_call(m_pServletInfo->m_pRequest, PINOT_DBUS_SERVICE_NAME, "Stop") == TRUE)
 	{
 		if (dbus_message_get_args(m_pServletInfo->m_pRequest, &error,
 			DBUS_TYPE_INVALID) == TRUE)
@@ -541,7 +578,7 @@
 			m_mustQuit = true;
 		}
 	}
-	else if (dbus_message_is_method_call(m_pServletInfo->m_pRequest, "de.berlios.Pinot", "HasDocument") == TRUE)
+	else if (dbus_message_is_method_call(m_pServletInfo->m_pRequest, PINOT_DBUS_SERVICE_NAME, "HasDocument") == TRUE)
 	{
 		char *pUrl = NULL;
 		unsigned int docId = 0;
@@ -570,7 +607,7 @@
 			}
 		}
 	}
-	else if (dbus_message_is_method_call(m_pServletInfo->m_pRequest, "de.berlios.Pinot", "GetLabels") == TRUE)
+	else if (dbus_message_is_method_call(m_pServletInfo->m_pRequest, PINOT_DBUS_SERVICE_NAME, "GetLabels") == TRUE)
 	{
 #ifdef DEBUG
 		cout << "DBusServletThread::doWork: received GetLabels" << endl;
@@ -589,7 +626,7 @@
 		// Prepare the reply
 		m_pServletInfo->newReplyWithArray();
 	}
-	else if (dbus_message_is_method_call(m_pServletInfo->m_pRequest, "de.berlios.Pinot", "AddLabel") == TRUE)
+	else if (dbus_message_is_method_call(m_pServletInfo->m_pRequest, PINOT_DBUS_SERVICE_NAME, "AddLabel") == TRUE)
 	{
 		char *pLabel = NULL;
 
@@ -624,7 +661,7 @@
 			}
 		}
 	}
-	else if (dbus_message_is_method_call(m_pServletInfo->m_pRequest, "de.berlios.Pinot", "RenameLabel") == TRUE)
+	else if (dbus_message_is_method_call(m_pServletInfo->m_pRequest, PINOT_DBUS_SERVICE_NAME, "RenameLabel") == TRUE)
 	{
 		char *pOldLabel = NULL;
 		char *pNewLabel = NULL;
@@ -648,7 +685,7 @@
 			}
 		}
 	}
-	else if (dbus_message_is_method_call(m_pServletInfo->m_pRequest, "de.berlios.Pinot", "DeleteLabel") == TRUE)
+	else if (dbus_message_is_method_call(m_pServletInfo->m_pRequest, PINOT_DBUS_SERVICE_NAME, "DeleteLabel") == TRUE)
 	{
 		char *pLabel = NULL;
 
@@ -684,7 +721,7 @@
 			}
 		}
 	}
-	else if (dbus_message_is_method_call(m_pServletInfo->m_pRequest, "de.berlios.Pinot", "GetDocumentLabels") == TRUE)
+	else if (dbus_message_is_method_call(m_pServletInfo->m_pRequest, PINOT_DBUS_SERVICE_NAME, "GetDocumentLabels") == TRUE)
 	{
 		unsigned int docId = 0;
 
@@ -714,12 +751,12 @@
 			}
 			else
 			{
-				m_pServletInfo->newErrorReply("de.berlios.Pinot.GetDocumentLabels",
+				m_pServletInfo->newErrorReply("GetDocumentLabels",
 					" failed");
 			}
 		}
 	}
-	else if (dbus_message_is_method_call(m_pServletInfo->m_pRequest, "de.berlios.Pinot", "SetDocumentLabels") == TRUE)
+	else if (dbus_message_is_method_call(m_pServletInfo->m_pRequest, PINOT_DBUS_SERVICE_NAME, "SetDocumentLabels") == TRUE)
 	{
 		char **ppLabels = NULL;
 		dbus_uint32_t labelsCount = 0;
@@ -774,7 +811,7 @@
 			}
 		}
 	}
-	else if (dbus_message_is_method_call(m_pServletInfo->m_pRequest, "de.berlios.Pinot", "SetDocumentsLabels") == TRUE)
+	else if (dbus_message_is_method_call(m_pServletInfo->m_pRequest, PINOT_DBUS_SERVICE_NAME, "SetDocumentsLabels") == TRUE)
 	{
 		char **ppDocIds = NULL;
 		char **ppLabels = NULL;
@@ -848,7 +885,7 @@
 			}
 		}
 	}
-	else if (dbus_message_is_method_call(m_pServletInfo->m_pRequest, "de.berlios.Pinot", "GetDocumentInfo") == TRUE)
+	else if (dbus_message_is_method_call(m_pServletInfo->m_pRequest, PINOT_DBUS_SERVICE_NAME, "GetDocumentInfo") == TRUE)
 	{
 		unsigned int docId = 0;
 
@@ -872,19 +909,19 @@
 					if (DBusIndex::documentInfoToDBus(&iter, 0, docInfo) == false)
 					{
 						dbus_message_unref(m_pServletInfo->m_pReply);
-						m_pServletInfo->newErrorReply("de.berlios.Pinot.GetDocumentInfo",
+						m_pServletInfo->newErrorReply("GetDocumentInfo",
 							"Unknown error");
 					}
 				}
 			}
 			else
 			{
-				m_pServletInfo->newErrorReply("de.berlios.Pinot.GetDocumentInfo",
+				m_pServletInfo->newErrorReply("GetDocumentInfo",
 					"Unknown document");
 			}
 		}
 	}
-	else if (dbus_message_is_method_call(m_pServletInfo->m_pRequest, "de.berlios.Pinot", "SetDocumentInfo") == TRUE)
+	else if (dbus_message_is_method_call(m_pServletInfo->m_pRequest, PINOT_DBUS_SERVICE_NAME, "SetDocumentInfo") == TRUE)
 	{
 		DBusMessageIter iter;
 		DocumentInfo docInfo;
@@ -893,7 +930,7 @@
 		dbus_message_iter_init(m_pServletInfo->m_pRequest, &iter);
 		if (DBusIndex::documentInfoFromDBus(&iter, docId, docInfo) == false)
 		{
-			m_pServletInfo->newErrorReply("de.berlios.Pinot.SetDocumentInfo",
+			m_pServletInfo->newErrorReply("SetDocumentInfo",
 				"Unknown error");
 		}
 		else
@@ -917,7 +954,7 @@
 			}
 		}
 	}
-	else if (dbus_message_is_method_call(m_pServletInfo->m_pRequest, "de.berlios.Pinot", "Query") == TRUE)
+	else if (dbus_message_is_method_call(m_pServletInfo->m_pRequest, PINOT_DBUS_SERVICE_NAME, "Query") == TRUE)
 	{
 		char *pSearchText = NULL;
 		char *pEngineType = NULL;
@@ -969,13 +1006,13 @@
 
 			if (replyWithError == true)
 			{
-				m_pServletInfo->newErrorReply("de.berlios.Pinot.SimpleQuery",
+				m_pServletInfo->newErrorReply("SimpleQuery",
 					"Query failed");
 			}
 		}
 	}
 	// FIXME: this method will soon be obsoleted
-	else if (dbus_message_is_method_call(m_pServletInfo->m_pRequest, "de.berlios.Pinot", "SimpleQuery") == TRUE)
+	else if (dbus_message_is_method_call(m_pServletInfo->m_pRequest, PINOT_DBUS_SERVICE_NAME, "SimpleQuery") == TRUE)
 	{
 		char *pSearchText = NULL;
 		dbus_uint32_t maxHits = 0;
@@ -1008,12 +1045,12 @@
 
 			if (replyWithError == true)
 			{
-				m_pServletInfo->newErrorReply("de.berlios.Pinot.SimpleQuery",
+				m_pServletInfo->newErrorReply("SimpleQuery",
 					"Query failed");
 			}
 		}
 	}
-	else if (dbus_message_is_method_call(m_pServletInfo->m_pRequest, "de.berlios.Pinot", "UpdateDocument") == TRUE)
+	else if (dbus_message_is_method_call(m_pServletInfo->m_pRequest, PINOT_DBUS_SERVICE_NAME, "UpdateDocument") == TRUE)
 	{
 		unsigned int docId = 0;
 
@@ -1095,8 +1132,7 @@
 	// Flush the index ?
 	if (flushIndex == true)
 	{
-		// Flush now for the sake of the client application
-		pIndex->flush();
+		flushIndexAndSignal(pIndex);
 	}
 
 	delete pIndex;

Modified: trunk/Core/ServerThreads.h
===================================================================
--- trunk/Core/ServerThreads.h	2009-05-24 09:25:15 UTC (rev 1635)
+++ trunk/Core/ServerThreads.h	2009-05-30 04:13:19 UTC (rev 1636)
@@ -27,6 +27,10 @@
 
 #include "DocumentInfo.h"
 #include "CrawlHistory.h"
+#include "IndexInterface.h"
+#ifdef HAVE_DBUS
+#include "DBusIndex.h"
+#endif
 #include "MonitorInterface.h"
 #include "MonitorHandler.h"
 #include "QueryProperties.h"
@@ -78,6 +82,10 @@
 		DBusServletThread(DaemonState *pServer, DBusServletInfo *pInfo);
 		virtual ~DBusServletThread();
 
+		static DBusGConnection *m_pBus;
+
+		static void flushIndexAndSignal(IndexInterface *pIndex);
+
 		virtual std::string getType(void) const;
 
 		DBusServletInfo *getServletInfo(void) const;

Modified: trunk/Core/pinot-dbus-daemon.cpp
===================================================================
--- trunk/Core/pinot-dbus-daemon.cpp	2009-05-24 09:25:15 UTC (rev 1635)
+++ trunk/Core/pinot-dbus-daemon.cpp	2009-05-30 04:13:19 UTC (rev 1636)
@@ -73,8 +73,6 @@
 	{"version", 0, 0, 'v'},
 	{0, 0, 0, 0}
 };
-static const char *g_pinotDBusService = "de.berlios.Pinot";
-static const char *g_pinotDBusObjectPath = "/de/berlios/Pinot";
 static void unregisteredHandler(DBusConnection *pConnection, void *pData);
 static DBusHandlerResult messageHandler(DBusConnection *pConnection, DBusMessage *pMessage, void *pData);
 static DBusObjectPathVTable g_callVTable = {
@@ -199,6 +197,8 @@
 			}
 		}
 		dbus_error_free(&error);
+
+		return DBUS_HANDLER_RESULT_HANDLED;
 	}
 
 	return DBUS_HANDLER_RESULT_NOT_YET_HANDLED;
@@ -232,12 +232,12 @@
 	return DBUS_HANDLER_RESULT_HANDLED;
 }
 
-static bool getBatteryState(DBusGConnection *pBus, const string &name, const string &path,
+static bool getBatteryState(const string &name, const string &path,
 	const string &method, gboolean &result)
 {
 	bool callSuccess = true;
 
-	if ((pBus == NULL) ||
+	if ((DBusServletThread::m_pBus == NULL) ||
 		(name.empty() == true) ||
 		(path.empty() == true) ||
 		(method.empty() == true))
@@ -245,7 +245,7 @@
 		return false;
 	}
 
-	DBusGProxy *pBusProxy = dbus_g_proxy_new_for_name(pBus, name.c_str(),
+	DBusGProxy *pBusProxy = dbus_g_proxy_new_for_name(DBusServletThread::m_pBus, name.c_str(),
 		path.c_str(), name.c_str());
 	if (pBusProxy == NULL)
 	{
@@ -538,8 +538,8 @@
 #endif
 
 	GError *pError = NULL;
-	DBusGConnection *pBus = dbus_g_bus_get(DBUS_BUS_SESSION, &pError);
-	if (pBus == NULL)
+	DBusServletThread::m_pBus = dbus_g_bus_get(DBUS_BUS_SESSION, &pError);
+	if (DBusServletThread::m_pBus == NULL)
 	{
 		if (pError != NULL)
 		{
@@ -554,7 +554,7 @@
 		return EXIT_FAILURE;
 	}
 
-	DBusConnection *pConnection = dbus_g_connection_get_connection(pBus);
+	DBusConnection *pConnection = dbus_g_connection_get_connection(DBusServletThread::m_pBus);
 	if (pConnection == NULL)
 	{
 		cerr << "Couldn't get connection" << endl;
@@ -569,12 +569,12 @@
 	dbus_connection_set_exit_on_disconnect(pConnection, FALSE);
 	dbus_connection_setup_with_g_main(pConnection, NULL);
 
-	if (dbus_connection_register_object_path(pConnection, g_pinotDBusObjectPath,
+	if (dbus_connection_register_object_path(pConnection, PINOT_DBUS_OBJECT_PATH,
 		&g_callVTable, &server) == TRUE)
 	{
 		// Request to be identified by this name
 		// FIXME: flags are currently broken ?
-		dbus_bus_request_name(pConnection, g_pinotDBusService, 0, &error);
+		dbus_bus_request_name(pConnection, PINOT_DBUS_SERVICE_NAME, 0, &error);
 		if (dbus_error_is_set(&error) == FALSE)
 		{
 			// See power management signals
@@ -588,7 +588,7 @@
 		}
 		else
 		{
-			cerr << "Couldn't obtain name " << g_pinotDBusService << endl;
+			cerr << "Couldn't obtain name " << PINOT_DBUS_SERVICE_NAME << endl;
 			if (error.message != NULL)
 			{
 				cerr << "Error is " << error.message << endl;
@@ -681,9 +681,9 @@
 
 			// Try and get the battery state
 			gboolean result = FALSE;
-			if ((getBatteryState(pBus, "org.freedesktop.PowerManagement",
+			if ((getBatteryState("org.freedesktop.PowerManagement",
 				"/org/freedesktop/PowerManagement", "GetOnBattery", result) == true) ||
-				(getBatteryState(pBus, "org.freedesktop.PowerManagement",
+				(getBatteryState("org.freedesktop.PowerManagement",
 				"/org/freedesktop/PowerManagement", "GetBatteryState", result) == true))
 			{
 				if (result == TRUE)
@@ -691,7 +691,7 @@
 					onBattery = true;
 				}
 			}
-			else if (getBatteryState(pBus, "org.gnome.PowerManager",
+			else if (getBatteryState("org.gnome.PowerManager",
 				"/org/gnome/PowerManager", "GetOnAc", result) == true)
 			{
 				if (result == FALSE)

Modified: trunk/Core/pinot-dbus-daemon.xml
===================================================================
--- trunk/Core/pinot-dbus-daemon.xml	2009-05-24 09:25:15 UTC (rev 1635)
+++ trunk/Core/pinot-dbus-daemon.xml	2009-05-30 04:13:19 UTC (rev 1636)
@@ -9,6 +9,10 @@
 	WARNING: This interface WILL change before 1.0 is released !
 	-->
   <interface name="de.berlios.Pinot">
+    <signal name="IndexFlushed">
+      <annotation name="de.berlios.Pinot.IndexFlushed" value="pinotDBus"/>
+      <arg type="u" name="docsCount" direction="out"/>
+    </signal>
     <!--
 	Retrieves statistics.
 	 crawledCount: the number of documents crawled



From fabricecolin at mail.berlios.de  Sat May 30 06:15:14 2009
From: fabricecolin at mail.berlios.de (fabricecolin at mail.berlios.de)
Date: Sat, 30 May 2009 06:15:14 +0200
Subject: [Pinot-svn] r1637 - trunk/IndexSearch/Xapian
Message-ID: <200905300415.n4U4FEAw023557@sheep.berlios.de>

Author: fabricecolin
Date: 2009-05-30 06:15:05 +0200 (Sat, 30 May 2009)
New Revision: 1637

Modified:
   trunk/IndexSearch/Xapian/XapianDatabase.cpp
   trunk/IndexSearch/Xapian/XapianIndex.cpp
Log:
XapianIndex::reopen() didn't actually reopen anything.
Removed obsolete comment in XapianDatabase.


Modified: trunk/IndexSearch/Xapian/XapianDatabase.cpp
===================================================================
--- trunk/IndexSearch/Xapian/XapianDatabase.cpp	2009-05-30 04:13:19 UTC (rev 1636)
+++ trunk/IndexSearch/Xapian/XapianDatabase.cpp	2009-05-30 04:15:05 UTC (rev 1637)
@@ -406,7 +406,6 @@
 void XapianDatabase::reopen(void)
 {
 	// This is provided by Xapian::Database
-	// FIXME: get the write lock to make sure read operations are not in progress ?
 	if (pthread_mutex_lock(&m_rwLock) == 0)
 	{
 		if (m_pDatabase != NULL)

Modified: trunk/IndexSearch/Xapian/XapianIndex.cpp
===================================================================
--- trunk/IndexSearch/Xapian/XapianIndex.cpp	2009-05-30 04:13:19 UTC (rev 1636)
+++ trunk/IndexSearch/Xapian/XapianIndex.cpp	2009-05-30 04:15:05 UTC (rev 1637)
@@ -2041,6 +2041,7 @@
 		cerr << "Couldn't get index " << m_databaseName << endl;
 		return false;
 	}
+	pDatabase->reopen();
 
 	return true;
 }



From fabricecolin at mail.berlios.de  Sat May 30 06:15:53 2009
From: fabricecolin at mail.berlios.de (fabricecolin at mail.berlios.de)
Date: Sat, 30 May 2009 06:15:53 +0200
Subject: [Pinot-svn] r1638 - trunk/Core
Message-ID: <200905300415.n4U4Frab023584@sheep.berlios.de>

Author: fabricecolin
Date: 2009-05-30 06:15:47 +0200 (Sat, 30 May 2009)
New Revision: 1638

Modified:
   trunk/Core/pinot-index.cpp
   trunk/Core/pinot-search.cpp
Log:
Display the full URLs with ipath.


Modified: trunk/Core/pinot-index.cpp
===================================================================
--- trunk/Core/pinot-index.cpp	2009-05-30 04:15:05 UTC (rev 1637)
+++ trunk/Core/pinot-index.cpp	2009-05-30 04:15:47 UTC (rev 1638)
@@ -449,7 +449,7 @@
 
 			if (pIndex->getDocumentInfo(docId, docInfo) == true)
 			{
-				cout << "Location : '" << docInfo.getLocation() << "'" << endl;
+				cout << "Location : '" << docInfo.getLocation(true) << "'" << endl;
 				cout << "Title    : " << docInfo.getTitle() << endl;
 				cout << "Type     : " << docInfo.getType() << endl;
 				cout << "Language : " << docInfo.getLanguage() << endl;

Modified: trunk/Core/pinot-search.cpp
===================================================================
--- trunk/Core/pinot-search.cpp	2009-05-30 04:15:05 UTC (rev 1637)
+++ trunk/Core/pinot-search.cpp	2009-05-30 04:15:47 UTC (rev 1638)
@@ -356,7 +356,7 @@
 				vector<DocumentInfo>::const_iterator resultIter = resultsList.begin();
 				while (resultIter != resultsList.end())
 				{
-					string rawUrl(resultIter->getLocation());
+					string rawUrl(resultIter->getLocation(true));
 
 					if (locationOnly == false)
 					{



From fabricecolin at mail.berlios.de  Sat May 30 06:39:48 2009
From: fabricecolin at mail.berlios.de (fabricecolin at mail.berlios.de)
Date: Sat, 30 May 2009 06:39:48 +0200
Subject: [Pinot-svn] r1639 - trunk/UI/GTK2/src
Message-ID: <200905300439.n4U4dmv2000960@sheep.berlios.de>

Author: fabricecolin
Date: 2009-05-30 06:39:25 +0200 (Sat, 30 May 2009)
New Revision: 1639

Modified:
   trunk/UI/GTK2/src/pinot.cc
Log:
Expect am IndexFlushed signal from the daemon upon which the index should be
reopened.


Modified: trunk/UI/GTK2/src/pinot.cc
===================================================================
--- trunk/UI/GTK2/src/pinot.cc	2009-05-30 04:15:47 UTC (rev 1638)
+++ trunk/UI/GTK2/src/pinot.cc	2009-05-30 04:39:25 UTC (rev 1639)
@@ -30,17 +30,6 @@
 #include <glibmm/miscutils.h>
 #include <glibmm/convert.h>
 #include "config.h"
-#ifdef HAVE_DBUS
-extern "C"
-{
-#if DBUS_NUM_VERSION < 1000000
-#define DBUS_API_SUBJECT_TO_CHANGE
-#endif
-#include <dbus/dbus.h>
-#include <dbus/dbus-glib.h>
-#include <dbus/dbus-glib-lowlevel.h>
-}
-#endif
 #include <gtkmm/main.h>
 
 #include "NLS.h"
@@ -52,6 +41,9 @@
 #include "QueryHistory.h"
 #include "ViewHistory.h"
 #include "DownloaderInterface.h"
+#ifdef HAVE_DBUS
+#include "DBusIndex.h"
+#endif
 #include "PinotSettings.h"
 #include "mainWindow.hh"
 #include "prefsWindow.hh"
@@ -97,6 +89,59 @@
 	Gtk::Main::quit();
 }
 
+static DBusHandlerResult filterHandler(DBusConnection *pConnection, DBusMessage *pMessage, void *pData)
+{
+	// Are we about to be disconnected ?
+	if (dbus_message_is_signal(pMessage, DBUS_INTERFACE_LOCAL, "Disconnected") == TRUE)
+	{
+#ifdef DEBUG
+		cout << "filterHandler: received Disconnected" << endl;
+#endif
+	}
+	else if (dbus_message_is_signal(pMessage, DBUS_INTERFACE_DBUS, "NameOwnerChanged") == TRUE)
+	{
+#ifdef DEBUG
+		cout << "filterHandler: received NameOwnerChanged" << endl;
+#endif
+	}
+	else if (dbus_message_is_signal(pMessage, PINOT_DBUS_SERVICE_NAME, "IndexFlushed") == TRUE)
+	{
+		DBusError error;
+		gboolean onBattery = FALSE;
+		unsigned int docsCount = 0;
+
+#ifdef DEBUG
+		cout << "filterHandler: received IndexFlushed" << endl;
+#endif
+		dbus_error_init(&error);
+		if ((dbus_message_get_args(pMessage, &error,
+			DBUS_TYPE_UINT32, &docsCount,
+			DBUS_TYPE_INVALID) == TRUE))
+		{
+			PinotSettings &settings = PinotSettings::getInstance();
+
+#ifdef DEBUG
+			cout << "filterHandler: reopening index, now with " << docsCount << " documents" << endl;
+#endif
+			IndexInterface *pIndex = settings.getIndex(settings.m_daemonIndexLocation);
+			if (pIndex != NULL)
+			{
+				pIndex->reopen();
+
+				delete pIndex;
+			}
+#ifdef DEBUG
+			cout << "filterHandler: reopened index" << endl;
+#endif
+		}
+		dbus_error_free(&error);
+
+		return DBUS_HANDLER_RESULT_HANDLED;
+	}
+
+	return DBUS_HANDLER_RESULT_NOT_YET_HANDLED;
+}
+
 int main(int argc, char **argv)
 {
 	string prefixDir(PREFIX);
@@ -336,6 +381,48 @@
 
 	if (prefsMode == false)
 	{
+		GError *pError = NULL;
+		DBusGConnection *pBus = dbus_g_bus_get(DBUS_BUS_SESSION, &pError);
+		DBusConnection *pConnection = NULL;
+
+		if (pBus == NULL)
+		{
+			if (pError != NULL)
+			{
+				cerr << "Couldn't open bus connection: " << pError->message << endl;
+				if (pError->message != NULL)
+				{
+					cerr << "Error is " << pError->message << endl;
+				}
+				g_error_free(pError);
+			}
+		}
+		else
+		{
+			pConnection = dbus_g_connection_get_connection(pBus);
+		}
+
+		if (pConnection != NULL)
+		{
+			DBusError error;
+
+			dbus_error_init(&error);
+			dbus_connection_set_exit_on_disconnect(pConnection, FALSE);
+			dbus_connection_setup_with_g_main(pConnection, NULL);
+
+			string rule("type='signal',interface='");
+			rule += PINOT_DBUS_SERVICE_NAME;
+			rule += "'";
+
+			// See signals coming from the daemon
+			dbus_bus_add_match(pConnection, rule.c_str(), &error);
+
+			dbus_connection_add_filter(pConnection,
+				(DBusHandleMessageFunction)filterHandler, NULL, NULL);
+
+			dbus_error_free(&error);
+		}
+
 		IndexInterface *pIndex = settings.getIndex(settings.m_docsIndexLocation);
 		if (pIndex != NULL)
 		{



From fabricecolin at mail.berlios.de  Sun May 31 08:07:17 2009
From: fabricecolin at mail.berlios.de (fabricecolin at mail.berlios.de)
Date: Sun, 31 May 2009 08:07:17 +0200
Subject: [Pinot-svn] r1640 - trunk/Tokenize
Message-ID: <200905310607.n4V67HFD032249@sheep.berlios.de>

Author: fabricecolin
Date: 2009-05-31 08:07:05 +0200 (Sun, 31 May 2009)
New Revision: 1640

Modified:
   trunk/Tokenize/FilterUtils.cpp
Log:
Filters that return file names as titles (eg those that deal with archives) may
set mimetype to SCANTITLE. The content type is then checked with
MIMEScanner::scanFile(), with scanData() as fall-back.
Odddly enough, this gives more accurate results for types like tar.gz : instead
of being identified as application/x-gzip, they are identified as
application/x-compressed-tar just like they would if they were regular files.


Modified: trunk/Tokenize/FilterUtils.cpp
===================================================================
--- trunk/Tokenize/FilterUtils.cpp	2009-05-30 04:39:25 UTC (rev 1639)
+++ trunk/Tokenize/FilterUtils.cpp	2009-05-31 06:07:05 UTC (rev 1640)
@@ -304,7 +304,7 @@
 {
 	string charset, uri, ipath;
 	off_t size = 0;
-	bool checkType = false;
+	bool checkDataType = false, checkFileType = false;
 
 	if (pFilter == NULL)
 	{
@@ -338,8 +338,12 @@
 
 			if (mimeType == "scan")
 			{
-				checkType = true;
+				checkDataType = true;
 			}
+			else if (mimeType == "scantitle")
+			{
+				checkFileType = true;
+			}
 			else
 			{
 				doc.setType(mimeType);
@@ -389,14 +393,42 @@
 #endif
 	}
 
+	// Content and title may have to be converted
 	TextConverter converter(20);
 
-	// Content and title may have to be converted
+	map<string, string>::const_iterator contentIter = metaData.find("title");
+	if ((contentIter != metaData.end()) &&
+		(contentIter->second.empty() == false))
+	{
+		dstring nonUTF8Title(contentIter->second.c_str(), contentIter->second.length());
+
+		dstring utf8Data(converter.toUTF8(nonUTF8Title, charset));
+
+		doc.setTitle(string(utf8Data.c_str(), utf8Data.length()));
+	}
+
 	const dstring &content = pFilter->get_content();
 	if (content.empty() == false)
 	{
-		if (checkType == true)
+		// Scan for the MIME type ?
+		if (checkFileType == true)
 		{
+			// Assume the title is actually a file name
+			string mimeType(MIMEScanner::scanFile(doc.getTitle()));
+
+			if ((mimeType.empty() == true) ||
+				(mimeType == "application/octet-stream"))
+			{
+				// Revert to scanning the content 
+				checkDataType = true;
+			}
+			else
+			{
+				doc.setType(mimeType);
+			}
+		}
+		if (checkDataType == true)
+		{
 			doc.setType(MIMEScanner::scanData(content.c_str(), content.length()));
 		}
 
@@ -415,17 +447,7 @@
 			doc.setData(content.c_str(), content.length());
 		}
 	}
-	map<string, string>::const_iterator contentIter = metaData.find("title");
-	if ((contentIter != metaData.end()) &&
-		(contentIter->second.empty() == false))
-	{
-		dstring title(contentIter->second.c_str(), contentIter->second.length());
 
-		dstring utf8Data(converter.toUTF8(title, charset));
-
-		doc.setTitle(string(utf8Data.c_str(), utf8Data.length()));
-	}
-
 	// If the document is big'ish, try and reclaim memory
 	int inUse = Memory::getUsage();
 	if ((size > SIZE_THRESHOLD) ||



