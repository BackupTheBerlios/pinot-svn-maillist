From fabricecolin at mail.berlios.de  Sat Sep 19 06:46:41 2009
From: fabricecolin at mail.berlios.de (fabricecolin at mail.berlios.de)
Date: Sat, 19 Sep 2009 06:46:41 +0200
Subject: [Pinot-svn] r1671 - in trunk: Core UI/GTK2/src
Message-ID: <200909190446.n8J4kfuP029395@sheep.berlios.de>

Author: fabricecolin
Date: 2009-09-19 06:45:58 +0200 (Sat, 19 Sep 2009)
New Revision: 1671

Added:
   trunk/UI/GTK2/src/PinotUtils.cc
   trunk/UI/GTK2/src/PinotUtils.hh
Removed:
   trunk/Core/PinotUtils.cpp
   trunk/Core/PinotUtils.h
Modified:
   trunk/UI/GTK2/src/EnginesTree.cc
   trunk/UI/GTK2/src/IndexPage.cc
   trunk/UI/GTK2/src/Makefile.am
   trunk/UI/GTK2/src/Notebook.cc
   trunk/UI/GTK2/src/ResultsTree.cc
   trunk/UI/GTK2/src/importDialog.cc
   trunk/UI/GTK2/src/indexDialog.cc
   trunk/UI/GTK2/src/launcherDialog.cc
   trunk/UI/GTK2/src/mainWindow.cc
   trunk/UI/GTK2/src/prefsWindow.cc
   trunk/UI/GTK2/src/propertiesDialog.cc
   trunk/UI/GTK2/src/queryDialog.cc
   trunk/UI/GTK2/src/statisticsDialog.cc
Log:
Moved PinotUtils out of Core.


Deleted: trunk/Core/PinotUtils.cpp
===================================================================
--- trunk/Core/PinotUtils.cpp	2009-08-30 01:07:46 UTC (rev 1670)
+++ trunk/Core/PinotUtils.cpp	2009-09-19 04:45:58 UTC (rev 1671)
@@ -1,272 +0,0 @@
-/*
- *  Copyright 2005-2009 Fabrice Colin
- *
- *  This program is free software; you can redistribute it and/or modify
- *  it under the terms of the GNU General Public License as published by
- *  the Free Software Foundation; either version 2 of the License, or
- *  (at your option) any later version.
- *
- *  This program is distributed in the hope that it will be useful,
- *  but WITHOUT ANY WARRANTY; without even the implied warranty of
- *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- *  GNU General Public License for more details.
- *
- *  You should have received a copy of the GNU General Public License
- *  along with this program; if not, write to the Free Software
- *  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
- */
-
-#include <iostream>
-#include <gtkmm/stock.h>
-
-#include "config.h"
-#include "NLS.h"
-#include "Url.h"
-#include "PinotSettings.h"
-#include "PinotUtils.h"
-
-using namespace std;
-using namespace Glib;
-using namespace Gtk;
-
-/// Open a FileChooserDialog.
-bool select_file_name(const ustring &title, ustring &location,
-	bool openOrCreate, bool directoriesOnly)
-{
-	FileChooserDialog fileChooser(title);
-
-	if (title.empty() == true)
-	{
-		return false;
-	}
-
-	prepare_file_chooser(fileChooser, location, openOrCreate, directoriesOnly);
-	fileChooser.show();
-
-	int result = fileChooser.run();
-	if (result == RESPONSE_OK)
-	{
-		// Retrieve the chosen location
-		if (directoriesOnly == false)
-		{
-			location = filename_to_utf8(fileChooser.get_filename());
-		}
-		else
-		{
-			location = filename_to_utf8(fileChooser.get_current_folder());
-		}
-
-		return true;
-	}
-
-	return false;
-}
-
-bool prepare_file_chooser(FileChooserDialog &fileChooser, ustring &location,
-	bool openOrCreate, bool directoriesOnly)
-{
-	FileChooserAction chooserAction = FILE_CHOOSER_ACTION_OPEN;
-	StockID okButtonStockId = Stock::OPEN;
-	bool isDirectory = false;
-
-	if (openOrCreate == false)
-	{
-		okButtonStockId = Stock::SAVE;
-		fileChooser.set_do_overwrite_confirmation(true);
-	}
-
-	// Have we been provided with an initial location ?
-	if (location.empty() == true)
-	{
-		// No, get the location of the home directory then
-		location = PinotSettings::getInstance().getHomeDirectory();
-		isDirectory = true;
-	}
-
-	if (directoriesOnly == false)
-	{
-		if (openOrCreate == true)
-		{
-			chooserAction = FILE_CHOOSER_ACTION_OPEN;
-		}
-		else
-		{
-			chooserAction = FILE_CHOOSER_ACTION_SAVE;
-		}
-	}
-	else
-	{
-		if (openOrCreate == true)
-		{
-			chooserAction = FILE_CHOOSER_ACTION_SELECT_FOLDER;
-		}
-		else
-		{
-			chooserAction = FILE_CHOOSER_ACTION_CREATE_FOLDER;
-		}
-		isDirectory = true;
-	}
-
-	fileChooser.set_action(chooserAction);
-	Url urlObj(location);
-	fileChooser.set_current_folder(filename_from_utf8(urlObj.getLocation()));
-	if (isDirectory == false)
-	{
-		fileChooser.set_current_name(filename_from_utf8(urlObj.getFile()));
-	}
-	fileChooser.set_local_only();
-	fileChooser.set_select_multiple(false);
-	fileChooser.add_button(Stock::CANCEL, RESPONSE_CANCEL);
-	fileChooser.add_button(okButtonStockId, RESPONSE_OK);
-	fileChooser.set_show_hidden(true);
-
-	return true;
-}
-
-/// Get a column height.
-int get_column_height(TreeView *pTree)
-{
-	int height = 0;
-
-	if (pTree == NULL)
-	{
-		return 0;
-	}
-
-	TreeViewColumn *pColumn = pTree->get_column(1);
-	if (pColumn != NULL)
-	{
-		Gdk::Rectangle cellArea;
-		int xOffset, yOffset, cellWidth, cellHeight;
-
-		pColumn->cell_get_size(cellArea, xOffset, yOffset, cellWidth, cellHeight);
-		height += cellHeight;
-#ifdef DEBUG
-		cout << "get_column_height: cell " << cellHeight << " " << yOffset << endl;
-#endif
-	}
-#ifdef DEBUG
-	cout << "get_column_height: " << height << endl;
-#endif
-
-	return height;
-}
-
-/// Create a text column.
-TreeViewColumn *create_column(const ustring &title, const TreeModelColumnBase& modelColumn,
-	bool isResizable, bool isSortable, const TreeModelColumnBase &sortColumn)
-{
-	TreeViewColumn *pColumn = new TreeViewColumn(title);
-
-	CellRendererText *pTextRenderer = new CellRendererText();
-	pColumn->pack_start(*manage(pTextRenderer));
-	pColumn->add_attribute(pTextRenderer->property_text(), modelColumn);
-	pColumn->set_resizable(isResizable);
-	if (isSortable == true)
-	{
-		pColumn->set_sort_column(sortColumn);
-	}
-
-	return pColumn;
-}
-
-/// Create an icon and text column, rendered by renderTextAndIconCell.
-TreeViewColumn *create_column_with_icon(const ustring &title, const TreeModelColumnBase& modelColumn,
-	const TreeViewColumn::SlotCellData &renderTextAndIconCell,
-	bool isResizable, bool isSortable, const TreeModelColumnBase &sortColumn)
-{
-	TreeViewColumn *pColumn = new TreeViewColumn(title);
-
-	// Pack an icon renderer in the column
-	CellRendererPixbuf *pIconRenderer = new CellRendererPixbuf();
-	pColumn->pack_start(*manage(pIconRenderer), false);
-	pColumn->set_cell_data_func(*pIconRenderer, renderTextAndIconCell);
-	// ...followed by a text renderer
-	CellRendererText *pTextRenderer = new CellRendererText();
-	pColumn->pack_start(*manage(pTextRenderer));
-	pColumn->set_cell_data_func(*pTextRenderer, renderTextAndIconCell);
-
-	pColumn->add_attribute(pTextRenderer->property_text(), modelColumn);
-	pColumn->set_resizable(isResizable);
-	if (isSortable == true)
-	{
-		pColumn->set_sort_column(sortColumn);
-	}
-
-	return pColumn;
-}
-
-/// Converts to UTF-8.
-ustring to_utf8(const string &text)
-{
-	std::string charset;
-
-	// Get the locale charset
-	get_charset(charset);
-	// Call overload
-	return to_utf8(text, charset);
-}
-
-/// Converts from the given charset to UTF-8.
-ustring to_utf8(const string &text, const string &charset)
-{
-	if ((charset == "UTF-8") ||
-		(charset == "utf-8"))
-	{
-		// No conversion necessary
-		return text;
-	}
-
-	try
-	{
-		if (charset.empty() == false)
-		{
-			return convert_with_fallback(text, "UTF-8", charset, " ");
-		}
-		else
-		{
-			return locale_to_utf8(text);
-		}
-	}
-	catch (Error &ce)
-	{
-#ifdef DEBUG
-		cout << "to_utf8: cannot convert from " << charset << ": " << ce.what() << endl;
-#endif
-		if (charset.empty() == false)
-		{
-			return to_utf8(text);
-		}
-	}
-	catch (...)
-	{
-#ifdef DEBUG
-		cout << "to_utf8: unknown exception" << endl;
-#endif
-	}
-
-	return "";
-}
-
-/// Converts from UTF-8.
-string from_utf8(const ustring &text)
-{
-	try
-	{
-		return locale_from_utf8(text);
-	}
-	catch (Error &ce)
-	{
-#ifdef DEBUG
-		cout << "from_utf8: " << ce.what() << endl;
-#endif
-	}
-	catch (...)
-	{
-#ifdef DEBUG
-		cout << "from_utf8: unknown exception" << endl;
-#endif
-	}
-
-	return "";
-}

Deleted: trunk/Core/PinotUtils.h
===================================================================
--- trunk/Core/PinotUtils.h	2009-08-30 01:07:46 UTC (rev 1670)
+++ trunk/Core/PinotUtils.h	2009-09-19 04:45:58 UTC (rev 1671)
@@ -1,62 +0,0 @@
-/*
- *  Copyright 2005,2006 Fabrice Colin
- *
- *  This program is free software; you can redistribute it and/or modify
- *  it under the terms of the GNU General Public License as published by
- *  the Free Software Foundation; either version 2 of the License, or
- *  (at your option) any later version.
- *
- *  This program is distributed in the hope that it will be useful,
- *  but WITHOUT ANY WARRANTY; without even the implied warranty of
- *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- *  GNU General Public License for more details.
- *
- *  You should have received a copy of the GNU General Public License
- *  along with this program; if not, write to the Free Software
- *  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
- */
- 
-#ifndef _PINOTUTILS_HH
-#define _PINOTUTILS_HH
-
-#include <string>
-#include <gtkmmconfig.h>
-#include <glibmm/ustring.h>
-#include <gtkmm/window.h>
-#include <gtkmm/filechooserdialog.h>
-#include <gtkmm/treeview.h>
-#include <gtkmm/treemodel.h>
-#include <gtkmm/filechooserdialog.h>
-
-/// Open a FileChooserDialog.
-bool select_file_name(const Glib::ustring &title, Glib::ustring &location,
-	bool openOrCreate, bool directoriesOnly = false);
-
-/// Prepare a FileChooserDialog.
-bool prepare_file_chooser(Gtk::FileChooserDialog &fileChooser, Glib::ustring &location,
-	bool openOrCreate, bool directoriesOnly = false);
-
-/// Get a column height.
-int get_column_height(Gtk::TreeView *pTree);
-
-/// Create a text column.
-Gtk::TreeViewColumn *create_column(const Glib::ustring &title,
-	const Gtk::TreeModelColumnBase& modelColumn,
-	bool isResizable, bool isSortable, const Gtk::TreeModelColumnBase &sortColumn);
-
-/// Create an icon and text column, rendered by renderTextAndIconCell.
-Gtk::TreeViewColumn *create_column_with_icon(const Glib::ustring &title,
-	const Gtk::TreeModelColumnBase& modelColumn,
-	const Gtk::TreeViewColumn::SlotCellData &renderTextAndIconCell,
-	bool isResizable, bool isSortable, const Gtk::TreeModelColumnBase &sortColumn);
-
-/// Converts to UTF-8.
-Glib::ustring to_utf8(const std::string &text);
-
-/// Converts from the given charset to UTF-8.
-Glib::ustring to_utf8(const std::string &text, const std::string &charset);
-
-/// Converts from UTF-8.
-std::string from_utf8(const Glib::ustring &text);
-
-#endif // _PINOTUTILS_HH

Modified: trunk/UI/GTK2/src/EnginesTree.cc
===================================================================
--- trunk/UI/GTK2/src/EnginesTree.cc	2009-08-30 01:07:46 UTC (rev 1670)
+++ trunk/UI/GTK2/src/EnginesTree.cc	2009-09-19 04:45:58 UTC (rev 1671)
@@ -30,7 +30,7 @@
 #include "NLS.h"
 #include "ModuleFactory.h"
 #include "PinotSettings.h"
-#include "PinotUtils.h"
+#include "PinotUtils.hh"
 #include "EnginesTree.hh"
 
 using namespace std;

Modified: trunk/UI/GTK2/src/IndexPage.cc
===================================================================
--- trunk/UI/GTK2/src/IndexPage.cc	2009-08-30 01:07:46 UTC (rev 1670)
+++ trunk/UI/GTK2/src/IndexPage.cc	2009-09-19 04:45:58 UTC (rev 1671)
@@ -1,5 +1,5 @@
 /*
- *  Copyright 2005,2006 Fabrice Colin
+ *  Copyright 2005-2009 Fabrice Colin
  *
  *  This program is free software; you can redistribute it and/or modify
  *  it under the terms of the GNU General Public License as published by
@@ -25,7 +25,7 @@
 #include "config.h"
 #include "NLS.h"
 #include "PinotSettings.h"
-#include "PinotUtils.h"
+#include "PinotUtils.hh"
 #include "IndexPage.hh"
 
 using namespace std;

Modified: trunk/UI/GTK2/src/Makefile.am
===================================================================
--- trunk/UI/GTK2/src/Makefile.am	2009-08-30 01:07:46 UTC (rev 1670)
+++ trunk/UI/GTK2/src/Makefile.am	2009-09-19 04:45:58 UTC (rev 1671)
@@ -21,6 +21,7 @@
 	IndexPage.hh \
 	ModelColumns.hh \
 	Notebook.hh \
+	PinotUtils.hh \
 	ResultsTree.hh \
 	UIThreads.hh
 
@@ -46,6 +47,7 @@
 	IndexPage.cc \
 	ModelColumns.cc \
 	Notebook.cc \
+	PinotUtils.cc \
 	ResultsTree.cc \
 	UIThreads.cc
 

Modified: trunk/UI/GTK2/src/Notebook.cc
===================================================================
--- trunk/UI/GTK2/src/Notebook.cc	2009-08-30 01:07:46 UTC (rev 1670)
+++ trunk/UI/GTK2/src/Notebook.cc	2009-09-19 04:45:58 UTC (rev 1671)
@@ -21,7 +21,7 @@
 
 #include "config.h"
 #include "NLS.h"
-#include "PinotUtils.h"
+#include "PinotUtils.hh"
 #include "Notebook.hh"
 
 using namespace std;

Copied: trunk/UI/GTK2/src/PinotUtils.cc (from rev 1665, trunk/Core/PinotUtils.cpp)
===================================================================
--- trunk/Core/PinotUtils.cpp	2009-08-15 10:11:22 UTC (rev 1665)
+++ trunk/UI/GTK2/src/PinotUtils.cc	2009-09-19 04:45:58 UTC (rev 1671)
@@ -0,0 +1,272 @@
+/*
+ *  Copyright 2005-2009 Fabrice Colin
+ *
+ *  This program is free software; you can redistribute it and/or modify
+ *  it under the terms of the GNU General Public License as published by
+ *  the Free Software Foundation; either version 2 of the License, or
+ *  (at your option) any later version.
+ *
+ *  This program is distributed in the hope that it will be useful,
+ *  but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ *  GNU General Public License for more details.
+ *
+ *  You should have received a copy of the GNU General Public License
+ *  along with this program; if not, write to the Free Software
+ *  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
+ */
+
+#include <iostream>
+#include <gtkmm/stock.h>
+
+#include "config.h"
+#include "NLS.h"
+#include "Url.h"
+#include "PinotSettings.h"
+#include "PinotUtils.hh"
+
+using namespace std;
+using namespace Glib;
+using namespace Gtk;
+
+/// Open a FileChooserDialog.
+bool select_file_name(const ustring &title, ustring &location,
+	bool openOrCreate, bool directoriesOnly)
+{
+	FileChooserDialog fileChooser(title);
+
+	if (title.empty() == true)
+	{
+		return false;
+	}
+
+	prepare_file_chooser(fileChooser, location, openOrCreate, directoriesOnly);
+	fileChooser.show();
+
+	int result = fileChooser.run();
+	if (result == RESPONSE_OK)
+	{
+		// Retrieve the chosen location
+		if (directoriesOnly == false)
+		{
+			location = filename_to_utf8(fileChooser.get_filename());
+		}
+		else
+		{
+			location = filename_to_utf8(fileChooser.get_current_folder());
+		}
+
+		return true;
+	}
+
+	return false;
+}
+
+bool prepare_file_chooser(FileChooserDialog &fileChooser, ustring &location,
+	bool openOrCreate, bool directoriesOnly)
+{
+	FileChooserAction chooserAction = FILE_CHOOSER_ACTION_OPEN;
+	StockID okButtonStockId = Stock::OPEN;
+	bool isDirectory = false;
+
+	if (openOrCreate == false)
+	{
+		okButtonStockId = Stock::SAVE;
+		fileChooser.set_do_overwrite_confirmation(true);
+	}
+
+	// Have we been provided with an initial location ?
+	if (location.empty() == true)
+	{
+		// No, get the location of the home directory then
+		location = PinotSettings::getInstance().getHomeDirectory();
+		isDirectory = true;
+	}
+
+	if (directoriesOnly == false)
+	{
+		if (openOrCreate == true)
+		{
+			chooserAction = FILE_CHOOSER_ACTION_OPEN;
+		}
+		else
+		{
+			chooserAction = FILE_CHOOSER_ACTION_SAVE;
+		}
+	}
+	else
+	{
+		if (openOrCreate == true)
+		{
+			chooserAction = FILE_CHOOSER_ACTION_SELECT_FOLDER;
+		}
+		else
+		{
+			chooserAction = FILE_CHOOSER_ACTION_CREATE_FOLDER;
+		}
+		isDirectory = true;
+	}
+
+	fileChooser.set_action(chooserAction);
+	Url urlObj(location);
+	fileChooser.set_current_folder(filename_from_utf8(urlObj.getLocation()));
+	if (isDirectory == false)
+	{
+		fileChooser.set_current_name(filename_from_utf8(urlObj.getFile()));
+	}
+	fileChooser.set_local_only();
+	fileChooser.set_select_multiple(false);
+	fileChooser.add_button(Stock::CANCEL, RESPONSE_CANCEL);
+	fileChooser.add_button(okButtonStockId, RESPONSE_OK);
+	fileChooser.set_show_hidden(true);
+
+	return true;
+}
+
+/// Get a column height.
+int get_column_height(TreeView *pTree)
+{
+	int height = 0;
+
+	if (pTree == NULL)
+	{
+		return 0;
+	}
+
+	TreeViewColumn *pColumn = pTree->get_column(1);
+	if (pColumn != NULL)
+	{
+		Gdk::Rectangle cellArea;
+		int xOffset, yOffset, cellWidth, cellHeight;
+
+		pColumn->cell_get_size(cellArea, xOffset, yOffset, cellWidth, cellHeight);
+		height += cellHeight;
+#ifdef DEBUG
+		cout << "get_column_height: cell " << cellHeight << " " << yOffset << endl;
+#endif
+	}
+#ifdef DEBUG
+	cout << "get_column_height: " << height << endl;
+#endif
+
+	return height;
+}
+
+/// Create a text column.
+TreeViewColumn *create_column(const ustring &title, const TreeModelColumnBase& modelColumn,
+	bool isResizable, bool isSortable, const TreeModelColumnBase &sortColumn)
+{
+	TreeViewColumn *pColumn = new TreeViewColumn(title);
+
+	CellRendererText *pTextRenderer = new CellRendererText();
+	pColumn->pack_start(*manage(pTextRenderer));
+	pColumn->add_attribute(pTextRenderer->property_text(), modelColumn);
+	pColumn->set_resizable(isResizable);
+	if (isSortable == true)
+	{
+		pColumn->set_sort_column(sortColumn);
+	}
+
+	return pColumn;
+}
+
+/// Create an icon and text column, rendered by renderTextAndIconCell.
+TreeViewColumn *create_column_with_icon(const ustring &title, const TreeModelColumnBase& modelColumn,
+	const TreeViewColumn::SlotCellData &renderTextAndIconCell,
+	bool isResizable, bool isSortable, const TreeModelColumnBase &sortColumn)
+{
+	TreeViewColumn *pColumn = new TreeViewColumn(title);
+
+	// Pack an icon renderer in the column
+	CellRendererPixbuf *pIconRenderer = new CellRendererPixbuf();
+	pColumn->pack_start(*manage(pIconRenderer), false);
+	pColumn->set_cell_data_func(*pIconRenderer, renderTextAndIconCell);
+	// ...followed by a text renderer
+	CellRendererText *pTextRenderer = new CellRendererText();
+	pColumn->pack_start(*manage(pTextRenderer));
+	pColumn->set_cell_data_func(*pTextRenderer, renderTextAndIconCell);
+
+	pColumn->add_attribute(pTextRenderer->property_text(), modelColumn);
+	pColumn->set_resizable(isResizable);
+	if (isSortable == true)
+	{
+		pColumn->set_sort_column(sortColumn);
+	}
+
+	return pColumn;
+}
+
+/// Converts to UTF-8.
+ustring to_utf8(const string &text)
+{
+	std::string charset;
+
+	// Get the locale charset
+	get_charset(charset);
+	// Call overload
+	return to_utf8(text, charset);
+}
+
+/// Converts from the given charset to UTF-8.
+ustring to_utf8(const string &text, const string &charset)
+{
+	if ((charset == "UTF-8") ||
+		(charset == "utf-8"))
+	{
+		// No conversion necessary
+		return text;
+	}
+
+	try
+	{
+		if (charset.empty() == false)
+		{
+			return convert_with_fallback(text, "UTF-8", charset, " ");
+		}
+		else
+		{
+			return locale_to_utf8(text);
+		}
+	}
+	catch (Error &ce)
+	{
+#ifdef DEBUG
+		cout << "to_utf8: cannot convert from " << charset << ": " << ce.what() << endl;
+#endif
+		if (charset.empty() == false)
+		{
+			return to_utf8(text);
+		}
+	}
+	catch (...)
+	{
+#ifdef DEBUG
+		cout << "to_utf8: unknown exception" << endl;
+#endif
+	}
+
+	return "";
+}
+
+/// Converts from UTF-8.
+string from_utf8(const ustring &text)
+{
+	try
+	{
+		return locale_from_utf8(text);
+	}
+	catch (Error &ce)
+	{
+#ifdef DEBUG
+		cout << "from_utf8: " << ce.what() << endl;
+#endif
+	}
+	catch (...)
+	{
+#ifdef DEBUG
+		cout << "from_utf8: unknown exception" << endl;
+#endif
+	}
+
+	return "";
+}

Copied: trunk/UI/GTK2/src/PinotUtils.hh (from rev 1665, trunk/Core/PinotUtils.h)

Modified: trunk/UI/GTK2/src/ResultsTree.cc
===================================================================
--- trunk/UI/GTK2/src/ResultsTree.cc	2009-08-30 01:07:46 UTC (rev 1670)
+++ trunk/UI/GTK2/src/ResultsTree.cc	2009-09-19 04:45:58 UTC (rev 1671)
@@ -35,7 +35,7 @@
 #include "QueryHistory.h"
 #include "ViewHistory.h"
 #include "PinotSettings.h"
-#include "PinotUtils.h"
+#include "PinotUtils.hh"
 #include "ResultsTree.hh"
 
 using namespace std;

Modified: trunk/UI/GTK2/src/importDialog.cc
===================================================================
--- trunk/UI/GTK2/src/importDialog.cc	2009-08-30 01:07:46 UTC (rev 1670)
+++ trunk/UI/GTK2/src/importDialog.cc	2009-09-19 04:45:58 UTC (rev 1671)
@@ -1,5 +1,5 @@
 /*
- *  Copyright 2005,2006 Fabrice Colin
+ *  Copyright 2005-2009 Fabrice Colin
  *
  *  This program is free software; you can redistribute it and/or modify
  *  it under the terms of the GNU General Public License as published by
@@ -32,7 +32,7 @@
 #include "Url.h"
 #include "QueryHistory.h"
 #include "PinotSettings.h"
-#include "PinotUtils.h"
+#include "PinotUtils.hh"
 #include "importDialog.hh"
 
 using namespace std;

Modified: trunk/UI/GTK2/src/indexDialog.cc
===================================================================
--- trunk/UI/GTK2/src/indexDialog.cc	2009-08-30 01:07:46 UTC (rev 1670)
+++ trunk/UI/GTK2/src/indexDialog.cc	2009-09-19 04:45:58 UTC (rev 1671)
@@ -22,7 +22,7 @@
 #include "NLS.h"
 #include "Url.h"
 #include "PinotSettings.h"
-#include "PinotUtils.h"
+#include "PinotUtils.hh"
 #include "indexDialog.hh"
 
 using namespace std;

Modified: trunk/UI/GTK2/src/launcherDialog.cc
===================================================================
--- trunk/UI/GTK2/src/launcherDialog.cc	2009-08-30 01:07:46 UTC (rev 1670)
+++ trunk/UI/GTK2/src/launcherDialog.cc	2009-09-19 04:45:58 UTC (rev 1671)
@@ -1,5 +1,5 @@
 /*
- *  Copyright 2005,2006 Fabrice Colin
+ *  Copyright 2005-2009 Fabrice Colin
  *
  *  This program is free software; you can redistribute it and/or modify
  *  it under the terms of the GNU General Public License as published by
@@ -24,7 +24,7 @@
 #include "NLS.h"
 #include "Url.h"
 #include "PinotSettings.h"
-#include "PinotUtils.h"
+#include "PinotUtils.hh"
 #include "launcherDialog.hh"
 
 using namespace std;

Modified: trunk/UI/GTK2/src/mainWindow.cc
===================================================================
--- trunk/UI/GTK2/src/mainWindow.cc	2009-08-30 01:07:46 UTC (rev 1670)
+++ trunk/UI/GTK2/src/mainWindow.cc	2009-09-19 04:45:58 UTC (rev 1671)
@@ -51,7 +51,7 @@
 #include "QueryHistory.h"
 #include "ViewHistory.h"
 #include "ModuleFactory.h"
-#include "PinotUtils.h"
+#include "PinotUtils.hh"
 #include "mainWindow.hh"
 #include "importDialog.hh"
 #include "indexDialog.hh"

Modified: trunk/UI/GTK2/src/prefsWindow.cc
===================================================================
--- trunk/UI/GTK2/src/prefsWindow.cc	2009-08-30 01:07:46 UTC (rev 1670)
+++ trunk/UI/GTK2/src/prefsWindow.cc	2009-09-19 04:45:58 UTC (rev 1671)
@@ -36,7 +36,7 @@
 #include "DBusIndex.h"
 #endif
 #include "ModuleFactory.h"
-#include "PinotUtils.h"
+#include "PinotUtils.hh"
 #include "prefsWindow.hh"
 
 using namespace std;

Modified: trunk/UI/GTK2/src/propertiesDialog.cc
===================================================================
--- trunk/UI/GTK2/src/propertiesDialog.cc	2009-08-30 01:07:46 UTC (rev 1670)
+++ trunk/UI/GTK2/src/propertiesDialog.cc	2009-09-19 04:45:58 UTC (rev 1671)
@@ -27,7 +27,7 @@
 #include "StringManip.h"
 #include "NLS.h"
 #include "PinotSettings.h"
-#include "PinotUtils.h"
+#include "PinotUtils.hh"
 #include "propertiesDialog.hh"
 
 using namespace std;

Modified: trunk/UI/GTK2/src/queryDialog.cc
===================================================================
--- trunk/UI/GTK2/src/queryDialog.cc	2009-08-30 01:07:46 UTC (rev 1670)
+++ trunk/UI/GTK2/src/queryDialog.cc	2009-09-19 04:45:58 UTC (rev 1671)
@@ -25,7 +25,7 @@
 #include "NLS.h"
 #include "Languages.h"
 #include "TimeConverter.h"
-#include "PinotUtils.h"
+#include "PinotUtils.hh"
 #include "queryDialog.hh"
 
 using namespace std;

Modified: trunk/UI/GTK2/src/statisticsDialog.cc
===================================================================
--- trunk/UI/GTK2/src/statisticsDialog.cc	2009-08-30 01:07:46 UTC (rev 1670)
+++ trunk/UI/GTK2/src/statisticsDialog.cc	2009-09-19 04:45:58 UTC (rev 1671)
@@ -34,7 +34,7 @@
 #endif
 #include "ModuleFactory.h"
 #include "PinotSettings.h"
-#include "PinotUtils.h"
+#include "PinotUtils.hh"
 #include "statisticsDialog.hh"
 
 using namespace std;



