From fabricecolin at mail.berlios.de  Sat Aug 15 12:11:44 2009
From: fabricecolin at mail.berlios.de (fabricecolin at mail.berlios.de)
Date: Sat, 15 Aug 2009 12:11:44 +0200
Subject: [Pinot-svn] r1665 - in trunk: SQL Utils
Message-ID: <200908151011.n7FABikM025552@sheep.berlios.de>

Author: fabricecolin
Date: 2009-08-15 12:11:22 +0200 (Sat, 15 Aug 2009)
New Revision: 1665

Modified:
   trunk/SQL/ActionQueue.cpp
   trunk/SQL/CrawlHistory.cpp
   trunk/SQL/MetaDataBackup.cpp
   trunk/SQL/QueryHistory.cpp
   trunk/SQL/SQLDB.cpp
   trunk/SQL/SQLiteBase.cpp
   trunk/SQL/ViewHistory.cpp
   trunk/Utils/CommandLine.cpp
   trunk/Utils/Document.cpp
   trunk/Utils/MIMEScanner.cpp
   trunk/Utils/Memory.cpp
   trunk/Utils/TimeConverter.cpp
   trunk/Utils/Url.cpp
Log:
Prefer clog to cout and cerr.


Modified: trunk/SQL/ActionQueue.cpp
===================================================================
--- trunk/SQL/ActionQueue.cpp	2009-07-02 13:37:20 UTC (rev 1664)
+++ trunk/SQL/ActionQueue.cpp	2009-08-15 10:11:22 UTC (rev 1665)
@@ -31,7 +31,7 @@
 
 using std::string;
 using std::set;
-using std::cout;
+using std::clog;
 using std::endl;
 
 ActionQueue::ActionQueue(const string &database, const string queueId) :
@@ -92,7 +92,7 @@
 	if (db.executeSimpleStatement("SELECT * FROM ActionQueue LIMIT 1;") == false)
 	{
 #ifdef DEBUG
-		cout << "ActionQueue::create: ActionQueue doesn't exist" << endl;
+		clog << "ActionQueue::create: ActionQueue doesn't exist" << endl;
 #endif
 		// Create the table
 		if (db.executeSimpleStatement("CREATE TABLE ActionQueue (QueueId VARCHAR(255), \
@@ -123,7 +123,7 @@
 		if (row != NULL)
 		{
 #ifdef DEBUG
-			cout << "ActionQueue::pushItem: item "
+			clog << "ActionQueue::pushItem: item "
 				<< Url::unescapeUrl(row->getColumn(0)) << " exists" << endl;
 #endif
 			update = true;
@@ -152,7 +152,7 @@
 	if (results != NULL)
 	{
 #ifdef DEBUG
-		cout << "ActionQueue::pushItem: queue " << m_queueId
+		clog << "ActionQueue::pushItem: queue " << m_queueId
 			<< ": " << type << " on " << url << ", " << update << endl;
 #endif
 		success = true;
@@ -175,7 +175,7 @@
 	}
 	url = docInfo.getLocation();
 #ifdef DEBUG
-	cout << "ActionQueue::popItem: queue " << m_queueId
+	clog << "ActionQueue::popItem: queue " << m_queueId
 		<< ": " << type << " on " << url << endl;
 #endif
 

Modified: trunk/SQL/CrawlHistory.cpp
===================================================================
--- trunk/SQL/CrawlHistory.cpp	2009-07-02 13:37:20 UTC (rev 1664)
+++ trunk/SQL/CrawlHistory.cpp	2009-08-15 10:11:22 UTC (rev 1665)
@@ -25,7 +25,7 @@
 #include "Url.h"
 #include "CrawlHistory.h"
 
-using std::cout;
+using std::clog;
 using std::endl;
 using std::string;
 using std::set;
@@ -133,7 +133,7 @@
 		if (db.executeSimpleStatement("SELECT ErrorNum FROM CrawlHistory LIMIT 1;") == false)
 		{
 #ifdef DEBUG
-			cout << "CrawlHistory::create: CrawlHistory needs updating" << endl;
+			clog << "CrawlHistory::create: CrawlHistory needs updating" << endl;
 #endif
 			// Ideally, we would use ALTER TABLE but it's not supported by SQLite
 			if (db.executeSimpleStatement("DROP TABLE CrawlHistory; VACUUM;") == true)

Modified: trunk/SQL/MetaDataBackup.cpp
===================================================================
--- trunk/SQL/MetaDataBackup.cpp	2009-07-02 13:37:20 UTC (rev 1664)
+++ trunk/SQL/MetaDataBackup.cpp	2009-08-15 10:11:22 UTC (rev 1665)
@@ -36,10 +36,10 @@
 #include "TimeConverter.h"
 #include "MetaDataBackup.h"
 
+using std::clog;
+using std::endl;
 using std::string;
 using std::set;
-using std::cout;
-using std::endl;
 
 MetaDataBackup::MetaDataBackup(const string &database) :
 	SQLiteBase(database)
@@ -71,7 +71,7 @@
 			value.c_str(), (size_t)value.length(), 0) != 0)
 		{
 #ifdef DEBUG
-			cout << "MetaDataBackup::setAttribute: setxattr failed with " << strerror(errno) << endl;
+			clog << "MetaDataBackup::setAttribute: setxattr failed with " << strerror(errno) << endl;
 #endif
 		}
 	}
@@ -342,7 +342,7 @@
 	if (db.executeSimpleStatement("SELECT * FROM MetaDataBackup LIMIT 1;") == false)
 	{
 #ifdef DEBUG
-		cout << "MetaDataBackup::create: MetaDataBackup doesn't exist" << endl;
+		clog << "MetaDataBackup::create: MetaDataBackup doesn't exist" << endl;
 #endif
 		// Create the table
 		if (db.executeSimpleStatement("CREATE TABLE MetaDataBackup (Url VARCHAR(255), \

Modified: trunk/SQL/QueryHistory.cpp
===================================================================
--- trunk/SQL/QueryHistory.cpp	2009-07-02 13:37:20 UTC (rev 1664)
+++ trunk/SQL/QueryHistory.cpp	2009-08-15 10:11:22 UTC (rev 1665)
@@ -1,5 +1,5 @@
 /*
- *  Copyright 2005-2008 Fabrice Colin
+ *  Copyright 2005-2009 Fabrice Colin
  *
  *  This program is free software; you can redistribute it and/or modify
  *  it under the terms of the GNU General Public License as published by
@@ -27,7 +27,7 @@
 #include "Url.h"
 #include "QueryHistory.h"
 
-using std::cout;
+using std::clog;
 using std::endl;
 using std::string;
 using std::set;
@@ -71,7 +71,7 @@
 		if (db.executeSimpleStatement("SELECT Language FROM QueryHistory LIMIT 1;") == true)
 		{
 #ifdef DEBUG
-			cout << "QueryHistory::create: QueryHistory needs updating" << endl;
+			clog << "QueryHistory::create: QueryHistory needs updating" << endl;
 #endif
 			db.alterTable("QueryHistory",
 				"QueryName, EngineName, HostName, Url, Title, Extract, Score, Date",

Modified: trunk/SQL/SQLDB.cpp
===================================================================
--- trunk/SQL/SQLDB.cpp	2009-07-02 13:37:20 UTC (rev 1664)
+++ trunk/SQL/SQLDB.cpp	2009-08-15 10:11:22 UTC (rev 1665)
@@ -25,8 +25,7 @@
 
 #include "SQLDB.h"
 
-using std::cout;
-using std::cerr;
+using std::clog;
 using std::endl;
 using std::string;
 

Modified: trunk/SQL/SQLiteBase.cpp
===================================================================
--- trunk/SQL/SQLiteBase.cpp	2009-07-02 13:37:20 UTC (rev 1664)
+++ trunk/SQL/SQLiteBase.cpp	2009-08-15 10:11:22 UTC (rev 1665)
@@ -25,8 +25,7 @@
 
 #include "SQLiteBase.h"
 
-using std::cout;
-using std::cerr;
+using std::clog;
 using std::endl;
 using std::string;
 using std::vector;
@@ -165,7 +164,7 @@
 		(!S_ISREG(dbStat.st_mode)))
 	{
 		// It exists, but it's not a file as expected
-		cerr << databaseName << " is not a file" << endl;
+		clog << databaseName << " is not a file" << endl;
 		return false;
 	}
 
@@ -188,14 +187,14 @@
 		// An handle is returned even when an error occurs !
 		if (m_pDatabase != NULL)
 		{
-			cerr << sqlite3_errmsg(m_pDatabase) << endl;
+			clog << sqlite3_errmsg(m_pDatabase) << endl;
 			close();
 			m_pDatabase = NULL;
 		}
 	}
 	else if (m_pDatabase == NULL)
 	{
-		cerr << "Couldn't open " << m_databaseName << endl;
+		clog << "Couldn't open " << m_databaseName << endl;
 	}
 	else
 	{
@@ -258,7 +257,7 @@
 	sql += tableName;
 	sql += "_backup; COMMIT;";
 #ifdef DEBUG
-	cout << "SQLiteBase::alterTable: " << sql << endl;
+	clog << "SQLiteBase::alterTable: " << sql << endl;
 #endif
 
 	return executeSimpleStatement(sql);
@@ -290,7 +289,7 @@
 	{
 		if (errMsg != NULL)
 		{
-			cerr << "Statement <" << sql << "> failed: " << errMsg << endl;
+			clog << "Statement <" << sql << "> failed: " << errMsg << endl;
 
 			sqlite3_free(errMsg);
 		}
@@ -333,7 +332,7 @@
 	if (numChars <= 0)
 	{
 #ifdef DEBUG
-		cout << "SQLiteBase::executeStatement: couldn't format statement" << endl;
+		clog << "SQLiteBase::executeStatement: couldn't format statement" << endl;
 #endif
 		if (m_onDemand == true)
 		{
@@ -345,7 +344,7 @@
 	{
 		// Not enough space
 #ifdef DEBUG
-		cout << "SQLiteBase::executeStatement: not enough space (" << numChars << ")" << endl;
+		clog << "SQLiteBase::executeStatement: not enough space (" << numChars << ")" << endl;
 #endif
 		if (m_onDemand == true)
 		{
@@ -359,7 +358,7 @@
 	if (stringBuff == NULL)
 	{
 #ifdef DEBUG
-		cout << "SQLiteBase::executeStatement: couldn't format statement" << endl;
+		clog << "SQLiteBase::executeStatement: couldn't format statement" << endl;
 #endif
 		if (m_onDemand == true)
 		{
@@ -381,7 +380,7 @@
 	{
 		if (errMsg != NULL)
 		{
-			cerr << "Statement <" << stringBuff << "> failed: " << errMsg << endl;
+			clog << "Statement <" << stringBuff << "> failed: " << errMsg << endl;
 
 			sqlite3_free(errMsg);
 		}

Modified: trunk/SQL/ViewHistory.cpp
===================================================================
--- trunk/SQL/ViewHistory.cpp	2009-07-02 13:37:20 UTC (rev 1664)
+++ trunk/SQL/ViewHistory.cpp	2009-08-15 10:11:22 UTC (rev 1665)
@@ -1,5 +1,5 @@
 /*
- *  Copyright 2005-2008 Fabrice Colin
+ *  Copyright 2005-2009 Fabrice Colin
  *
  *  This program is free software; you can redistribute it and/or modify
  *  it under the terms of the GNU General Public License as published by
@@ -25,7 +25,7 @@
 #include "Url.h"
 #include "ViewHistory.h"
 
-using std::cout;
+using std::clog;
 using std::endl;
 using std::string;
 
@@ -55,7 +55,7 @@
 	if (db.executeSimpleStatement("SELECT * FROM ViewHistory LIMIT 1;") == false)
 	{
 #ifdef DEBUG
-		cout << "ViewHistory::create: ViewHistory doesn't exist" << endl;
+		clog << "ViewHistory::create: ViewHistory doesn't exist" << endl;
 #endif
 		createTable = true;
 	}
@@ -65,7 +65,7 @@
 		if (db.executeSimpleStatement("SELECT Date FROM ViewHistory LIMIT 1;") == false)
 		{
 #ifdef DEBUG
-			cout << "ViewHistory::create: ViewHistory needs updating" << endl;
+			clog << "ViewHistory::create: ViewHistory needs updating" << endl;
 #endif
 			// Ideally, we would use ALTER TABLE but it's not supported by SQLite
 			if (db.executeSimpleStatement("DROP TABLE ViewHistory; VACUUM;") == true)
@@ -118,7 +118,7 @@
 		{
 			// If this returns anything, it's the URL we are looking for
 #ifdef DEBUG
-			cout << "ViewHistory::hasItem: URL " << row->getColumn(0) << endl;
+			clog << "ViewHistory::hasItem: URL " << row->getColumn(0) << endl;
 #endif
 			success = true;
 

Modified: trunk/Utils/CommandLine.cpp
===================================================================
--- trunk/Utils/CommandLine.cpp	2009-07-02 13:37:20 UTC (rev 1664)
+++ trunk/Utils/CommandLine.cpp	2009-08-15 10:11:22 UTC (rev 1665)
@@ -1,5 +1,5 @@
 /*
- *  Copyright 2005-2008 Fabrice Colin
+ *  Copyright 2005-2009 Fabrice Colin
  *
  *  This program is free software; you can redistribute it and/or modify
  *  it under the terms of the GNU General Public License as published by
@@ -25,7 +25,7 @@
 #include "CommandLine.h"
 #include "Url.h"
 
-using std::cout;
+using std::clog;
 using std::endl;
 using std::string;
 using std::vector;
@@ -60,7 +60,7 @@
 		return true;
 	}
 #ifdef DEBUG
-	cout << "CommandLine::runSync: exit status is " << exitStatus
+	clog << "CommandLine::runSync: exit status is " << exitStatus
 		<< " for \"" << commandLine << "\"" << endl;
 #endif
 
@@ -93,7 +93,7 @@
 			pFilesList = g_list_prepend(pFilesList, g_file_new_for_uri((*firstArg).c_str()));
 		}
 #ifdef DEBUG
-		else cout << "CommandLine::runAsync: can't open URL " << *firstArg << endl;
+		else clog << "CommandLine::runAsync: can't open URL " << *firstArg << endl;
 #endif
 
 		// Next
@@ -153,7 +153,7 @@
 		return false;
 	}
 #ifdef DEBUG
-	cout << "CommandLine::runAsync: " << arguments.size() << " arguments for application '"
+	clog << "CommandLine::runAsync: " << arguments.size() << " arguments for application '"
 		<< action.m_exec << "'" << endl;
 #endif
 
@@ -309,7 +309,7 @@
 		}
 
 #ifdef DEBUG
-		cout << "CommandLine::runAsync: spawning '" << commandLine << "'" << endl;
+		clog << "CommandLine::runAsync: spawning '" << commandLine << "'" << endl;
 #endif
 		Glib::spawn_command_line_async(commandLine);
 

Modified: trunk/Utils/Document.cpp
===================================================================
--- trunk/Utils/Document.cpp	2009-07-02 13:37:20 UTC (rev 1664)
+++ trunk/Utils/Document.cpp	2009-08-15 10:11:22 UTC (rev 1665)
@@ -38,8 +38,7 @@
 #include "TimeConverter.h"
 #include "Memory.h"
 
-using std::cout;
-using std::cerr;
+using std::clog;
 using std::endl;
 using std::string;
 using std::set;
@@ -207,7 +206,7 @@
 #endif
 	if (fd < 0)
 	{
-		cerr << "Document::setDataFromFile: " << fileName << " couldn't be opened" << endl;
+		clog << "Document::setDataFromFile: " << fileName << " couldn't be opened" << endl;
 		return false;
 	}
 #ifndef O_CLOEXEC
@@ -230,12 +229,12 @@
 		if (madvise(mapSpace, (size_t)fileStat.st_size, MADV_SEQUENTIAL) != 0)
 		{
 #ifdef DEBUG
-			cout << "Document::setDataFromFile: ignored memory advice" << endl;
+			clog << "Document::setDataFromFile: ignored memory advice" << endl;
 #endif
 		}
 #endif
 	}
-	else cerr << "Document::setDataFromFile: mapping failed" << endl;
+	else clog << "Document::setDataFromFile: mapping failed" << endl;
 #else
 	m_pData = Memory::allocateBuffer(fileStat.st_size + 1);
 	if (m_pData != NULL)
@@ -251,7 +250,7 @@
 			m_pData = NULL;
 		}
 	}
-	else cerr << "Document::setDataFromFile: reading failed" << endl;
+	else clog << "Document::setDataFromFile: reading failed" << endl;
 #endif
 
 	setTimestamp(TimeConverter::toTimestamp(fileStat.st_mtime));
@@ -290,7 +289,7 @@
 				if (pAttr != NULL)
 				{
 #ifdef DEBUG
-					cout << "Document::setDataFromFile: xattr " << attrName << "=" << pAttr << endl;
+					clog << "Document::setDataFromFile: xattr " << attrName << "=" << pAttr << endl;
 #endif
 					delete[] pAttr;
 				}
@@ -321,7 +320,7 @@
 	if (close(fd) == -1)
 	{
 #ifdef DEBUG
-		cout << "Document::setDataFromFile: close failed" << endl;
+		clog << "Document::setDataFromFile: close failed" << endl;
 #endif
 	}
 
@@ -352,7 +351,7 @@
 			if (madvise((void*)m_pData, (size_t)m_dataLength, MADV_DONTNEED) != 0)
 			{
 #ifdef DEBUG
-				cout << "Document::resetData: ignored memory advice" << endl;
+				clog << "Document::resetData: ignored memory advice" << endl;
 #endif
 			}
 #endif
@@ -382,7 +381,7 @@
 		if (isascii(m_pData[i]) == 0)
 		{
 #ifdef DEBUG
-			cout << "Document::isBinary: " << m_pData[i] << endl;
+			clog << "Document::isBinary: " << m_pData[i] << endl;
 #endif
 			return true;
 		}

Modified: trunk/Utils/MIMEScanner.cpp
===================================================================
--- trunk/Utils/MIMEScanner.cpp	2009-07-02 13:37:20 UTC (rev 1664)
+++ trunk/Utils/MIMEScanner.cpp	2009-08-15 10:11:22 UTC (rev 1665)
@@ -36,7 +36,7 @@
 #define MIME_CACHE_SECTION	"MIME Cache"
 #define UNKNOWN_MIME_TYPE	"application/octet-stream";
 
-using std::cout;
+using std::clog;
 using std::endl;
 using std::string;
 using std::list;
@@ -332,7 +332,7 @@
 		// It's here, we need to read it off the disk
 		MIMEAction typeAction(desktopFile);
 #ifdef DEBUG
-		cout << "MIMECache::findDesktopFile: read " << desktopFile << endl;
+		clog << "MIMECache::findDesktopFile: read " << desktopFile << endl;
 #endif
 
 		if (typeAction.m_exec.empty() == false)
@@ -376,7 +376,7 @@
 	if (pError == NULL)
 	{
 #ifdef DEBUG
-		cout << "MIMECache::load: loaded " << m_file << endl;
+		clog << "MIMECache::load: loaded " << m_file << endl;
 #endif
 
 		gchar **pMimeTypes = g_key_file_get_keys(pDefaults, m_section.c_str(),
@@ -430,7 +430,7 @@
 	else
 	{
 #ifdef DEBUG
-		cout << "MIMECache::load: failed to load " << m_file << endl;
+		clog << "MIMECache::load: failed to load " << m_file << endl;
 #endif
 		g_error_free(pError);
 	}
@@ -488,7 +488,7 @@
 		desktopFilesPaths.push_front(userDirectory);
 
 #ifdef DEBUG
-		cout << "MIMEScanner::initialize: user-specific directory " << userDirectory << endl;
+		clog << "MIMEScanner::initialize: user-specific directory " << userDirectory << endl;
 #endif
 		foundActions |= addCache(userDirectory + MIME_DEFAULTS_LIST,
 			MIME_DEFAULTS_SECTION, desktopFilesPaths);
@@ -505,7 +505,7 @@
 		desktopFilesPaths.push_front(systemDirectory);
 
 #ifdef DEBUG
-		cout << "MIMEScanner::initialize: system-wide directory " << systemDirectory << endl;
+		clog << "MIMEScanner::initialize: system-wide directory " << systemDirectory << endl;
 #endif
 		foundActions |= addCache(systemDirectory + MIME_DEFAULTS_LIST,
 			MIME_DEFAULTS_SECTION, desktopFilesPaths);
@@ -615,7 +615,7 @@
 	g_free(pType);
 #endif
 #ifdef DEBUG
-	cout << "MIMEScanner::scanFileType: " << fileName << " " << mimeType << endl;
+	clog << "MIMEScanner::scanFileType: " << fileName << " " << mimeType << endl;
 #endif
 
 	return mimeType;
@@ -698,7 +698,7 @@
 	}
 #endif
 #ifdef DEBUG
-	cout << "MIMEScanner::scanFile: " << fileName << " " << mimeType << endl;
+	clog << "MIMEScanner::scanFile: " << fileName << " " << mimeType << endl;
 #endif
 
 	return mimeType;
@@ -744,7 +744,7 @@
 	}
 #endif
 #ifdef DEBUG
-	cout << "MIMEScanner::scanUrl: " << urlObj.getFile() << " " << mimeType << endl;
+	clog << "MIMEScanner::scanUrl: " << urlObj.getFile() << " " << mimeType << endl;
 #endif
 
 	return mimeType;
@@ -796,7 +796,7 @@
 	g_free(pType);
 #endif
 #ifdef DEBUG
-	cout << "MIMEScanner::scanData: " << mimeType << endl;
+	clog << "MIMEScanner::scanData: " << mimeType << endl;
 #endif
 
 	return mimeType;
@@ -819,7 +819,7 @@
 		if (g_content_type_is_a(mimeType.c_str(), typeIter->c_str()) == TRUE)
 		{
 #ifdef DEBUG
-			cout << "MIMEScanner::getParentTypes: " << mimeType << " is a " << *typeIter << endl;
+			clog << "MIMEScanner::getParentTypes: " << mimeType << " is a " << *typeIter << endl;
 #endif
 			parentMimeTypes.insert(*typeIter);
 		}
@@ -887,7 +887,7 @@
 		MIMEAction action(pDefAppInfo1);
 
 #ifdef DEBUG
-		cout << "MIMEScanner::getDefaultActionsForType: default action " << action.m_name << endl;
+		clog << "MIMEScanner::getDefaultActionsForType: default action " << action.m_name << endl;
 #endif
 		actionNames.insert(action.m_name);
 		typeActions.push_back(action);
@@ -902,7 +902,7 @@
 		if (actionNames.find(action.m_name) == actionNames.end())
 		{
 #ifdef DEBUG
-			cout << "MIMEScanner::getDefaultActionsForType: non-URI default action " << action.m_name << endl;
+			clog << "MIMEScanner::getDefaultActionsForType: non-URI default action " << action.m_name << endl;
 #endif
 			actionNames.insert(action.m_name);
 			typeActions.push_back(action);
@@ -938,7 +938,7 @@
 		if (actionNames.find(action.m_name) == actionNames.end())
 		{
 #ifdef DEBUG
-			cout << "MIMEScanner::getDefaultActionsForType: action " << action.m_name << endl;
+			clog << "MIMEScanner::getDefaultActionsForType: action " << action.m_name << endl;
 #endif
 			actionNames.insert(action.m_name);
 			typeActions.push_back(action);
@@ -971,7 +971,7 @@
 			if (actionNames.find(actionIter->second.m_name) == actionNames.end())
 			{
 #ifdef DEBUG
-				cout << "MIMEScanner::getDefaultActionsForType: action " << actionIter->second.m_name
+				clog << "MIMEScanner::getDefaultActionsForType: action " << actionIter->second.m_name
 					<< " at " << actionIter->second.m_location << endl;
 #endif
 				actionNames.insert(actionIter->second.m_name);
@@ -995,7 +995,7 @@
 	typeActions.clear();
   
 #ifdef DEBUG
-	cout << "MIMEScanner::getDefaultActions: searching for " << mimeType << endl;
+	clog << "MIMEScanner::getDefaultActions: searching for " << mimeType << endl;
 #endif
 	bool foundAction = getDefaultActionsForType(mimeType, actionNames, typeActions);
 #ifndef USE_GIO
@@ -1011,7 +1011,7 @@
 				string parentType(pParentTypes[i]);
 
 #ifdef DEBUG
-				cout << "MIMEScanner::getDefaultActions: searching for parent type " << parentType << endl;
+				clog << "MIMEScanner::getDefaultActions: searching for parent type " << parentType << endl;
 #endif
 				foundAction = getDefaultActionsForType(parentType, actionNames, typeActions);
 				if (foundAction)
@@ -1023,7 +1023,7 @@
 			free(pParentTypes);
 		}
 #ifdef DEBUG
-		else cout << "MIMEScanner::getDefaultActions: " << mimeType << " has no parent types" << endl;
+		else clog << "MIMEScanner::getDefaultActions: " << mimeType << " has no parent types" << endl;
 #endif
 	}
 #endif

Modified: trunk/Utils/Memory.cpp
===================================================================
--- trunk/Utils/Memory.cpp	2009-07-02 13:37:20 UTC (rev 1664)
+++ trunk/Utils/Memory.cpp	2009-08-15 10:11:22 UTC (rev 1665)
@@ -42,6 +42,8 @@
 #endif
 #endif
 
+using std::clog;
+using std::endl;
 using std::string;
 
 Memory::Memory()
@@ -91,8 +93,8 @@
 	 */
 	inUse = info.uordblks;
 #ifdef DEBUG
-	std::cout << "Memory::getUsage: allocated on the heap " << info.arena << ", mmap'ed " << info.hblkhd
-		<< ", in use " << inUse << ", not in use " << info.fordblks << ", can be trimmed " << info.keepcost << std::endl;
+	clog << "Memory::getUsage: allocated on the heap " << info.arena << ", mmap'ed " << info.hblkhd
+		<< ", in use " << inUse << ", not in use " << info.fordblks << ", can be trimmed " << info.keepcost << endl;
 #endif
 #endif
 #endif
@@ -106,12 +108,12 @@
 #ifdef HAVE_UMEM_H
 	bool releasedMemory = fixed_singleton_pool<fixed_pool_allocator_tag, sizeof(char), umem_allocator, boost::details::pool::default_mutex, 131072>::release_memory();
 #ifdef DEBUG
-	std::cout << "Memory::reclaim: released umem allocated memory pool (" << releasedMemory << ")" << std::endl;
+	clog << "Memory::reclaim: released umem allocated memory pool (" << releasedMemory << ")" << endl;
 #endif
 #else
 	bool releasedMemory = fixed_singleton_pool<fixed_pool_allocator_tag, sizeof(char), boost::default_user_allocator_malloc_free, boost::details::pool::default_mutex, 131072>::release_memory();
 #ifdef DEBUG
-	std::cout << "Memory::reclaim: released malloc allocated memory pool (" << releasedMemory << ")" << std::endl;
+	clog << "Memory::reclaim: released malloc allocated memory pool (" << releasedMemory << ")" << endl;
 #endif
 #endif
 #endif
@@ -122,7 +124,7 @@
 #ifdef HAVE_MALLOC_TRIM
 	int trimmedMemory = malloc_trim(0);
 #ifdef DEBUG
-	std::cout << "Memory::reclaim: trimmed malloc allocated memory (" << trimmedMemory << ")" << std::endl;
+	clog << "Memory::reclaim: trimmed malloc allocated memory (" << trimmedMemory << ")" << endl;
 #endif
 #endif
 #endif

Modified: trunk/Utils/TimeConverter.cpp
===================================================================
--- trunk/Utils/TimeConverter.cpp	2009-07-02 13:37:20 UTC (rev 1664)
+++ trunk/Utils/TimeConverter.cpp	2009-08-15 10:11:22 UTC (rev 1665)
@@ -109,7 +109,7 @@
 
 #include "TimeConverter.h"
 
-using std::cout;
+using std::clog;
 using std::endl;
 using std::string;
 
@@ -240,7 +240,7 @@
 	timeTm.tm_mday = atoi(yyyymmdd.substr(6, 2).c_str());
 #endif
 #ifdef DEBUG
-	cout << "TimeConverter::fromYYYYMMDDString: " << timeTm.tm_year << " " << timeTm.tm_mon << " " << timeTm.tm_mday << endl;
+	clog << "TimeConverter::fromYYYYMMDDString: " << timeTm.tm_year << " " << timeTm.tm_mon << " " << timeTm.tm_mday << endl;
 #endif
 	if (inGMTime == true)
 	{
@@ -310,7 +310,7 @@
 	timeTm.tm_sec = atoi(hhmmss.substr(4, 2).c_str());
 #endif
 #ifdef DEBUG
-	cout << "TimeConverter::fromHHMMSSString: " << timeTm.tm_hour << " " << timeTm.tm_min << " " << timeTm.tm_sec << endl;
+	clog << "TimeConverter::fromHHMMSSString: " << timeTm.tm_hour << " " << timeTm.tm_min << " " << timeTm.tm_sec << endl;
 #endif
 	if (inGMTime == true)
 	{

Modified: trunk/Utils/Url.cpp
===================================================================
--- trunk/Utils/Url.cpp	2009-07-02 13:37:20 UTC (rev 1664)
+++ trunk/Utils/Url.cpp	2009-08-15 10:11:22 UTC (rev 1665)
@@ -25,7 +25,7 @@
 #include "Url.h"
 
 using std::string;
-using std::cout;
+using std::clog;
 using std::endl;
 
 static const int g_rfc2396Encoded[] = {
@@ -513,7 +513,7 @@
 			currentLocation += path;
 		}
 #ifdef DEBUG
-		cout << "Url::resolvePath: partially resolved to " << currentLocation << endl;
+		clog << "Url::resolvePath: partially resolved to " << currentLocation << endl;
 #endif
 
 		if (slashPos + 1 >= location.length())
@@ -545,7 +545,7 @@
 		}
 	}
 #ifdef DEBUG
-	cout << "Url::resolvePath: resolved to " << currentLocation << endl;
+	clog << "Url::resolvePath: resolved to " << currentLocation << endl;
 #endif
 
 	return currentLocation;



From fabricecolin at mail.berlios.de  Sat Aug 29 07:23:40 2009
From: fabricecolin at mail.berlios.de (fabricecolin at mail.berlios.de)
Date: Sat, 29 Aug 2009 07:23:40 +0200
Subject: [Pinot-svn] r1666 - in trunk: Core UI/GTK2/src
Message-ID: <200908290523.n7T5NeOl019299@sheep.berlios.de>

Author: fabricecolin
Date: 2009-08-29 07:23:09 +0200 (Sat, 29 Aug 2009)
New Revision: 1666

Modified:
   trunk/Core/pinot-dbus-daemon.cpp
   trunk/UI/GTK2/src/pinot.cc
Log:
Redirect clog too.


Modified: trunk/Core/pinot-dbus-daemon.cpp
===================================================================
--- trunk/Core/pinot-dbus-daemon.cpp	2009-08-15 10:11:22 UTC (rev 1665)
+++ trunk/Core/pinot-dbus-daemon.cpp	2009-08-29 05:23:09 UTC (rev 1666)
@@ -65,6 +65,7 @@
 static string g_pidFileName;
 static streambuf *g_coutBuf = NULL;
 static streambuf *g_cerrBuf = NULL;
+static streambuf *g_clogBuf = NULL;
 static struct option g_longOptions[] = {
 	{"help", 0, 0, 'h'},
 	{"ignore-version", 0, 0, 'i'},
@@ -98,6 +99,10 @@
 	{
 		cerr.rdbuf(g_cerrBuf);
 	}
+	if (g_clogBuf != NULL)
+	{
+		clog.rdbuf(g_clogBuf);
+	}
 	g_outputFile.close();
 	if (g_pidFileName.empty() == false)
 	{
@@ -405,8 +410,10 @@
 		g_outputFile.open(fileName.c_str());
 		g_coutBuf = cout.rdbuf();
 		g_cerrBuf = cerr.rdbuf();
+		g_clogBuf = clog.rdbuf();
 		cout.rdbuf(g_outputFile.rdbuf());
 		cerr.rdbuf(g_outputFile.rdbuf());
+		clog.rdbuf(g_outputFile.rdbuf());
 	}
 	else
 	{

Modified: trunk/UI/GTK2/src/pinot.cc
===================================================================
--- trunk/UI/GTK2/src/pinot.cc	2009-08-15 10:11:22 UTC (rev 1665)
+++ trunk/UI/GTK2/src/pinot.cc	2009-08-29 05:23:09 UTC (rev 1666)
@@ -53,6 +53,7 @@
 static ofstream g_outputFile;
 static streambuf *g_coutBuf = NULL;
 static streambuf *g_cerrBuf = NULL;
+static streambuf *g_clogBuf = NULL;
 static struct option g_longOptions[] = {
 	{"help", 0, 0, 'h'},
 	{"preferences", 0, 0, 'p'},
@@ -76,6 +77,10 @@
 	{
 		cerr.rdbuf(g_cerrBuf);
 	}
+	if (g_clogBuf != NULL)
+	{
+		clog.rdbuf(g_cerrBuf);
+	}
 	g_outputFile.close();
 
 	DownloaderInterface::shutdown();
@@ -278,8 +283,10 @@
 		g_outputFile.open(logFileName.c_str());
 		g_coutBuf = cout.rdbuf();
 		g_cerrBuf = cerr.rdbuf();
+		g_clogBuf = clog.rdbuf();
 		cout.rdbuf(g_outputFile.rdbuf());
 		cerr.rdbuf(g_outputFile.rdbuf());
+		clog.rdbuf(g_outputFile.rdbuf());
 	}
 
 	// Initialize utility classes



From fabricecolin at mail.berlios.de  Sat Aug 29 07:34:18 2009
From: fabricecolin at mail.berlios.de (fabricecolin at mail.berlios.de)
Date: Sat, 29 Aug 2009 07:34:18 +0200
Subject: [Pinot-svn] r1667 - in trunk: . Core IndexSearch IndexSearch/Xapian
	Tokenize UI/GTK2/src
Message-ID: <200908290534.n7T5YIqA000141@sheep.berlios.de>

Author: fabricecolin
Date: 2009-08-29 07:33:42 +0200 (Sat, 29 Aug 2009)
New Revision: 1667

Modified:
   trunk/AUTHORS
   trunk/Core/DaemonState.cpp
   trunk/Core/Makefile.am
   trunk/Core/WorkerThreads.cpp
   trunk/IndexSearch/Makefile.am
   trunk/IndexSearch/Xapian/Makefile.am
   trunk/README
   trunk/Tokenize/Makefile.am
   trunk/UI/GTK2/src/Makefile.am
Log:
OpenBSD port patches, from Antoine Jacoutot.
See http://www.openbsd.org/cgi-bin/cvsweb/ports/x11/pinot/patches/


Modified: trunk/AUTHORS
===================================================================
--- trunk/AUTHORS	2009-08-29 05:23:09 UTC (rev 1666)
+++ trunk/AUTHORS	2009-08-29 05:33:42 UTC (rev 1667)
@@ -29,6 +29,7 @@
 	Martin Michlmayr <tbm at cyrius dot com>
 	John Werden <jwerden at hotpop dot com>
 	Funda Wang <fundawang at gmail dot com>
+	Antoine Jacoutot <ajacoutot at bsdfrog dot org>
 
 The source in Utils/unac is from unac 1.7.0 (Copyright Loic Dachary
 <loic at senga dot org>).
@@ -57,6 +58,7 @@
 		& Balaam's Miracle <balaam at balaamsmiracle dot com>
 	French - Nicolas Velin <nsv at fr dot st>
 		& Fr?d?ric Grosshans <frederic dot grosshans at gmail dot com>
+		& Thierry Thomas <thierry at freebsd dot org>
 	German - Christian Dywan <christian at twotoasts dot de>
 		& Gena Haltmair <gena at haltmair dot com>
 	Hebrew - Yaron <sh dot yaron at gmail dot com>

Modified: trunk/Core/DaemonState.cpp
===================================================================
--- trunk/Core/DaemonState.cpp	2009-08-29 05:23:09 UTC (rev 1666)
+++ trunk/Core/DaemonState.cpp	2009-08-29 05:33:42 UTC (rev 1667)
@@ -36,6 +36,9 @@
       #define CHECK_DISK_SPACE 1
     #else
       #ifdef HAVE_SYS_MOUNT_H
+        #if defined(__OpenBSD__)
+          #include <sys/param.h>
+        #endif
         #include <sys/mount.h>
         #define CHECK_DISK_SPACE 1
       #endif

Modified: trunk/Core/Makefile.am
===================================================================
--- trunk/Core/Makefile.am	2009-08-29 05:23:09 UTC (rev 1666)
+++ trunk/Core/Makefile.am	2009-08-29 05:33:42 UTC (rev 1667)
@@ -40,7 +40,7 @@
 endif
 
 pinot_index_LDFLAGS = \
-	-rdynamic
+	-export-dynamic
 
 pinot_index_LDADD = \
 	-L$(top_builddir)/Utils \
@@ -59,7 +59,7 @@
 pinot_index_DEPENDENCIES = libCore.la
 
 pinot_search_LDFLAGS = \
-	-rdynamic
+	-export-dynamic
 
 pinot_search_LDADD = \
 	-L$(top_builddir)/Utils \
@@ -77,7 +77,7 @@
 pinot_search_DEPENDENCIES = libCore.la
 
 pinot_dbus_daemon_LDFLAGS = \
-	-rdynamic
+	-export-dynamic
 
 pinot_dbus_daemon_LDADD = \
 	-L$(top_builddir)/Utils \

Modified: trunk/Core/WorkerThreads.cpp
===================================================================
--- trunk/Core/WorkerThreads.cpp	2009-08-29 05:23:09 UTC (rev 1666)
+++ trunk/Core/WorkerThreads.cpp	2009-08-29 05:33:42 UTC (rev 1667)
@@ -27,6 +27,10 @@
 #include <signal.h>
 #include <time.h>
 #include <errno.h>
+#ifdef __OpenBSD__
+#include <sys/param.h>
+#include <sys/sysctl.h>
+#endif
 #include <exception>
 #include <iostream>
 #include <fstream>
@@ -285,9 +289,21 @@
 	pthread_rwlock_init(&m_threadsLock, NULL);
 	pthread_rwlock_init(&m_listsLock, NULL);
 
+#ifdef __OpenBSD__
+	int mib[2], ncpus;
+
+	mib[0] = CTL_HW;
+	mib[1] = HW_NCPU;
+	size_t len = sizeof(ncpus);
+	if (sysctl(mib, 2, &ncpus, &len, NULL, 0) > 0)
+	{
+		m_numCPUs = ncpus;
+	}
+#else
 #ifdef HAVE_SYSCONF
 	m_numCPUs = sysconf(_SC_NPROCESSORS_ONLN);
 #endif
+#endif
 }
 
 ThreadsManager::~ThreadsManager()

Modified: trunk/IndexSearch/Makefile.am
===================================================================
--- trunk/IndexSearch/Makefile.am	2009-08-29 05:23:09 UTC (rev 1666)
+++ trunk/IndexSearch/Makefile.am	2009-08-29 05:33:42 UTC (rev 1667)
@@ -50,7 +50,7 @@
 endif
 
 pinot_label_LDFLAGS = \
-	-rdynamic
+	-export-dynamic
 
 pinot_label_LDADD = \
 	-L$(top_builddir)/Utils \

Modified: trunk/IndexSearch/Xapian/Makefile.am
===================================================================
--- trunk/IndexSearch/Xapian/Makefile.am	2009-08-29 05:23:09 UTC (rev 1666)
+++ trunk/IndexSearch/Xapian/Makefile.am	2009-08-29 05:33:42 UTC (rev 1667)
@@ -31,7 +31,7 @@
 libxapianbackend_la_SOURCES += $(top_srcdir)/IndexSearch/xesam/XesamULParser.cc
 endif
 
-libxapianbackend_la_LDFLAGS = -module -shared -nostartfiles
+libxapianbackend_la_LDFLAGS = -module -avoid-version -shared -nostartfiles
 
 libxapianbackend_la_LIBADD = \
 	-L$(top_builddir)/Utils \

Modified: trunk/README
===================================================================
--- trunk/README	2009-08-29 05:23:09 UTC (rev 1666)
+++ trunk/README	2009-08-29 05:33:42 UTC (rev 1667)
@@ -83,7 +83,7 @@
   http://mycroft.mozdev.org/ has got plenty of plugins. Beware that a lot are
   out of date and will require some changes. Use pinot-search on the
   command-line to run a quick check on a plugin, eg
-  $ pinot-search sherlock /usr/share/pinot/engines/Bozo.src "clowns"
+  $ pinot-search sherlock $PREFIX/share/pinot/engines/Bozo.src "clowns"
 
   Plugins are categorized by channels. For Sherlock plugins, the routeType
   element under SEARCH specifies the name of the channel the plugin belongs to.
@@ -142,7 +142,7 @@
 
   Pinot can index any directory configured under the Indexing tab of the
   Preferences box. Monitoring is optional and should be disabled for the
-  directories whose contents seldom change, eg /usr/share/doc.
+  directories whose contents seldom change, eg $PREFIX/share/doc.
   Indexing and monitoring of directories is handled by the D-Bus service.
 
   In 0.90 and newer, the daemon will skip symlinks that refer to locations
@@ -475,7 +475,7 @@
   Pinot v0.90 and newer provide a "tagged cd" script that enables to change
   a shell's current directory to the directory that matches the path elements
   passed as parameter. For instance, after setting :
-  $ alias pcd='. /usr/share/pinot/pinot-cd.sh'
+  $ alias pcd='. $PREFIX/share/pinot/pinot-cd.sh'
   if ~/Documents is configured for indexing in Preferences, the following
   command would change the current directory to ~/Documents/Web/Stats :
   $ pcd Documents Stats

Modified: trunk/Tokenize/Makefile.am
===================================================================
--- trunk/Tokenize/Makefile.am	2009-08-29 05:23:09 UTC (rev 1666)
+++ trunk/Tokenize/Makefile.am	2009-08-29 05:33:42 UTC (rev 1667)
@@ -29,7 +29,7 @@
 	$(top_srcdir)/Tokenize/filters/Filter.cc \
 	$(top_srcdir)/Tokenize/filters/ArchiveFilter.cc
 
-libarchivefilter_la_LDFLAGS = -module
+libarchivefilter_la_LDFLAGS = -module -avoid-version
 
 libarchivefilter_la_LIBADD = -larchive
 endif
@@ -38,7 +38,7 @@
 	$(top_srcdir)/Tokenize/filters/Filter.cc \
 	$(top_srcdir)/Tokenize/filters/ExifImageFilter.cc
 
-libexifimagefilter_la_LDFLAGS = -module
+libexifimagefilter_la_LDFLAGS = -module -avoid-version
 
 libexifimagefilter_la_LIBADD = @EXIF_LIBS@
 
@@ -46,7 +46,7 @@
 	$(top_srcdir)/Tokenize/filters/Filter.cc \
 	$(top_srcdir)/Tokenize/filters/ExternalFilter.cc
 
-libexternalfilter_la_LDFLAGS = -module
+libexternalfilter_la_LDFLAGS = -module -avoid-version
 
 libexternalfilter_la_LIBADD = @XML_LIBS@
 
@@ -54,7 +54,7 @@
 	$(top_srcdir)/Tokenize/filters/Filter.cc \
 	$(top_srcdir)/Tokenize/filters/GMimeMboxFilter.cc
 
-libmboxfilter_la_LDFLAGS = -module
+libmboxfilter_la_LDFLAGS = -module -avoid-version
 
 libmboxfilter_la_LIBADD = @GMIME_LIBS@
 
@@ -62,7 +62,7 @@
 	$(top_srcdir)/Tokenize/filters/Filter.cc \
 	$(top_srcdir)/Tokenize/filters/TagLibMusicFilter.cc
 
-libtaglibfilter_la_LDFLAGS = -module
+libtaglibfilter_la_LDFLAGS = -module -avoid-version
 
 libtaglibfilter_la_LIBADD = @TAGLIB_LIBS@
 

Modified: trunk/UI/GTK2/src/Makefile.am
===================================================================
--- trunk/UI/GTK2/src/Makefile.am	2009-08-29 05:23:09 UTC (rev 1666)
+++ trunk/UI/GTK2/src/Makefile.am	2009-08-29 05:33:42 UTC (rev 1667)
@@ -69,7 +69,7 @@
 endif
 
 pinot_LDFLAGS = \
-	-rdynamic
+	-export-dynamic
 
 pinot_LDADD = \
 	-L$(top_builddir)/Utils \



From fabricecolin at mail.berlios.de  Sun Aug 30 03:04:36 2009
From: fabricecolin at mail.berlios.de (fabricecolin at mail.berlios.de)
Date: Sun, 30 Aug 2009 03:04:36 +0200
Subject: [Pinot-svn] r1668 - trunk/Core
Message-ID: <200908300104.n7U14aLZ003281@sheep.berlios.de>

Author: fabricecolin
Date: 2009-08-30 03:04:33 +0200 (Sun, 30 Aug 2009)
New Revision: 1668

Modified:
   trunk/Core/UniqueApplication.cpp
Log:
Cleanup.


Modified: trunk/Core/UniqueApplication.cpp
===================================================================
--- trunk/Core/UniqueApplication.cpp	2009-08-29 05:33:42 UTC (rev 1667)
+++ trunk/Core/UniqueApplication.cpp	2009-08-30 01:04:33 UTC (rev 1668)
@@ -101,19 +101,16 @@
 		if (processID > 0)
 		{
 #ifdef HAVE_UNIQUE
-			if (m_pApp != NULL)
+			if (isRunning() == true)
 			{
-				if (unique_app_is_running(m_pApp) == TRUE)
-				{
-					// It's still running
-					stillRunning = true;
-				}
-				else
-				{
-					// It most likely died
-					processDied = true;
-				}
+				// It's still running
+				stillRunning = true;
 			}
+			else
+			{
+				// It most likely died
+				processDied = true;
+			}
 #else
 			fstream cmdLineFile;
 			stringstream cmdLineFileName;



From fabricecolin at mail.berlios.de  Sun Aug 30 03:07:10 2009
From: fabricecolin at mail.berlios.de (fabricecolin at mail.berlios.de)
Date: Sun, 30 Aug 2009 03:07:10 +0200
Subject: [Pinot-svn] r1669 - in trunk: Core UI/GTK2/src
Message-ID: <200908300107.n7U17A4q003687@sheep.berlios.de>

Author: fabricecolin
Date: 2009-08-30 03:07:01 +0200 (Sun, 30 Aug 2009)
New Revision: 1669

Modified:
   trunk/Core/DaemonState.cpp
   trunk/Core/pinot-dbus-daemon.cpp
   trunk/UI/GTK2/src/pinot.cc
Log:
Build those when HAVE_DBUS isn't set.


Modified: trunk/Core/DaemonState.cpp
===================================================================
--- trunk/Core/DaemonState.cpp	2009-08-30 01:04:33 UTC (rev 1668)
+++ trunk/Core/DaemonState.cpp	2009-08-30 01:07:01 UTC (rev 1669)
@@ -24,6 +24,7 @@
 #include <dirent.h>
 #include <sys/stat.h>
 #include <unistd.h>
+#include <stdio.h>
 #include <stdint.h>
 #include <stdlib.h>
 #ifdef HAVE_STATFS
@@ -73,7 +74,6 @@
 #include "DaemonState.h"
 #include "OnDiskHandler.h"
 #include "PinotSettings.h"
-#include "PinotUtils.h"
 #include "ServerThreads.h"
 
 using namespace std;
@@ -490,7 +490,9 @@
 	IndexInterface *pIndex = PinotSettings::getInstance().getIndex(PinotSettings::getInstance().m_daemonIndexLocation);
 	if (pIndex != NULL)
 	{
+#ifdef HAVE_DBUS
 		DBusServletThread::flushIndexAndSignal(pIndex);
+#endif
 
 		delete pIndex;
 	}

Modified: trunk/Core/pinot-dbus-daemon.cpp
===================================================================
--- trunk/Core/pinot-dbus-daemon.cpp	2009-08-30 01:04:33 UTC (rev 1668)
+++ trunk/Core/pinot-dbus-daemon.cpp	2009-08-30 01:07:01 UTC (rev 1669)
@@ -74,6 +74,7 @@
 	{"version", 0, 0, 'v'},
 	{0, 0, 0, 0}
 };
+#ifdef HAVE_DBUS
 static void unregisteredHandler(DBusConnection *pConnection, void *pData);
 static DBusHandlerResult messageHandler(DBusConnection *pConnection, DBusMessage *pMessage, void *pData);
 static DBusObjectPathVTable g_callVTable = {
@@ -81,6 +82,7 @@
         (DBusObjectPathMessageFunction)messageHandler,
 	NULL,
 };
+#endif
 static Glib::RefPtr<Glib::MainLoop> g_refMainLoop;
 
 static void closeAll(void)
@@ -123,6 +125,7 @@
 	}
 }
 
+#ifdef HAVE_DBUS
 static DBusHandlerResult filterHandler(DBusConnection *pConnection, DBusMessage *pMessage, void *pData)
 {
 	DaemonState *pServer = (DaemonState *)pData;
@@ -276,9 +279,15 @@
 
 	return callSuccess;
 }
+#endif
 
 int main(int argc, char **argv)
 {
+#ifdef HAVE_DBUS
+	string programName("pinot-dbus-daemon");
+#else
+	string programName("pinot-daemon");
+#endif
 	int longOptionIndex = 0, priority = 15;
 	bool resetHistory = false;
 	bool resetLabels = false;
@@ -293,8 +302,8 @@
 		{
 			case 'h':
 				// Help
-				cout << "pinot-dbus-daemon - D-Bus search and index daemon\n\n"
-					<< "Usage: pinot-dbus-daemon [OPTIONS]\n\n"
+				cout << programName << " - D-Bus search and index daemon\n\n"
+					<< "Usage: " << programName << " [OPTIONS]\n\n"
 					<< "Options:\n"
 					<< "  -h, --help		display this help and exit\n"
 					<< "  -i, --ignore-version	ignore the index version number\n"
@@ -321,7 +330,7 @@
 				reindex = true;
 				break;
 			case 'v':
-				cout << "pinot-dbus-daemon - " << PACKAGE_STRING << "\n\n" 
+				cout << programName << " - " << PACKAGE_STRING << "\n\n" 
 					<< "This is free software.  You may redistribute copies of it under the terms of\n"
 					<< "the GNU General Public License <http://www.gnu.org/licenses/old-licenses/gpl-2.0.html>.\n"
 					<< "There is NO WARRANTY, to the extent permitted by law." << endl;
@@ -350,10 +359,16 @@
 #if DBUS_NUM_VERSION > 1000000
 	dbus_threads_init_default();
 #endif
+#ifdef HAVE_DBUS
 	dbus_g_thread_init();
+#endif
 
 	g_refMainLoop = Glib::MainLoop::create();
+#ifdef HAVE_DBUS
 	Glib::set_application_name("Pinot DBus Daemon");
+#else
+	Glib::set_application_name("Pinot Daemon");
+#endif
 
 	// This should make Xapian use Flint rather than Quartz
 	Glib::setenv("XAPIAN_PREFER_FLINT", "1");
@@ -394,19 +409,25 @@
 	}
 
 	// Make sure only one instance runs
+#ifdef HAVE_DBUS
 	UniqueApplication uniqueApp("de.berlios.PinotDBusDaemon");
+#else
+	UniqueApplication uniqueApp("de.berlios.PinotDaemon");
+#endif
 	string confDirectory(PinotSettings::getConfigurationDirectory());
-	g_pidFileName = confDirectory + "/pinot-dbus-daemon.pid";
+	g_pidFileName = confDirectory + "/" + programName + ".pid";
 	if (chdir(confDirectory.c_str()) == 0)
 	{
-		if (uniqueApp.isRunning(g_pidFileName, "pinot-dbus-daemon") == true)
+		if (uniqueApp.isRunning(g_pidFileName, programName) == true)
 		{
 			return EXIT_SUCCESS;
 		}
 
 		// Redirect cout and cerr to a file
 		string fileName(confDirectory);
-		fileName += "/pinot-dbus-daemon.log";
+		fileName += "/";
+		fileName += programName;
+		fileName += ".log";
 		g_outputFile.open(fileName.c_str());
 		g_coutBuf = cout.rdbuf();
 		g_cerrBuf = cerr.rdbuf();
@@ -544,6 +565,7 @@
 	}
 #endif
 
+#ifdef HAVE_DBUS
 	GError *pError = NULL;
 	DBusServletThread::m_pBus = dbus_g_bus_get(DBUS_BUS_SESSION, &pError);
 	if (DBusServletThread::m_pBus == NULL)
@@ -567,11 +589,13 @@
 		cerr << "Couldn't get connection" << endl;
 		return EXIT_FAILURE;
 	}
+#endif
 
-	DBusError error;
 	DaemonState server;
 	IndexInterface *pIndex = NULL;
 
+#ifdef HAVE_DBUS
+	DBusError error;
 	dbus_error_init(&error);
 	dbus_connection_set_exit_on_disconnect(pConnection, FALSE);
 	dbus_connection_setup_with_g_main(pConnection, NULL);
@@ -601,6 +625,7 @@
 				cerr << "Error is " << error.message << endl;
 			}
 		}
+#endif
 
 		try
 		{
@@ -635,7 +660,9 @@
 				{
 					// Reset the index so that all documents are reindexed
 					pIndex->reset();
+#ifdef HAVE_DBUS
 					DBusServletThread::flushIndexAndSignal(pIndex);
+#endif
 
 					cout << "Reset index" << endl;
 
@@ -687,6 +714,7 @@
 			// Connect to threads' finished signal
 			server.connect();
 
+#ifdef HAVE_DBUS
 			// Try and get the battery state
 			gboolean result = FALSE;
 			if ((getBatteryState("org.freedesktop.PowerManagement",
@@ -715,6 +743,7 @@
 
 				cout << "System is on battery" << endl;
 			}
+#endif
 
 			server.start(reindex);
 
@@ -737,12 +766,14 @@
 			cerr << "Unknown exception" << endl;
 			return EXIT_FAILURE;
 		}
+#ifdef HAVE_DBUS
 	}
 	else
 	{
 		cerr << "Couldn't register object path" << endl;
 	}
 	dbus_error_free(&error);
+#endif
 
 	if (pIndex != NULL)
 	{
@@ -767,3 +798,4 @@
 
 	return EXIT_SUCCESS;
 }
+

Modified: trunk/UI/GTK2/src/pinot.cc
===================================================================
--- trunk/UI/GTK2/src/pinot.cc	2009-08-30 01:04:33 UTC (rev 1668)
+++ trunk/UI/GTK2/src/pinot.cc	2009-08-30 01:07:01 UTC (rev 1669)
@@ -94,6 +94,7 @@
 	Gtk::Main::quit();
 }
 
+#ifdef HAVE_DBUS
 static DBusHandlerResult filterHandler(DBusConnection *pConnection, DBusMessage *pMessage, void *pData)
 {
 	// Are we about to be disconnected ?
@@ -146,6 +147,7 @@
 
 	return DBUS_HANDLER_RESULT_NOT_YET_HANDLED;
 }
+#endif
 
 int main(int argc, char **argv)
 {
@@ -388,6 +390,7 @@
 
 	if (prefsMode == false)
 	{
+#ifdef HAVE_DBUS
 		GError *pError = NULL;
 		DBusGConnection *pBus = dbus_g_bus_get(DBUS_BUS_SESSION, &pError);
 		DBusConnection *pConnection = NULL;
@@ -429,6 +432,7 @@
 
 			dbus_error_free(&error);
 		}
+#endif
 
 		IndexInterface *pIndex = settings.getIndex(settings.m_docsIndexLocation);
 		if (pIndex != NULL)



From fabricecolin at mail.berlios.de  Sun Aug 30 03:07:50 2009
From: fabricecolin at mail.berlios.de (fabricecolin at mail.berlios.de)
Date: Sun, 30 Aug 2009 03:07:50 +0200
Subject: [Pinot-svn] r1670 - trunk/SQL
Message-ID: <200908300107.n7U17oqH003807@sheep.berlios.de>

Author: fabricecolin
Date: 2009-08-30 03:07:46 +0200 (Sun, 30 Aug 2009)
New Revision: 1670

Modified:
   trunk/SQL/SQLiteBase.cpp
Log:
Show the name of the database when a statement fails.


Modified: trunk/SQL/SQLiteBase.cpp
===================================================================
--- trunk/SQL/SQLiteBase.cpp	2009-08-30 01:07:01 UTC (rev 1669)
+++ trunk/SQL/SQLiteBase.cpp	2009-08-30 01:07:46 UTC (rev 1670)
@@ -289,7 +289,7 @@
 	{
 		if (errMsg != NULL)
 		{
-			clog << "Statement <" << sql << "> failed: " << errMsg << endl;
+			clog << m_databaseName << ": statement <" << sql << "> failed: " << errMsg << endl;
 
 			sqlite3_free(errMsg);
 		}
@@ -380,7 +380,7 @@
 	{
 		if (errMsg != NULL)
 		{
-			clog << "Statement <" << stringBuff << "> failed: " << errMsg << endl;
+			clog << m_databaseName << ": statement <" << stringBuff << "> failed: " << errMsg << endl;
 
 			sqlite3_free(errMsg);
 		}



