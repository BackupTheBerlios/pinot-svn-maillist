From fabricecolin at mail.berlios.de  Wed Jul  1 17:22:51 2009
From: fabricecolin at mail.berlios.de (fabricecolin at mail.berlios.de)
Date: Wed, 1 Jul 2009 17:22:51 +0200
Subject: [Pinot-svn] r1663 - trunk/Utils
Message-ID: <200907011522.n61FMpvJ009706@sheep.berlios.de>

Author: fabricecolin
Date: 2009-07-01 17:22:38 +0200 (Wed, 01 Jul 2009)
New Revision: 1663

Modified:
   trunk/Utils/TimeConverter.cpp
Log:
When requesting GM time, the timezone should be GMT !


Modified: trunk/Utils/TimeConverter.cpp
===================================================================
--- trunk/Utils/TimeConverter.cpp	2009-06-29 15:08:05 UTC (rev 1662)
+++ trunk/Utils/TimeConverter.cpp	2009-07-01 15:22:38 UTC (rev 1663)
@@ -137,14 +137,23 @@
 		)
 	{
 		char timeStr[64];
+		size_t formattedSize = 0;
 
-		// FIXME: don't use this extension ?
+		if (inGMTime == true)
+		{
+			formattedSize = strftime(timeStr, 64, "%a, %d %b %Y %H:%M:%S GMT", pTimeTm);
+		}
+		else
+		{
+			// FIXME: don't use this extension ?
 #if defined(__GNU_LIBRARY__)
-		// %z is a GNU extension
-		if (strftime(timeStr, 64, "%a, %d %b %Y %H:%M:%S %z", pTimeTm) > 0)
+			// %z is a GNU extension
+			formattedSize = strftime(timeStr, 64, "%a, %d %b %Y %H:%M:%S %z", pTimeTm);
 #else
-		if (strftime(timeStr, 64, "%a, %d %b %Y %H:%M:%S %Z", pTimeTm) > 0)
+			formattedSize = strftime(timeStr, 64, "%a, %d %b %Y %H:%M:%S %Z", pTimeTm);
 #endif
+		}
+		if (formattedSize > 0)
 		{
 			delete pTimeTm;
 



From fabricecolin at mail.berlios.de  Thu Jul  2 15:37:59 2009
From: fabricecolin at mail.berlios.de (fabricecolin at mail.berlios.de)
Date: Thu, 2 Jul 2009 15:37:59 +0200
Subject: [Pinot-svn] r1664 - trunk/SQL
Message-ID: <200907021337.n62Dbx0x004910@sheep.berlios.de>

Author: fabricecolin
Date: 2009-07-02 15:37:20 +0200 (Thu, 02 Jul 2009)
New Revision: 1664

Modified:
   trunk/SQL/CrawlHistory.cpp
   trunk/SQL/SQLDB.cpp
   trunk/SQL/SQLDB.h
   trunk/SQL/SQLiteBase.cpp
   trunk/SQL/SQLiteBase.h
Log:
Allow opening databases in read-only mode.


Modified: trunk/SQL/CrawlHistory.cpp
===================================================================
--- trunk/SQL/CrawlHistory.cpp	2009-07-01 15:22:38 UTC (rev 1663)
+++ trunk/SQL/CrawlHistory.cpp	2009-07-02 13:37:20 UTC (rev 1664)
@@ -32,7 +32,7 @@
 using std::map;
 
 CrawlHistory::CrawlHistory(const string &database) :
-	SQLiteBase(database, false)
+	SQLiteBase(database, false, false)
 {
 }
 

Modified: trunk/SQL/SQLDB.cpp
===================================================================
--- trunk/SQL/SQLDB.cpp	2009-07-01 15:22:38 UTC (rev 1663)
+++ trunk/SQL/SQLDB.cpp	2009-07-02 13:37:20 UTC (rev 1664)
@@ -1,5 +1,5 @@
 /*
- *  Copyright 2008 Fabrice Colin
+ *  Copyright 2008-2009 Fabrice Colin
  *
  *  This program is free software; you can redistribute it and/or modify
  *  it under the terms of the GNU General Public License as published by
@@ -78,8 +78,10 @@
 	return true;
 }
 
-SQLDB::SQLDB(const string &databaseName) :
-	m_databaseName(databaseName)
+SQLDB::SQLDB(const string &databaseName,
+	bool readOnly) :
+	m_databaseName(databaseName),
+	m_readOnly(readOnly)
 {
 }
 
@@ -87,3 +89,8 @@
 {
 }
 
+bool SQLDB::isReadOnly(void) const
+{
+	return m_readOnly;
+}
+

Modified: trunk/SQL/SQLDB.h
===================================================================
--- trunk/SQL/SQLDB.h	2009-07-01 15:22:38 UTC (rev 1663)
+++ trunk/SQL/SQLDB.h	2009-07-02 13:37:20 UTC (rev 1664)
@@ -1,5 +1,5 @@
 /*
- *  Copyright 2008 Fabrice Colin
+ *  Copyright 2008-2009 Fabrice Colin
  *
  *  This program is free software; you can redistribute it and/or modify
  *  it under the terms of the GNU General Public License as published by
@@ -71,6 +71,8 @@
 	public:
 		virtual ~SQLDB();
 
+		virtual bool isReadOnly(void) const;
+
 		virtual bool isOpen(void) const = 0;
 
 		virtual bool alterTable(const std::string &tableName,
@@ -83,8 +85,10 @@
 
 	protected:
 		std::string m_databaseName;
+		bool m_readOnly;
 
-		SQLDB(const std::string &databaseName);
+		SQLDB(const std::string &databaseName,
+			bool readOnly = false);
 
 	private:
 		SQLDB(const SQLDB &other);

Modified: trunk/SQL/SQLiteBase.cpp
===================================================================
--- trunk/SQL/SQLiteBase.cpp	2009-07-01 15:22:38 UTC (rev 1663)
+++ trunk/SQL/SQLiteBase.cpp	2009-07-02 13:37:20 UTC (rev 1664)
@@ -1,5 +1,5 @@
 /*
- *  Copyright 2005-2008 Fabrice Colin
+ *  Copyright 2005-2009 Fabrice Colin
  *
  *  This program is free software; you can redistribute it and/or modify
  *  it under the terms of the GNU General Public License as published by
@@ -136,8 +136,9 @@
 	return new SQLiteRow(rowColumns, m_nColumns);
 }
 
-SQLiteBase::SQLiteBase(const string &databaseName, bool onDemand) :
-	SQLDB(databaseName),
+SQLiteBase::SQLiteBase(const string &databaseName,
+	bool readOnly, bool onDemand) :
+	SQLDB(databaseName, readOnly),
 	m_onDemand(onDemand),
 	m_pDatabase(NULL)
 {
@@ -173,8 +174,16 @@
 
 void SQLiteBase::open(void)
 {
+	int openFlags = SQLITE_OPEN_READWRITE|SQLITE_OPEN_CREATE;
+
+	if (m_readOnly == true)
+	{
+		openFlags = SQLITE_OPEN_READONLY;
+	}
+
 	// Open the new database
-	if (sqlite3_open(m_databaseName.c_str(), &m_pDatabase) != SQLITE_OK)
+	if (sqlite3_open_v2(m_databaseName.c_str(), &m_pDatabase,
+		openFlags, NULL) != SQLITE_OK)
 	{
 		// An handle is returned even when an error occurs !
 		if (m_pDatabase != NULL)

Modified: trunk/SQL/SQLiteBase.h
===================================================================
--- trunk/SQL/SQLiteBase.h	2009-07-01 15:22:38 UTC (rev 1663)
+++ trunk/SQL/SQLiteBase.h	2009-07-02 13:37:20 UTC (rev 1664)
@@ -1,5 +1,5 @@
 /*
- *  Copyright 2005-2008 Fabrice Colin
+ *  Copyright 2005-2009 Fabrice Colin
  *
  *  This program is free software; you can redistribute it and/or modify
  *  it under the terms of the GNU General Public License as published by
@@ -64,7 +64,8 @@
 class SQLiteBase : public SQLDB
 {
 	public:
-		SQLiteBase(const std::string &databaseName, bool onDemand = true);
+		SQLiteBase(const std::string &databaseName,
+			bool readOnly = false, bool onDemand = true);
 		virtual ~SQLiteBase();
 
 		static bool check(const std::string &databaseName);



